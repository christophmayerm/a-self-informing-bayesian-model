/**
dco/c++/base v4.0.2
    -- Algorithmic Differentiation by Operator Overloading in C++

COPYRIGHT 2023
The Numerical Algorithms Group Limited and
Software and Tools for Computational Engineering @ RWTH Aachen University

This file is part of dco/c++.
**/

namespace dco {
typedef index_t_DEFINE index_t;
typedef index_t DCO_TAPE_INT;
typedef index_t_DEFINE DCO_INTEGRAL_TAPE_INT;
static const bool stce_9752 = true;
static const bool HAS_TAPE_ACTIVITY_CHECK = true;
static const bool stce_9753 = true;
static const bool stce_9754 = false;
static const bool stce_9755 = true;
template <class stce_9756, class stce_9757 = stce_9756, class stce_9758 = stce_9756> struct types_config_t {
  typedef stce_9756 value_t;
  typedef stce_9757 stce_9759;
  typedef stce_9758 stce_9760;
};
} // namespace dco

namespace dco {
typedef unsigned long mem_long_t;
inline size_t get_allocation_size(size_t stce_9761);
struct memory_model {
  enum TYPE { stce_9762, BLOB_TAPE, BLOB_TAPE_SPLINT, CHUNK_TAPE, stce_9763, stce_9764, stce_9765, stce_9766 };
};
namespace internal {
template <class stce_9767, class stce_9768> struct active_type;
template <class stce_9767, class DATA_TYPE> struct stce_9769;
template <class stce_9767, class stce_9770, class stce_9771, typename = void> struct stce_9772;
template <class stce_9767, class stce_9773, class stce_9774, class stce_9771, typename = void> struct stce_9775;
template <class stce_9767, class stce_9773, class stce_9774, class stce_9771, typename = void> struct stce_9776;
template <class stce_9767, class stce_9773, class stce_9774, class stce_9771, typename = void> struct stce_9777;
template <typename stce_9778, typename enable_if = void> struct trait_value;
template <typename stce_9778, typename stce_9779 = void, typename enable_if = void> struct stce_9780;
template <typename stce_9778, typename stce_9779 = void, typename enable_if = void> struct stce_9781;
template <typename stce_9778, typename stce_9779 = void, typename enable_if = void> struct stce_9782;
template <typename stce_9778, typename enable_if = void> struct stce_9783;
template <typename stce_9778, typename enable_if = void> struct stce_9784;
template <typename stce_9778, typename enable_if = void> struct stce_9785;
template <enum memory_model::TYPE MEMORY_MODEL, class stce_9786,
          enum memory_model::TYPE stce_9787 = memory_model::stce_9762>
class tape;
template <typename stce_9788, typename stce_9789 = void> struct smart_tape_ptr_t;
template <typename stce_9778> struct stce_9790 {};
template <memory_model::TYPE MEMORY_MODEL, typename stce_9786, memory_model::TYPE stce_9787>
struct stce_9790<tape<MEMORY_MODEL, stce_9786, stce_9787>> {
  typedef typename stce_9786::stce_9759 type;
};
template <class stce_9791, typename stce_9792> class adjoint_vector_lazy;
template <class stce_9793> struct jacobian_preaccumulator_t;
} // namespace internal
template <typename stce_9778> struct mode;
enum stce_9794 { stce_9795, stce_9796, stce_9797, stce_9798, stce_9799, stce_9800, stce_9801, stce_9802 };
template <typename stce_9778> typename internal::stce_9784<stce_9778>::stce_9803 tape(const stce_9778&);
template <typename stce_9767> struct stce_9804 {
  typedef stce_9767 active_value_t;
  typedef stce_9767 value_t;
  typedef value_t scalar_value_t;
  typedef stce_9767 passive_t;
  typedef stce_9767 scalar_passive_t;
  static const int order = 0;
};
struct stce_9805 {
  using stce_9760 = double;
};
namespace vector_ns {
template <typename stce_9806, size_t stce_9807> struct alignas(alignof(stce_9806[stce_9807])) vector_t;
}
namespace folding {
template <typename stce_9778, typename enable_if = void> struct is_zero_trait;
template <typename stce_9778> bool is_zero(const stce_9778& stce_9808);
} // namespace folding
} // namespace dco

extern "C" {
extern int stce_1000002(int stce_9809 = false);
extern void* stce_1000001(size_t* stce_9810, int);
extern void* stce_999999(size_t, int);
extern DCO_INT32 stce_1000003(DCO_INT32* stce_9811);
extern DCO_INT64 stce_1000004(DCO_INT64* stce_9811);
extern void stce_1000000(void* stce_9812);
}
template <typename stce_9778> inline stce_9778 stce_9813(stce_9778& stce_9811);
template <> inline DCO_INT32 stce_9813<DCO_INT32>(DCO_INT32& stce_9811) { return stce_1000003(&stce_9811); }
template <> inline DCO_INT64 stce_9813<DCO_INT64>(DCO_INT64& stce_9811) { return stce_1000004(&stce_9811); }

namespace dco {
class exception {
public:
  template <typename stce_9814>
  static stce_9814 create(std::string stce_9815, std::string stce_9816 = "", int stce_9817 = 0) {
    std::stringstream stce_9818;
    stce_9818 << "--- dco/c++ --- " << stce_9815;
    if (stce_9816 != "")
      stce_9818 << " --- " << stce_9816 << ":" << stce_9817 << ".";
    DCO_LOG(dco::logERROR) << "EXCEPTION thrown: " << stce_9818.str();
    return stce_9814(stce_9818.str());
  }
  template <typename stce_9814>
  static stce_9814 stce_9819(std::string stce_9815, std::string stce_9816 = "", int stce_9817 = 0) {
    std::stringstream stce_9818;
    stce_9818 << "--- dco/c++ --- " << stce_9815;
    if (stce_9816 != "")
      stce_9818 << " --- " << stce_9816 << ":" << stce_9817 << ".";
    DCO_LOG(dco::logERROR) << "EXCEPTION thrown: " << stce_9818.str();
    return stce_9814();
  }
};
} // namespace dco
namespace dco {
template <memory_model::TYPE MEMORY_MODEL, class stce_9786, memory_model::TYPE stce_9787>
bool is_null(internal::tape<MEMORY_MODEL, stce_9786, stce_9787>* tape) {
  return (tape == NULL);
}
static unsigned int stce_9820 = 0xABCDE;
static unsigned int stce_9821(unsigned int* stce_9822, unsigned int stce_9823) {
  unsigned int stce_9824;
  stce_9824 = *stce_9822 & 1;
  *stce_9822 >>= 1;
  if (stce_9824 == 1)
    *stce_9822 = stce_9823;
  return *stce_9822;
}
static inline double stce_9825() {
  stce_9821(&stce_9820, 0xB4BCD35C);
  unsigned int stce_9826 = stce_9821(&stce_9820, 0xB4BCD35C);
  return double(stce_9826) / RAND_MAX;
}
template <class stce_9778> std::string type_name() {
  typedef typename std::remove_reference<stce_9778>::type stce_9827;
  std::unique_ptr<char, void (*)(void*)> stce_9828(
      abi::__cxa_demangle(typeid(stce_9827).name(), nullptr, nullptr, nullptr), std::free);
  std::string stce_9829 = stce_9828 != nullptr ? stce_9828.get() : typeid(stce_9827).name();
  if (std::is_const<stce_9827>::value)
    stce_9829 += " const";
  if (std::is_volatile<stce_9827>::value)
    stce_9829 += " volatile";
  if (std::is_lvalue_reference<stce_9778>::value)
    stce_9829 += "&";
  else if (std::is_rvalue_reference<stce_9778>::value)
    stce_9829 += "&&";
  return stce_9829;
}
namespace internal {
template <typename stce_9778, bool> struct stce_9830 {
  typedef stce_9778 type;
};
template <typename stce_9778> struct stce_9830<stce_9778, true> {
  typedef stce_9778& type;
};
} // namespace internal
namespace helper {
inline bool file_exists(const std::string& str) {
  std::ifstream stce_9831{str};
  return stce_9831.is_open();
}
template <typename stce_9778>
std::string to_string(stce_9778 const& stce_9808,
                      const int stce_9832 = std::numeric_limits<typename mode<stce_9778>::passive_t>::max_digits10) {
  std::ostringstream out;
  out.precision(stce_9832);
  out << std::scientific << stce_9808;
  return out.str();
}
inline std::string stce_9833(std::string const& str, const std::string& stce_9834, const std::string& stce_9835) {
  std::string stce_9836(str);
  std::string::size_type stce_9837 = 0;
  while ((stce_9837 = stce_9836.find(stce_9834, stce_9837)) != std::string::npos) {
    stce_9836.replace(stce_9837, stce_9834.length(), stce_9835);
    stce_9837 += stce_9835.length();
  }
  return stce_9836;
}
template <typename> struct stce_9838 {
  static constexpr bool value = false;
};
template <typename stce_9839, typename... stce_9840> void stce_9841(int64_t, stce_9839&&, stce_9840&&...) {
  static_assert(stce_9838<stce_9839>::value, "--- dco/c++ --- The user-supplied callable provided as an argument to "
                                             "interpret_adjoint*() has wrong interface.");
}
template <typename stce_9839, typename... stce_9840>
auto stce_9841(int, stce_9839&& stce_9842, stce_9840&&... stce_9843)
    -> decltype(stce_9842(std::forward<stce_9840>(stce_9843)...)) {
  stce_9842(stce_9843...);
}
static bool stce_9844 = true;
template <typename stce_9778> struct stce_9845 {
  static const bool stce_9846 = true;
  static const bool value = true;
};
template <typename stce_9778> struct type_identity {
  typedef stce_9778 type;
};
template <class stce_9847, const size_t stce_9848 = 1> struct valvec {
  static const size_t stce_9849 = stce_9848;
  typedef stce_9847 value_t;
  stce_9847 stce_9850[stce_9848];
  void stce_9851(const stce_9847& stce_9852) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9850[stce_9853] = stce_9852;
  }
  template <typename stce_9778>
  valvec(const stce_9778& stce_9808, typename std::enable_if<std::is_fundamental<stce_9778>::value, int>::type = 0) {
    stce_9851(stce_9808);
  }
  template <typename stce_9778 = stce_9847>
  valvec(const stce_9847& stce_9808, typename std::enable_if<!std::is_fundamental<stce_9778>::value, int>::type = 0) {
    stce_9851(stce_9808);
  }
  valvec() { stce_9851(0); }
  stce_9847& operator[](const size_t stce_9811) { return stce_9850[stce_9811]; }
  const stce_9847& operator[](const size_t stce_9811) const { return stce_9850[stce_9811]; }
  valvec& operator=(const std::array<stce_9847, stce_9848>& v) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9850[stce_9853] = v[stce_9853];
    return *this;
  }
  valvec& operator=(const std::vector<stce_9847>& v) {
    if (v.size() != stce_9848) {
      throw exception::create<std::runtime_error>("Assignment from std::vector not possible, non-matching sizes.");
    }
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9850[stce_9853] = v[stce_9853];
    return *this;
  }
  template <typename stce_9778>
  typename std::enable_if<std::is_fundamental<stce_9778>::value, valvec>::type& operator=(const stce_9778& v) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9850[stce_9853] = v;
    return *this;
  }
  template <typename stce_9778 = stce_9847>
  typename std::enable_if<!std::is_fundamental<stce_9778>::value, valvec>::type& operator=(const stce_9847& v) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9850[stce_9853] = v;
    return *this;
  }
  valvec& operator+=(const valvec& v) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9850[stce_9853] += v.stce_9850[stce_9853];
    return *this;
  }
  valvec& operator+=(const std::array<stce_9847, stce_9848>& v) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9850[stce_9853] += v[stce_9853];
    return *this;
  }
  valvec& operator+=(const std::vector<stce_9847>& v) {
    if (v.size() != stce_9848) {
      throw exception::create<std::runtime_error>("Increment with std::vector not possible, non-matching sizes.");
    }
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9850[stce_9853] += v[stce_9853];
    return *this;
  }
  operator std::array<stce_9847, stce_9848>() {
    std::array<stce_9847, stce_9848> stce_9836;
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9836[stce_9853] = stce_9850[stce_9853];
    return stce_9836;
  }
  operator std::vector<stce_9847>() {
    std::vector<stce_9847> stce_9836(stce_9848);
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
      stce_9836[stce_9853] = stce_9850[stce_9853];
    return stce_9836;
  }
};
template <typename stce_9847, typename stce_9854, const size_t stce_9848>
bool operator==(valvec<stce_9847, stce_9848> const& stce_9855, valvec<stce_9854, stce_9848> const& stce_9856) {
  for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853) {
    if (stce_9855[stce_9853] != stce_9856[stce_9853]) {
      return false;
    }
  }
  return true;
}
template <typename stce_9847, typename stce_9854, const size_t stce_9848>
bool operator==(valvec<stce_9847, stce_9848> const& stce_9855, stce_9854 const& stce_9856) {
  for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853) {
    if (stce_9855[stce_9853] != stce_9856) {
      return false;
    }
  }
  return true;
}
template <class stce_9778> struct vecsize_info {
  static const size_t vecsize;
  typedef stce_9778 stce_9857;
};
template <class stce_9778> const size_t vecsize_info<stce_9778>::vecsize = 1;
template <class stce_9847, size_t stce_9848> struct vecsize_info<valvec<stce_9847, stce_9848>> {
  static const size_t vecsize;
  typedef stce_9847 stce_9857;
};
template <class stce_9847, size_t stce_9848>
const size_t vecsize_info<valvec<stce_9847, stce_9848>>::vecsize = stce_9848;
template <class stce_9847, size_t stce_9848>
static inline valvec<stce_9847, stce_9848> operator+(const valvec<stce_9847, stce_9848>& stce_9858,
                                                     const valvec<stce_9847, stce_9848>& stce_9859) {
  valvec<stce_9847, stce_9848> stce_9836;
  for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
    stce_9836.stce_9850[stce_9853] = stce_9858.stce_9850[stce_9853] + stce_9859.stce_9850[stce_9853];
  return stce_9836;
}
template <class stce_9847, size_t stce_9848>
static inline valvec<stce_9847, stce_9848> operator*(const valvec<stce_9847, stce_9848>& stce_9858,
                                                     const valvec<stce_9847, stce_9848>& stce_9859) {
  valvec<stce_9847, stce_9848> stce_9836;
  for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
    stce_9836.stce_9850[stce_9853] = stce_9858.stce_9850[stce_9853] * stce_9859.stce_9850[stce_9853];
  return stce_9836;
}
template <class stce_9847, class stce_9854, size_t stce_9848>
static inline valvec<stce_9847, stce_9848> operator*(const stce_9854& stce_9860,
                                                     const valvec<stce_9847, stce_9848>& stce_9861) {
  valvec<stce_9847, stce_9848> stce_9836;
  for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
    stce_9836.stce_9850[stce_9853] = static_cast<stce_9847>(stce_9861.stce_9850[stce_9853] * stce_9860);
  return stce_9836;
}
template <class stce_9847, class stce_9854, size_t stce_9848>
static inline valvec<stce_9847, stce_9848> operator*(const valvec<stce_9847, stce_9848>& stce_9858,
                                                     const stce_9854& stce_9859) {
  valvec<stce_9847, stce_9848> stce_9836;
  for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853)
    stce_9836.stce_9850[stce_9853] = static_cast<stce_9847>(stce_9858.stce_9850[stce_9853] * stce_9859);
  return stce_9836;
}
template <class stce_9847, size_t stce_9848>
static inline std::ostream& operator<<(std::ostream& out, const valvec<stce_9847, stce_9848>& stce_9808) {
  out << "(";
  for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853) {
    out << stce_9808.stce_9850[stce_9853];
    if (stce_9853 != stce_9848 - 1) {
      out << ";";
    }
  }
  out << ")";
  return out;
}
} // namespace helper
template <typename TYPE> class stce_9862 {
  const TYPE& stce_9778;

public:
  stce_9862(const TYPE& stce_9863) : stce_9778(stce_9863) {}
  template <typename stce_9864> stce_9864* create() const { return new stce_9864(stce_9778); }
};
template <> class stce_9862<void*> {
public:
  stce_9862(void* v) { (void)v; }
  template <typename stce_9864> stce_9864* create() const { return new stce_9864(); }
};
class stce_9865 {
  std::ofstream stce_9866;
  std::string stce_9867;
  std::string stce_9868;
  std::stringstream stce_9869;
  std::stringstream stce_9870;

public:
  stce_9865(const std::string& filename) : stce_9867("digraph {\n"), stce_9868("\n}\n") {
    stce_9869.clear();
    stce_9870.clear();
    stce_9866.open(filename.c_str());
  }
  void stce_9871(std::vector<index_t>& stce_9872, std::vector<index_t>& stce_9873, index_t stce_9874) {
    stce_9869 << stce_9874 + 1 << "[shape=box,label=\"(" << stce_9874 + 1 << ", ext. function)\",color=\"red\"]\n";
    for (std::vector<index_t>::iterator stce_9853 = stce_9872.begin(); stce_9853 != stce_9872.end(); ++stce_9853) {
      stce_9870 << *stce_9853 << " -> " << stce_9874 << "[label=\"unknown"
                << "\",color=\"red\"]\n";
    }
    for (std::vector<index_t>::iterator stce_9853 = stce_9873.begin(); stce_9853 != stce_9873.end(); ++stce_9853) {
      stce_9870 << stce_9874 << " -> " << *stce_9853 << "[label=\"unknown"
                << "\",color=\"red\"]\n";
    }
  }
  void stce_9875(index_t stce_9874) {
    if (stce_9874 == 0) {
      return;
    }
    stce_9869 << stce_9874 << "[shape=box,label=\"" << stce_9874 << "\", color=\"green\"]\n";
  }
  template <typename stce_9876> void stce_9875(index_t stce_9874, stce_9876 adjoint) {
    if (stce_9874 == 0) {
      return;
    }
    stce_9869 << stce_9874 << "[shape=box,label=\"(" << stce_9874 << ", " << adjoint << ")\", color=\"green\"]\n";
  }
  template <typename stce_9876> void stce_9877(index_t stce_9834, index_t stce_9835, stce_9876 stce_9878) {
    if (stce_9834 == 0 || stce_9835 == 0) {
      return;
    }
    stce_9870 << stce_9834 << " -> " << stce_9835 << "[label=\"" << stce_9878 << "\"]\n";
  }
  ~stce_9865() {
    stce_9866 << stce_9867;
    stce_9866 << stce_9869.str();
    stce_9866 << stce_9870.str();
    stce_9866 << stce_9868;
    stce_9866.close();
  }
};
template <bool stce_9879, class stce_9778, class stce_9839> struct stce_9880 {
  typedef stce_9778 type;
};
template <class stce_9778, class stce_9839> struct stce_9880<false, stce_9778, stce_9839> {
  typedef stce_9839 type;
};
template <bool stce_9879, typename stce_9778 = void> struct enable_if {};
template <typename stce_9778> struct enable_if<true, stce_9778> {
  typedef stce_9778 type;
};
template <class stce_9778, class stce_9881> struct is_same {
  static const bool value = false;
};
template <class stce_9778> struct is_same<stce_9778, stce_9778> {
  static const bool value = true;
};
template <typename stce_9778> struct type_identity {
  typedef stce_9778 type;
};
template <class stce_9778> struct remove_const {
  typedef stce_9778 type;
};
template <class stce_9778> struct remove_const<const stce_9778> {
  typedef stce_9778 type;
};
template <class stce_9778> struct remove_const<const stce_9778&> {
  typedef stce_9778& type;
};
template <class stce_9778> struct remove_const<const stce_9778&&> {
  typedef stce_9778&& type;
};
template <class stce_9778> struct stce_9882 {
  typedef stce_9778 type;
};
template <class stce_9778> struct stce_9882<stce_9778&> {
  typedef stce_9778 type;
};
template <class stce_9778> struct stce_9882<const stce_9778&> {
  typedef const stce_9778 type;
};
template <class stce_9778> struct stce_9882<stce_9778&&> {
  typedef stce_9778 type;
};
template <typename stce_9778> struct remove_all {
  typedef stce_9778 type;
};
template <typename stce_9778> struct remove_all<const stce_9778> {
  typedef typename remove_all<stce_9778>::type type;
};
template <typename stce_9778> struct remove_all<stce_9778 const&> {
  typedef typename remove_all<stce_9778>::type type;
};
template <typename stce_9778> struct remove_all<stce_9778&> {
  typedef typename remove_all<stce_9778>::type type;
};
template <typename stce_9778> struct remove_all<stce_9778 const*> {
  typedef typename remove_all<stce_9778>::type type;
};
template <typename stce_9778> struct remove_all<stce_9778*> {
  typedef typename remove_all<stce_9778>::type type;
};
template <typename stce_9778> struct remove_all<stce_9778&&> {
  typedef typename remove_all<stce_9778>::type type;
};
template <typename stce_9778> struct stce_9883 {
  enum { value = false };
};
template <typename stce_9778> struct stce_9883<stce_9778*> {
  enum { value = true };
};
template <typename stce_9884, typename stce_9885> struct stce_9886 {
  static const bool value = (stce_9884::order < stce_9885::order);
};
template <> struct stce_9886<void, void> {
  static const bool value = false;
};
static inline void* alloc(size_t size, bool stce_9887 = false) {
  return stce_999999(size, static_cast<int>(stce_9887));
}
static inline void dealloc(void* stce_9812) { stce_1000000(stce_9812); }
namespace folding {
template <class stce_9847, const size_t stce_9848> struct is_zero_trait<helper::valvec<stce_9847, stce_9848>> {
  static bool get(const helper::valvec<stce_9847, stce_9848>& stce_9808) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9848; ++stce_9853) {
      if (!is_zero(stce_9808[stce_9853])) {
        return false;
      }
    }
    return true;
  }
};
} // namespace folding
} // namespace dco
namespace dco {
template <typename stce_9778, typename stce_9888 = void> struct trait_size_of;
template <typename stce_9778> mem_long_t size_of(const stce_9778& stce_9808) {
  return trait_size_of<stce_9778>::get(stce_9808);
}
template <typename stce_9778> mem_long_t size_of(const stce_9778& stce_9808, int stce_9889) {
  return trait_size_of<stce_9778>::get(stce_9808, stce_9889);
}
template <typename stce_9778, typename stce_9888> struct trait_size_of {
  static mem_long_t get(const stce_9778&) {
    if (helper::stce_9844) {
      throw dco::exception::create<std::runtime_error>(
          "You're trying to compute the size of the checkpoint, but a type (" + type_name<stce_9778>() +
          ") you checkpointed does not have a correct specialization:\n\n" +
          "template <typename T> struct trait_size_of {\n" + "   static mem_long_t get(const T&) { ... }\n" + "};\n\n");
    }
    return 0;
  }
};
template <memory_model::TYPE MEMORY_MODEL, class stce_9786, memory_model::TYPE stce_9787>
struct trait_size_of<dco::internal::tape<MEMORY_MODEL, stce_9786, stce_9787>*> {
  typedef dco::internal::tape<MEMORY_MODEL, stce_9786, stce_9787> tape_t;
  static mem_long_t get(const tape_t* tape, const int stce_9889 = tape_t::stce_9890) {
    return tape->stce_9891(stce_9889);
  }
};
template <typename stce_9788> struct trait_size_of<dco::internal::smart_tape_ptr_t<stce_9788>> {
  static mem_long_t get(dco::internal::smart_tape_ptr_t<stce_9788> const& tape,
                        const int stce_9889 = stce_9788::tape_t::stce_9890) {
    return tape->stce_9891(stce_9889);
  }
};
template <typename stce_9778> struct trait_size_of<std::vector<stce_9778>> {
  static mem_long_t get(const std::vector<stce_9778>& stce_9808) {
    return stce_9808.size() * sizeof(stce_9778) + sizeof(stce_9808);
  }
};
template <> struct trait_size_of<char> {
  static mem_long_t get(const char&) { return sizeof(char); }
};
template <> struct trait_size_of<wchar_t> {
  static mem_long_t get(const wchar_t&) { return sizeof(wchar_t); }
};
template <> struct trait_size_of<signed char> {
  static mem_long_t get(const signed char&) { return sizeof(signed char); }
};
template <> struct trait_size_of<short> {
  static mem_long_t get(const short&) { return sizeof(short); }
};
template <> struct trait_size_of<int> {
  static mem_long_t get(const int&) { return sizeof(int); }
};
template <> struct trait_size_of<long> {
  static mem_long_t get(const long&) { return sizeof(long); }
};
template <> struct trait_size_of<unsigned char> {
  static mem_long_t get(const unsigned char&) { return sizeof(unsigned char); }
};
template <> struct trait_size_of<unsigned short> {
  static mem_long_t get(const unsigned short&) { return sizeof(unsigned short); }
};
template <> struct trait_size_of<unsigned int> {
  static mem_long_t get(const unsigned int&) { return sizeof(unsigned int); }
};
template <> struct trait_size_of<unsigned long> {
  static mem_long_t get(const unsigned long&) { return sizeof(unsigned long); }
};
template <> struct trait_size_of<long long> {
  static mem_long_t get(const long long&) { return sizeof(long long); }
};
template <> struct trait_size_of<unsigned long long> {
  static mem_long_t get(const unsigned long long&) { return sizeof(unsigned long long); }
};
template <> struct trait_size_of<float> {
  static mem_long_t get(const float&) { return sizeof(float); }
};
template <> struct trait_size_of<double> {
  static mem_long_t get(const double&) { return sizeof(double); }
};
template <> struct trait_size_of<long double> {
  static mem_long_t get(const long double&) { return sizeof(long double); }
};
template <> struct trait_size_of<bool> {
  static mem_long_t get(const bool&) { return sizeof(bool); }
};
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9892> struct stce_9893 {
  typedef stce_9892 type;
  typedef stce_9892& stce_9894;
  typedef const stce_9892 stce_9895;
};
template <typename stce_9778> struct stce_9893<std::vector<stce_9778>> {
  typedef std::vector<stce_9778>& type;
  typedef std::vector<stce_9778>& stce_9894;
  typedef std::vector<stce_9778> const& stce_9895;
};
template <stce_9794 stce_9896, typename stce_9778, typename stce_9897 = void> struct stce_9898 {};
template <typename stce_9778> struct stce_9898<stce_9795, stce_9778> {
  typedef typename dco::mode<stce_9778>::value_t value_t;
  typedef typename trait_value<stce_9778>::stce_9803 stce_9803;
  typedef typename trait_value<stce_9778>::stce_9899 stce_9899;
  stce_9803 get(stce_9778& stce_9808) { return trait_value<stce_9778>::value(stce_9808); };
  stce_9899 get(const stce_9778& stce_9808) const { return trait_value<stce_9778>::value(stce_9808); };
};
template <typename stce_9778> struct stce_9898<stce_9801, stce_9778> {
  typedef typename dco::mode<stce_9778>::passive_t value_t;
  typedef typename stce_9783<stce_9778>::stce_9803 stce_9803;
  typedef typename stce_9783<stce_9778>::stce_9899 stce_9899;
  stce_9803 get(stce_9778& stce_9808) { return stce_9783<stce_9778>::value(stce_9808); };
  stce_9899 get(const stce_9778& stce_9808) const { return stce_9783<stce_9778>::value(stce_9808); };
};
template <typename stce_9778> struct stce_9898<stce_9796, stce_9778> {
  typedef typename dco::mode<stce_9778>::derivative_t value_t;
  typedef typename stce_9780<stce_9778>::stce_9803 stce_9803;
  typedef typename stce_9780<stce_9778>::stce_9803 stce_9899;
  stce_9803 get(const stce_9778& stce_9808) const { return stce_9780<stce_9778>::value(stce_9808); };
};
template <typename stce_9778> struct stce_9898<stce_9802, stce_9778> {
  typedef typename stce_9785<stce_9778>::stce_9803 stce_9803;
  typedef typename stce_9785<stce_9778>::stce_9803 stce_9899;
  typedef typename stce_9882<stce_9803>::type value_t;
  stce_9803 get(const stce_9778& stce_9808) const { return stce_9785<stce_9778>::value(stce_9808); };
};
template <typename stce_9778, typename stce_9897> struct stce_9898<stce_9797, stce_9778, stce_9897> {
  typedef typename dco::mode<stce_9778>::derivative_t value_t;
  typedef typename stce_9780<stce_9778, stce_9897>::stce_9900 stce_9803;
  typedef typename stce_9780<stce_9778, stce_9897>::stce_9900 stce_9899;
  stce_9897* stce_9901;
  stce_9898(stce_9897* adjoints) : stce_9901(adjoints) {}
  auto get(stce_9778& stce_9808) -> decltype(stce_9780<stce_9778, stce_9897>::value(stce_9808, stce_9901)) {
    return stce_9780<stce_9778, stce_9897>::value(stce_9808, stce_9901);
  };
  auto get(const stce_9778& stce_9808) const -> decltype(stce_9780<stce_9778, stce_9897>::value(stce_9808, stce_9901)) {
    return stce_9780<stce_9778, stce_9897>::value(stce_9808, stce_9901);
  };
};
template <stce_9794 stce_9896, class stce_9778, typename stce_9892, typename stce_9779 = void>
struct stce_9902 : stce_9898<stce_9896, stce_9778, stce_9779> {
  typedef typename stce_9893<stce_9892>::type stce_9903;
  typedef typename stce_9893<stce_9892>::stce_9894 stce_9904;
  typedef typename stce_9893<stce_9892>::stce_9895 stce_9905;
  typedef stce_9898<stce_9896, stce_9778, stce_9779> stce_9906;
  typedef typename stce_9906::value_t value_t;
  stce_9903 stce_9907;
  stce_9902(stce_9905 stce_9861) : stce_9907(const_cast<stce_9904>(stce_9861)) {}
  stce_9902(stce_9905 stce_9861, stce_9779* stce_9908)
      : stce_9906(stce_9908), stce_9907(const_cast<stce_9904>(stce_9861)) {}
  stce_9902& operator=(const std::vector<value_t>& stce_9909) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9907.size(); ++stce_9853) {
      stce_9906::get(stce_9907[stce_9853]) = stce_9909[stce_9853];
    }
    return *this;
  }
  stce_9902& operator+=(const std::vector<value_t>& stce_9909) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9907.size(); ++stce_9853) {
      stce_9906::get(stce_9907[stce_9853]) += stce_9909[stce_9853];
    }
    return *this;
  }
  stce_9902& operator=(value_t const& stce_9909) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9907.size(); ++stce_9853) {
      stce_9906::get(stce_9907[stce_9853]) = stce_9909;
    }
    return *this;
  }
  template <typename stce_9756,
            typename = typename std::enable_if<std::is_assignable<stce_9756&, value_t>::value>::type>
  operator std::vector<stce_9756>() const {
    std::vector<stce_9756> stce_9836(stce_9907.size());
    for (size_t stce_9853 = 0; stce_9853 < stce_9907.size(); ++stce_9853) {
      stce_9836[stce_9853] = stce_9906::get(stce_9907[stce_9853]);
    }
    return stce_9836;
  }
  typename stce_9906::stce_9803 operator[](size_t stce_9853) { return stce_9906::get(stce_9907[stce_9853]); }
  typename stce_9906::stce_9899 operator[](size_t stce_9853) const { return stce_9906::get(stce_9907[stce_9853]); }
  size_t size() const { return stce_9907.size(); }
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9910> struct stce_9911 : public dco::mode<typename stce_9910::binary_t>::data_t {
  typedef stce_9910 mode_t;
  static const int gbcp_order = mode_t::gbcp_order;
  static const int order = mode_t::order;
  template <class stce_9912> DCO_ALWAYS_INLINE void stce_9913(stce_9912 const&) {}
  void clear() {}
  stce_9911() {}
  stce_9911(stce_9911 const&) : dco::mode<typename stce_9910::binary_t>::data_t() {}
  stce_9911& operator=(stce_9911 const&) { return *this; }
  index_t& _tape_index() const { return static_cast<const typename mode_t::type&>(*this).stce_9914._tape_index(); }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename stce_9778, typename stce_9881>
stce_9778& create_gbcp(stce_9881& stce_9915, typename enable_if<!stce_9883<stce_9778>::value, stce_9778>::type* = 0) {
  return reinterpret_cast<stce_9778&>(stce_9915);
}
template <typename stce_9778, typename stce_9881>
stce_9778 create_gbcp(stce_9881& stce_9915, typename enable_if<stce_9883<stce_9778>::value, stce_9778>::type* = 0) {
  return reinterpret_cast<stce_9778>(&stce_9915);
}
namespace internal {
template <typename stce_9778, typename enable_if = void> struct stce_9916 {
  static const bool value = false;
};
template <typename mode_t> struct stce_9916<stce_9911<mode_t>> {
  static const bool value = true;
};
template <typename stce_9778>
struct stce_9916<stce_9778, typename dco::enable_if<dco::mode<stce_9778>::is_dco_type>::type> {
  static const bool value = stce_9916<typename dco::mode<stce_9778>::data_t>::value;
};
template <typename stce_9778> struct is_gbcp_type {
  static const bool value = stce_9916<typename dco::remove_all<stce_9778>::type>::value;
};
template <typename stce_9778, int stce_9808> struct stce_9917;
template <typename stce_9778> struct stce_9917<stce_9778, 1> {
  typedef typename mode<stce_9778>::active_value_t& stce_9803;
  typedef const typename mode<stce_9778>::active_value_t& stce_9899;
  static stce_9803 value(stce_9778& at) { return at._value(); }
  static stce_9899 value(const stce_9778& at) { return at._value(); }
};
template <typename stce_9778, int stce_9808> struct stce_9917 {
  typedef typename stce_9917<typename mode<stce_9778>::active_value_t, stce_9808 - 1>::stce_9803 stce_9803;
  typedef typename stce_9917<typename mode<stce_9778>::active_value_t, stce_9808 - 1>::stce_9899 stce_9899;
  static stce_9803 value(stce_9778& at) {
    return stce_9917<typename mode<stce_9778>::active_value_t, stce_9808 - 1>::value(at._value());
  }
  static stce_9899 value(const stce_9778& at) {
    return stce_9917<typename mode<stce_9778>::active_value_t, stce_9808 - 1>::value(at._value());
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename stce_9778> inline typename internal::trait_value<stce_9778>::stce_9803 value(stce_9778& stce_9808) {
  return internal::trait_value<stce_9778>::value(stce_9808);
}
template <typename stce_9778>
inline typename internal::trait_value<stce_9778>::stce_9899 value(const stce_9778& stce_9808) {
  return internal::trait_value<stce_9778>::value(stce_9808);
}
namespace internal {
template <typename stce_9778, typename enable_if> struct trait_value {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef type& stce_9803;
  typedef const type& stce_9899;
  static inline stce_9803 value(type& value) { return value; }
  static inline stce_9899 value(const type& value) { return value; }
};
template <typename stce_9778>
struct trait_value<stce_9778,
                   typename dco::enable_if<dco::mode<stce_9778>::is_dco_type && !is_gbcp_type<stce_9778>::value &&
                                           !dco::mode<stce_9778>::is_intermediate_type>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::value_t& stce_9803;
  typedef typename dco::mode<type>::value_t const& stce_9899;
  static inline stce_9803 value(type& value) { return value._value(); }
  static inline stce_9899 value(const type& value) { return value._value(); }
};
template <typename stce_9778>
struct trait_value<stce_9778, typename dco::enable_if<!is_gbcp_type<stce_9778>::value &&
                                                      dco::mode<stce_9778>::is_intermediate_type>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::value_t const& stce_9803;
  typedef typename dco::mode<type>::value_t const& stce_9899;
  static inline stce_9803 value(type& value) { return value._value(); }
  static inline stce_9899 value(const type& value) { return value._value(); }
};
template <typename stce_9778>
struct trait_value<stce_9778, typename dco::enable_if<is_gbcp_type<stce_9778>::value>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::value_t& stce_9803;
  typedef typename dco::mode<type>::value_t const& stce_9899;
  static inline stce_9803 value(type& stce_9918) { return dco::value(stce_9918._value()); }
  static inline stce_9899 value(const type& stce_9918) { return dco::value(stce_9918._value()); }
};
template <typename stce_9778>
struct trait_value<std::vector<stce_9778>, typename dco::enable_if<dco::mode<stce_9778>::is_dco_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9795, stce_9778, stce_9903> stce_9803;
  typedef const stce_9902<stce_9795, stce_9778, stce_9903> stce_9899;
  static inline stce_9803 value(stce_9903& stce_9861) { return stce_9803(stce_9861); }
  static inline stce_9899 value(const stce_9903& stce_9861) { return stce_9899(stce_9861); }
};
template <stce_9794 stce_9896, class stce_9778, typename stce_9919, typename stce_9920>
struct trait_value<stce_9902<stce_9896, stce_9778, stce_9919, stce_9920>, void> {
  typedef stce_9902<stce_9896, stce_9778, stce_9919, stce_9920> stce_9903;
  typedef stce_9902<stce_9795, typename stce_9903::value_t, stce_9903> stce_9803;
  typedef stce_9902<stce_9795, typename stce_9903::value_t, stce_9903> stce_9899;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
};
} // namespace internal
} // namespace dco

namespace dco {
template <typename stce_9778>
inline typename internal::stce_9783<stce_9778>::stce_9803 passive_value(stce_9778& stce_9808) {
  return internal::stce_9783<stce_9778>::value(stce_9808);
}
template <typename stce_9778>
inline typename internal::stce_9783<stce_9778>::stce_9899 passive_value(const stce_9778& stce_9808) {
  return internal::stce_9783<stce_9778>::value(stce_9808);
}
namespace internal {
template <typename stce_9778, typename enable_if> struct stce_9783 {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef type& stce_9803;
  typedef type const& stce_9899;
  static inline stce_9803 value(type& value) { return value; }
  static inline stce_9899 value(const type& value) { return value; }
};
template <typename stce_9778>
struct stce_9783<stce_9778, typename dco::enable_if<dco::mode<stce_9778>::is_dco_type &&
                                                    !dco::mode<stce_9778>::is_intermediate_type>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::active_value_t active_value_t;
  typedef typename dco::mode<type>::value_t value_t;
  typedef typename dco::mode<type>::passive_t passive_t;
  typedef passive_t& stce_9803;
  typedef passive_t const& stce_9899;
  static inline stce_9803 value(type& value) { return stce_9783<value_t>::value(dco::value(value)); }
  static inline stce_9899 value(const type& value) { return stce_9783<value_t>::value(dco::value(value)); }
};
template <typename stce_9778>
struct stce_9783<stce_9778, typename dco::enable_if<dco::mode<stce_9778>::is_intermediate_type>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::active_value_t active_value_t;
  typedef typename dco::mode<type>::value_t value_t;
  typedef typename dco::mode<type>::passive_t passive_t;
  typedef passive_t const& stce_9803;
  typedef passive_t const& stce_9899;
  static inline stce_9803 value(type& value) { return stce_9783<value_t>::value(dco::value(value)); }
  static inline stce_9899 value(const type& value) { return stce_9783<value_t>::value(dco::value(value)); }
};
template <typename stce_9778>
struct stce_9783<std::vector<stce_9778>, typename dco::enable_if<!dco::mode<stce_9778>::is_dco_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9903& stce_9803;
  typedef const stce_9903& stce_9899;
  static inline stce_9803 value(stce_9903& value) { return value; }
  static inline stce_9899 value(const stce_9903& value) { return value; }
};
template <typename stce_9778>
struct stce_9783<std::vector<stce_9778>, typename dco::enable_if<dco::mode<stce_9778>::is_dco_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9801, stce_9778, stce_9903> stce_9803;
  typedef const stce_9902<stce_9801, stce_9778, stce_9903> stce_9899;
  static inline stce_9803 value(stce_9903& stce_9861) { return stce_9803(stce_9861); }
  static inline stce_9899 value(const stce_9903& stce_9861) { return stce_9899(stce_9861); }
};
template <stce_9794 stce_9896, class stce_9778, typename stce_9919, typename stce_9920>
struct stce_9783<stce_9902<stce_9896, stce_9778, stce_9919, stce_9920>, void> {
  typedef stce_9902<stce_9896, stce_9778, stce_9919, stce_9920> stce_9903;
  typedef stce_9902<stce_9801, typename stce_9903::value_t, stce_9903> stce_9803;
  typedef stce_9902<stce_9801, typename stce_9903::value_t, stce_9903> stce_9899;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
struct interpretation_settings {
  bool reset;
  bool stce_9921;
  interpretation_settings(bool stce_9922 = false, bool stce_9923 = false) : reset(stce_9922), stce_9921(stce_9923) {}
};
} // namespace internal
} // namespace dco

namespace dco {
template <class stce_9758> struct adjoint_vector_abstract;
template <typename stce_9758> struct stce_9924 {
  adjoint_vector_abstract<stce_9758>& adjoints;
  index_t stce_9811;
  stce_9924(adjoint_vector_abstract<stce_9758>& adjoints, index_t stce_9811)
      : adjoints(adjoints), stce_9811(stce_9811) {}
  operator stce_9758() const { return adjoints._read_adjoint(stce_9811); }
  template <typename stce_9778> stce_9924& operator+=(stce_9778 const& stce_9925) {
    adjoints._increment_adjoint(stce_9811, stce_9925);
    return *this;
  }
};
template <class stce_9758> struct adjoint_vector_abstract {
  virtual ~adjoint_vector_abstract(){};
  stce_9924<stce_9758> stce_9926(const index_t stce_9811) { return stce_9924<stce_9758>(*this, stce_9811); }
  virtual stce_9758 _read_adjoint(const index_t stce_9811) = 0;
  virtual void _increment_adjoint(const index_t stce_9811, const stce_9758& stce_9927) = 0;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9928> class stce_9929 {
protected:
  stce_9928& stce_9930;

public:
  stce_9929(stce_9928& stce_9931) : stce_9930(stce_9931) {}
  stce_9928& stce_9931() { return stce_9930; }
};
} // namespace internal
} // namespace dco

namespace dco {
class tape_options {
private:
  std::size_t stce_9932 = 128 * 1024 * 1024, stce_9933 = 0;
  bool stce_9934 = false;
  std::string stce_9935 = "dco_tape_data.bin";
  bool stce_9936 = false;
  bool stce_9937 = false;

public:
  bool operator==(const tape_options& stce_9938) {
    return stce_9932 == stce_9938.stce_9932 && stce_9933 == stce_9938.stce_9933 && stce_9934 == stce_9938.stce_9934 &&
           stce_9936 == stce_9938.stce_9936 && stce_9935 == stce_9938.stce_9935 && stce_9937 == stce_9938.stce_9937;
  }
  bool operator!=(const tape_options& stce_9938) { return !operator==(stce_9938); }
  index_t chunk_size() const {
    if (helper::stce_9844) {
      throw dco::exception::create<std::runtime_error>("chunk_size removed; use chunk_size_in_byte() instead");
    }
    return -1;
  }
  std::size_t chunk_size_in_byte() const { return stce_9932; }
  std::size_t& chunk_size_in_byte() { return stce_9932; }
  void set_chunk_size_in_byte(mem_long_t size) {
    if (static_cast<double>(size) / static_cast<double>(std::numeric_limits<std::size_t>::max()) > 1.0) {
      DCO_LOG(logWARNING) << "set_chunk_size: requesting too much memory for your system (std::size_t too small). "
                             "Resetting to std::numeric_limits<std::size_t>::max()";
      stce_9932 = std::numeric_limits<std::size_t>::max();
    } else {
      stce_9932 = static_cast<std::size_t>(size);
    }
  }
  void set_chunk_size_in_kbyte(double size) { set_chunk_size_in_byte(1024 * static_cast<mem_long_t>(size)); }
  void set_chunk_size_in_mbyte(double size) { set_chunk_size_in_kbyte(1024. * size); }
  void set_chunk_size_in_gbyte(double size) { set_chunk_size_in_mbyte(1024. * size); }
  std::size_t blob_size_in_byte() const { return stce_9933; }
  std::size_t& blob_size_in_byte() { return stce_9933; }
  void set_blob_size_in_byte(mem_long_t size) {
    if (static_cast<double>(size) / static_cast<double>(std::numeric_limits<std::size_t>::max()) > 1.0) {
      DCO_LOG(logWARNING) << "set_blob_size: requesting too much memory for your system (std::size_t too small). "
                             "Resetting to std::numeric_limits<std::size_t>::max()";
      stce_9933 = std::numeric_limits<std::size_t>::max();
    } else {
      stce_9933 = static_cast<std::size_t>(size);
    }
  }
  void set_blob_size_in_kbyte(double size) { set_blob_size_in_byte(1024 * static_cast<mem_long_t>(size)); }
  void set_blob_size_in_mbyte(double size) { set_blob_size_in_kbyte(1024. * size); }
  void set_blob_size_in_gbyte(double size) { set_blob_size_in_mbyte(1024. * size); }
  bool& deallocation_on_reset() { return stce_9934; }
  const bool& deallocation_on_reset() const { return stce_9934; }
  std::string& filename() { return stce_9935; }
  const std::string& filename() const { return stce_9935; }
  bool& write_to_file() { return stce_9936; }
  bool write_to_file() const { return stce_9936; }
  bool& alloc_use_huge_pages() { return stce_9937; }
  bool alloc_use_huge_pages() const { return stce_9937; }
};
} // namespace dco
namespace dco {
namespace internal {
template <class stce_9758, typename stce_9928> class adjoint_vector_lazy : public stce_9929<stce_9928> {
  typedef stce_9929<stce_9928> stce_9939;

public:
  typedef typename helper::vecsize_info<stce_9758>::stce_9857 stce_9940;
  typedef stce_9758 stce_9760;

protected:
  std::vector<stce_9760> stce_9901;
  index_t stce_9941;
  index_t stce_9942;
  index_t stce_9943;
  int stce_9944;
  tape_options stce_9945;

public:
  typedef stce_9760 value_t;
  void init() {}
  adjoint_vector_lazy(index_t size, stce_9928& tape, tape_options stce_9946)
      : stce_9939(tape), stce_9901(0), stce_9941(0), stce_9942(0), stce_9943(size), stce_9944(0), stce_9945(stce_9946) {
  }
  DCO_ALWAYS_INLINE ~adjoint_vector_lazy() {}
  index_t size() const { return stce_9943; }
  bool stce_9947(index_t stce_9948) const { return stce_9941 > stce_9948; }
  mem_long_t stce_9949() const { return static_cast<mem_long_t>(stce_9942) * sizeof(stce_9760); }
  stce_9760& operator[](index_t stce_9811) { return stce_9901[stce_9811]; }
  stce_9760 operator[](index_t stce_9811) const { return stce_9901[stce_9811]; }
  void stce_9950(typename stce_9928::iterator& stce_9826) {
    (*this)[stce_9826->arg()] += static_cast<stce_9760>(stce_9826->pval() * (*this)[stce_9826.index()]);
  }
  void resize(index_t stce_9951) {
    DCO_LOG(logDEBUG2) << "Resizing internal adjoint vector to " << stce_9951;
    if (stce_9951 < stce_9943) {
      stce_9952(stce_9943, stce_9951 - 1);
    }
    stce_9943 = stce_9951;
  }
  void stce_9953(index_t stce_9951) {
    if (stce_9951 <= stce_9941) {
      return;
    }
    if (++stce_9944 % 100 == 0) {
      DCO_LOG(logWARNING) << "dco_adjoint_vector: resizing adjoint vector quite often (#=" << stce_9944
                          << ") -- might have severe performance impact (reallocation / initialization / copy)";
    }
    stce_9901.resize(static_cast<size_t>(stce_9951));
    stce_9941 = stce_9951;
    stce_9942 = static_cast<index_t>(stce_9901.capacity());
  }
  void stce_9954(index_t stce_9811) { stce_9953(stce_9811); }
  stce_9760 at(index_t stce_9811) const { return stce_9947(stce_9811) ? stce_9901[stce_9811] : 0; }
  stce_9760& at(const index_t stce_9811) {
    stce_9953(stce_9811 + 1);
    return stce_9901[stce_9811];
  }
  void stce_9952(index_t stce_9834, index_t stce_9835) {
    if (stce_9834 < stce_9835) {
      std::swap(stce_9834, stce_9835);
    }
    if (!stce_9947(stce_9835)) {
      return;
    }
    stce_9953(stce_9943);
    for (index_t stce_9853 = std::min(stce_9834, stce_9943 - 1); stce_9853 > stce_9835; --stce_9853) {
      stce_9901[stce_9853] = 0;
    }
  }
  void stce_9955() { stce_9953(stce_9943); }
  auto begin() -> decltype(stce_9901.begin()) { return stce_9901.begin(); }
  auto end() -> decltype(stce_9901.end()) { return stce_9901.end(); }
};
} // namespace internal
} // namespace dco

namespace dco {
template <class stce_9928, class stce_9758, int stce_9956 = -1>
struct adjoint_vector : dco::adjoint_vector_abstract<typename stce_9928::tape_t::stce_9760>,
                        public internal::stce_9929<stce_9928> {
  static const size_t vecsize = stce_9956 < 0 ? static_cast<size_t>(-stce_9956) : static_cast<size_t>(stce_9956);
  typedef internal::stce_9929<stce_9928> stce_9939;

public:
  typedef dco::helper::valvec<stce_9758, vecsize> value_t;
  typedef stce_9758 adjoint_real_t;
  typedef stce_9758 stce_9940;
  typedef typename stce_9928::stce_9760 stce_9760;

private:
  std::vector<value_t> stce_9901;
  index_t stce_9957;

public:
  int stce_9958;
  void init() {}
  adjoint_vector(stce_9928* tape) : stce_9939(*tape), stce_9957(0), stce_9958(0) {}
  virtual ~adjoint_vector() {}
  template <class stce_9793> value_t& derivative(const stce_9793& stce_9959) {
    stce_9960();
    const index_t stce_9811 = stce_9959._tape_index();
    return stce_9901[stce_9811];
  }
  void interpret_adjoint() {
    typename stce_9928::iterator stce_9835 = stce_9939::stce_9931().start();
    internal::interpretation_settings stce_9961;
    stce_9962(stce_9939::stce_9931().current(), stce_9835, stce_9961);
  }
  void interpret_adjoint_to(const typename stce_9928::iterator& stce_9835) {
    internal::interpretation_settings stce_9961;
    if (stce_9835 > stce_9939::stce_9931().current())
      throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.");
    else
      stce_9962(stce_9939::stce_9931().current(), stce_9835, stce_9961);
  }
  void interpret_adjoint_from(const typename stce_9928::iterator& stce_9834) {
    typename stce_9928::iterator stce_9835 = stce_9939::stce_9931().start();
    assert(!(stce_9834 < stce_9835));
    typename internal::interpretation_settings stce_9961;
    stce_9962(stce_9834, stce_9835, stce_9961);
  }
  void interpret_adjoint_from_to(const typename stce_9928::iterator& stce_9834,
                                 const typename stce_9928::iterator& stce_9835) {
    typename internal::interpretation_settings stce_9961;
    if (stce_9835 > stce_9834)
      throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.");
    else
      stce_9962(stce_9834, stce_9835, stce_9961);
  }
  void interpret_adjoint_and_zero_adjoints_to(const typename stce_9928::iterator& stce_9835) {
    typename stce_9928::iterator stce_9834(stce_9939::stce_9931().current());
    typename internal::interpretation_settings stce_9961;
    stce_9961.reset = false;
    stce_9961.stce_9921 = true;
    stce_9962(stce_9834, stce_9835, stce_9961);
  }
  void interpret_adjoint_and_zero_adjoints_from_to(const typename stce_9928::iterator& stce_9834,
                                                   const typename stce_9928::iterator& stce_9835) {
    typename internal::interpretation_settings stce_9961;
    stce_9961.reset = false;
    stce_9961.stce_9921 = true;
    stce_9962(stce_9834, stce_9835, stce_9961);
  }
  void zero_adjoints() {
    typename stce_9928::iterator stce_9835 = stce_9939::stce_9931().start();
    stce_9963(stce_9939::stce_9931().current(), stce_9835);
  }
  void zero_adjoints_to(const typename stce_9928::iterator& stce_9835) {
    stce_9963(stce_9939::stce_9931().current(), stce_9835);
  }
  void zero_adjoints_from(const typename stce_9928::iterator& stce_9834) {
    typename stce_9928::iterator stce_9835 = stce_9939::stce_9931().start();
    stce_9963(stce_9834, stce_9835);
  }
  void zero_adjoints_from_to(const typename stce_9928::iterator& stce_9834,
                             const typename stce_9928::iterator& stce_9835) {
    stce_9963(stce_9834, stce_9835);
  }
  value_t& operator[](index_t stce_9811) { return stce_9901[stce_9811]; }
  value_t at(index_t stce_9811) const { return (stce_9811 < stce_9957) ? stce_9901[stce_9811] : 0; }
  value_t& at(index_t stce_9811) {
    stce_9954(stce_9811);
    return stce_9901[stce_9811];
  }
  void stce_9954(index_t stce_9811) { stce_9960(stce_9811 + 1); }
  void stce_9950(typename stce_9928::iterator& stce_9826) {
    (*this)[stce_9826->arg()] += stce_9826->pval() * (*this)[stce_9826.index()];
  }
  value_t& stce_9964(const index_t stce_9811) { return stce_9901[stce_9811]; }
  stce_9758& stce_9964(const index_t stce_9811, int stce_9965) { return stce_9901[stce_9811][stce_9965]; }
  template <class stce_9966>
  void _increment_adjoint(const index_t& stce_9811, const stce_9966& stce_9967, const value_t& stce_9927) {
    stce_9901[stce_9811] += (stce_9967 * stce_9927);
  }
  virtual typename stce_9928::stce_9760 _read_adjoint(const index_t stce_9811) {
    return static_cast<typename stce_9928::stce_9760>(stce_9964(stce_9811)[stce_9958]);
  }
  virtual void _increment_adjoint(const index_t stce_9811, const typename stce_9928::stce_9760& stce_9927) {
    stce_9901[stce_9811][stce_9958] += static_cast<adjoint_real_t>(stce_9927);
  }
  void stce_9963(const typename stce_9928::iterator& stce_9834, const typename stce_9928::iterator& stce_9835) {
    stce_9952(stce_9834.index(), stce_9835.index());
  }
  void stce_9952(index_t stce_9834, index_t stce_9835) {
    if (stce_9834 < stce_9835) {
      std::swap(stce_9834, stce_9835);
    }
    if (stce_9901.size() == 0) {
      return;
    }
    for (index_t stce_9853 = stce_9835 + 1; stce_9853 <= stce_9834; stce_9853++) {
      stce_9901[stce_9853] = 0;
    }
  }
  void stce_9962(const typename stce_9928::iterator& stce_9834, const typename stce_9928::iterator& stce_9835,
                 typename internal::interpretation_settings stce_9961) {
    stce_9960();
    stce_9939::stce_9931().stce_9968(*this, *this, stce_9834, stce_9835, stce_9961, [](dco::index_t, value_t) {});
  }
  void stce_9960(index_t stce_9969 = -1) {
    index_t stce_9970;
    if (stce_9969 != -1)
      stce_9970 = stce_9969;
    else
      stce_9970 = stce_9939::stce_9931().current().index() + 1;
    if (static_cast<size_t>(stce_9970) > stce_9901.size()) {
      stce_9957 = stce_9970;
      stce_9901.resize(static_cast<size_t>(stce_9957));
    }
  }
  auto begin() -> decltype(stce_9901.begin()) { return stce_9901.begin(); }
  auto end() -> decltype(stce_9901.end()) { return stce_9901.end(); }
};
} // namespace dco
namespace dco {
template <typename stce_9778>
inline typename internal::stce_9780<stce_9778>::stce_9803 derivative(const stce_9778& stce_9808) {
  return internal::stce_9780<stce_9778>::value(stce_9808);
}
template <typename stce_9778, typename stce_9779>
inline auto derivative(const stce_9778& stce_9808, stce_9779& adjoints)
    -> decltype(internal::stce_9780<stce_9778, stce_9779>::value(stce_9808, &adjoints)) {
  return internal::stce_9780<stce_9778, stce_9779>::value(stce_9808, &adjoints);
}
namespace internal {
template <typename stce_9778, typename stce_9779, typename enable_if> struct stce_9780 {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef type stce_9803;
  static inline stce_9803 value(const type&) { return type(); }
  static inline stce_9803 value(const type&, stce_9779*) { return type(); }
};
template <typename stce_9778>
struct stce_9780<
    stce_9778, void,
    typename dco::enable_if<dco::mode<stce_9778>::is_dco_type &&
                            !(dco::mode<stce_9778>::is_adjoint_type && dco::mode<stce_9778>::is_tangent_type) &&
                            !is_gbcp_type<stce_9778>::value>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::derivative_t& stce_9803;
  static inline stce_9803 value(type const& value) { return value.stce_9971(); }
};
template <typename stce_9778>
struct stce_9780<
    stce_9778, void,
    typename dco::enable_if<(dco::mode<stce_9778>::is_adjoint_type && dco::mode<stce_9778>::is_tangent_type) &&
                            !is_gbcp_type<stce_9778>::value>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::derivative_t& stce_9803;
  template <typename stce_9881 = stce_9778> static inline stce_9803 value(type const&) {
    static_assert(!helper::stce_9845<stce_9881>::stce_9846,
                  "Please use dco::tangent or dco::adjoint for this data type. dco::derivative is ambiguous.");
    static typename std::remove_reference<stce_9803>::type stce_9972;
    return stce_9972;
  }
};
template <typename stce_9778>
struct stce_9780<stce_9778, void,
                 typename dco::enable_if<(is_gbcp_type<stce_9778>::value && dco::mode<stce_9778>::order > 0)>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::value_t& stce_9803;
  static inline stce_9803 value(const type& value) { return dco::derivative(value._value()); }
};
template <typename stce_9778>
struct stce_9780<stce_9778, void,
                 typename dco::enable_if<(is_gbcp_type<stce_9778>::value && dco::mode<stce_9778>::order == 0)>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::value_t stce_9803;
  static inline stce_9803 value(const type&) { return stce_9803(); }
};
template <typename stce_9778, typename stce_9973, typename stce_9974, int stce_9975>
struct stce_9780<stce_9778, adjoint_vector<stce_9973, stce_9974, stce_9975>,
                 typename dco::enable_if<(stce_9975 == -1)>::type> {
  typedef adjoint_vector<stce_9973, stce_9974, stce_9975> stce_9920;
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef stce_9974& stce_9900;
  static inline stce_9900 value(const type& value, stce_9920* adjoints) { return adjoints->derivative(value)[0]; }
};
template <typename stce_9778, typename stce_9973, typename stce_9974, int stce_9975>
struct stce_9780<stce_9778, adjoint_vector<stce_9973, stce_9974, stce_9975>,
                 typename dco::enable_if<(stce_9975 > 0)>::type> {
  typedef adjoint_vector<stce_9973, stce_9974, stce_9975> stce_9920;
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename stce_9920::value_t& stce_9900;
  static inline stce_9900 value(const type& value, stce_9920* adjoints) { return adjoints->derivative(value); }
};
template <typename stce_9778, typename stce_9758, typename stce_9928>
struct stce_9780<stce_9778, adjoint_vector_lazy<stce_9758, stce_9928>> {
  typedef adjoint_vector_lazy<stce_9758, stce_9928> stce_9920;
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef stce_9758& stce_9900;
  static inline stce_9900 value(const type& value, stce_9920* adjoints) {
    return (*adjoints)[value.data()._tape_index()];
  }
};
template <typename stce_9778, typename stce_9758> struct stce_9780<stce_9778, adjoint_vector_abstract<stce_9758>> {
  typedef adjoint_vector_abstract<stce_9758> stce_9920;
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef stce_9758& stce_9900;
  static inline auto value(const type& value, stce_9920* adjoints)
      -> decltype(adjoints->stce_9926(value.data()._tape_index())) {
    return adjoints->stce_9926(value.data()._tape_index());
  }
};
template <typename stce_9778>
struct stce_9780<std::vector<stce_9778>, void, typename dco::enable_if<!dco::mode<stce_9778>::is_dco_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9903 stce_9803;
  static inline stce_9803 value(const stce_9903& value) { return stce_9803(value.size(), 0.0); }
};
template <typename stce_9778>
struct stce_9780<std::vector<stce_9778>, void, typename dco::enable_if<dco::mode<stce_9778>::is_dco_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9796, stce_9778, stce_9903> stce_9803;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
};
template <typename stce_9778, typename stce_9973, typename stce_9974, int stce_9975>
struct stce_9780<std::vector<stce_9778>, adjoint_vector<stce_9973, stce_9974, stce_9975>,
                 typename dco::enable_if<(stce_9975 == -1)>::type> {
  typedef adjoint_vector<stce_9973, stce_9974, stce_9975> stce_9920;
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9796, stce_9778, stce_9903> stce_9803;
  typedef stce_9902<stce_9797, stce_9778, stce_9903, stce_9920> stce_9900;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
  static inline stce_9900 value(const stce_9903& stce_9861, stce_9920* adjoints) {
    return stce_9900(stce_9861, adjoints);
  }
};
template <typename stce_9778, typename stce_9758>
struct stce_9780<std::vector<stce_9778>, adjoint_vector_abstract<stce_9758>> {
  typedef adjoint_vector_abstract<stce_9758> stce_9920;
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9796, stce_9778, stce_9903> stce_9803;
  typedef stce_9902<stce_9797, stce_9778, stce_9903, stce_9920> stce_9900;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
  static inline stce_9900 value(const stce_9903& stce_9861, stce_9920* adjoints) {
    return stce_9900(stce_9861, adjoints);
  }
};
template <stce_9794 stce_9896, class stce_9778, typename stce_9919, typename stce_9920>
struct stce_9780<stce_9902<stce_9896, stce_9778, stce_9919, stce_9920>, void> {
  typedef stce_9902<stce_9896, stce_9778, stce_9919, stce_9920> stce_9903;
  typedef stce_9902<stce_9796, typename stce_9903::value_t, stce_9903> stce_9803;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
};
} // namespace internal
} // namespace dco

namespace dco {
template <typename stce_9778>
inline typename internal::stce_9782<stce_9778>::stce_9803 adjoint(const stce_9778& stce_9808) {
  return internal::stce_9782<stce_9778>::value(stce_9808);
}
template <typename stce_9778, typename stce_9779>
inline auto adjoint(const stce_9778& stce_9808, stce_9779& adjoints)
    -> decltype(internal::stce_9782<stce_9778, stce_9779>::value(stce_9808, &adjoints)) {
  return internal::stce_9782<stce_9778, stce_9779>::value(stce_9808, &adjoints);
}
namespace internal {
template <typename stce_9778, typename stce_9779, typename enable_if> struct stce_9782 {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef type stce_9803;
  static inline stce_9803 value(const type&) { return type(); }
  static inline stce_9803 value(const type&, stce_9779*) { return type(); }
};
template <typename stce_9778>
struct stce_9782<
    stce_9778, void,
    typename dco::enable_if<dco::mode<stce_9778>::is_adjoint_type && !is_gbcp_type<stce_9778>::value>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::derivative_t& stce_9803;
  static inline stce_9803 value(type const& value) { return value._adjoint(); }
};
template <typename stce_9778>
struct stce_9782<
    stce_9778, void,
    typename dco::enable_if<!dco::mode<stce_9778>::is_adjoint_type && !is_gbcp_type<stce_9778>::value>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::derivative_t stce_9803;
  template <typename stce_9881 = stce_9778> static inline stce_9803 value(type const&) {
    static_assert(!helper::stce_9845<stce_9881>::stce_9846, "dco::adjoint called on a non-adjoint data type.");
    static stce_9803 stce_9972;
    return stce_9972;
  }
};
template <typename stce_9778>
struct stce_9782<stce_9778, void,
                 typename dco::enable_if<(is_gbcp_type<stce_9778>::value && dco::mode<stce_9778>::order > 0)>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::value_t& stce_9803;
  static inline stce_9803 value(const type& value) { return dco::adjoint(value._value()); }
};
template <typename stce_9778>
struct stce_9782<stce_9778, void,
                 typename dco::enable_if<(is_gbcp_type<stce_9778>::value && dco::mode<stce_9778>::order == 0)>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::value_t stce_9803;
  static inline stce_9803 value(const type&) { return stce_9803(); }
};
template <typename stce_9778, typename stce_9973, typename stce_9974, int stce_9975>
struct stce_9782<stce_9778, adjoint_vector<stce_9973, stce_9974, stce_9975>,
                 typename dco::enable_if<(stce_9975 == -1)>::type> {
  typedef adjoint_vector<stce_9973, stce_9974, stce_9975> stce_9920;
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef stce_9974& stce_9900;
  static inline stce_9900 value(const type& value, stce_9920* adjoints) { return adjoints->adjoint(value)[0]; }
};
template <typename stce_9778, typename stce_9973, typename stce_9974, int stce_9975>
struct stce_9782<stce_9778, adjoint_vector<stce_9973, stce_9974, stce_9975>,
                 typename dco::enable_if<(stce_9975 > 0)>::type> {
  typedef adjoint_vector<stce_9973, stce_9974, stce_9975> stce_9920;
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename stce_9920::value_t& stce_9900;
  static inline stce_9900 value(const type& value, stce_9920* adjoints) { return adjoints->adjoint(value); }
};
template <typename stce_9778, typename DERIVATIVE_T, typename stce_9928>
struct stce_9782<stce_9778, adjoint_vector_lazy<DERIVATIVE_T, stce_9928>> {
  typedef adjoint_vector_lazy<DERIVATIVE_T, stce_9928> stce_9920;
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef DERIVATIVE_T& stce_9900;
  static inline stce_9900 value(const type& value, stce_9920* adjoints) {
    return (*adjoints)[value.data()._tape_index()];
  }
};
template <typename stce_9778, typename DERIVATIVE_T>
struct stce_9782<stce_9778, adjoint_vector_abstract<DERIVATIVE_T>> {
  typedef adjoint_vector_abstract<DERIVATIVE_T> stce_9920;
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef DERIVATIVE_T& stce_9900;
  static inline auto value(const type& value, stce_9920* adjoints)
      -> decltype(adjoints->stce_9926(value.data()._tape_index())) {
    return adjoints->stce_9926(value.data()._tape_index());
  }
};
template <typename stce_9778>
struct stce_9782<std::vector<stce_9778>, void, typename dco::enable_if<!dco::mode<stce_9778>::is_adjoint_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9903 stce_9803;
  static inline stce_9803 value(const stce_9903& value) { return stce_9803(value.size(), 0.0); }
};
template <typename stce_9778>
struct stce_9782<std::vector<stce_9778>, void, typename dco::enable_if<dco::mode<stce_9778>::is_adjoint_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9799, stce_9778, stce_9903> stce_9803;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
};
template <typename stce_9778, typename stce_9973, typename stce_9974, int stce_9975>
struct stce_9782<std::vector<stce_9778>, adjoint_vector<stce_9973, stce_9974, stce_9975>,
                 typename dco::enable_if<(stce_9975 == -1)>::type> {
  typedef adjoint_vector<stce_9973, stce_9974, stce_9975> stce_9920;
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9799, stce_9778, stce_9903> stce_9803;
  typedef stce_9902<stce_9800, stce_9778, stce_9903, stce_9920> stce_9900;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
  static inline stce_9900 value(const stce_9903& stce_9861, stce_9920* adjoints) {
    return stce_9900(stce_9861, adjoints);
  }
};
template <typename stce_9778, typename DERIVATIVE_T>
struct stce_9782<std::vector<stce_9778>, adjoint_vector_abstract<DERIVATIVE_T>> {
  typedef adjoint_vector_abstract<DERIVATIVE_T> stce_9920;
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9799, stce_9778, stce_9903> stce_9803;
  typedef stce_9902<stce_9800, stce_9778, stce_9903, stce_9920> stce_9900;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
  static inline stce_9900 value(const stce_9903& stce_9861, stce_9920* adjoints) {
    return stce_9900(stce_9861, adjoints);
  }
};
template <stce_9794 stce_9976, class stce_9778, typename stce_9919, typename stce_9920>
struct stce_9782<stce_9902<stce_9976, stce_9778, stce_9919, stce_9920>, void> {
  typedef stce_9902<stce_9976, stce_9778, stce_9919, stce_9920> stce_9903;
  typedef stce_9902<stce_9799, typename stce_9903::value_t, stce_9903> stce_9803;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
};
} // namespace internal
} // namespace dco

namespace dco {
template <typename stce_9778>
inline typename internal::stce_9781<stce_9778>::stce_9803 tangent(const stce_9778& stce_9808) {
  return internal::stce_9781<stce_9778>::value(stce_9808);
}
namespace internal {
template <typename stce_9778, typename stce_9779, typename enable_if> struct stce_9781 {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef type stce_9803;
  static inline stce_9803 value(const type&) { return type(); }
  static inline stce_9803 value(const type&, stce_9779*) { return type(); }
};
template <typename stce_9778>
struct stce_9781<
    stce_9778, void,
    typename dco::enable_if<dco::mode<stce_9778>::is_tangent_type && !is_gbcp_type<stce_9778>::value>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::derivative_t& stce_9803;
  static inline stce_9803 value(type const& value) { return value.stce_9977(); }
};
template <typename stce_9778>
struct stce_9781<
    stce_9778, void,
    typename dco::enable_if<!dco::mode<stce_9778>::is_tangent_type && !is_gbcp_type<stce_9778>::value>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::derivative_t stce_9803;
  template <typename stce_9881 = stce_9778> static inline stce_9803 value(type const&) {
    static_assert(!helper::stce_9845<stce_9881>::stce_9846, "dco::tangent called on a non-tangent data type.");
    static stce_9803 stce_9972;
    return stce_9972;
  }
};
template <typename stce_9778>
struct stce_9781<stce_9778, void,
                 typename dco::enable_if<(is_gbcp_type<stce_9778>::value && dco::mode<stce_9778>::order > 0)>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::value_t& stce_9803;
  static inline stce_9803 value(const type& value) { return dco::tangent(value._value()); }
};
template <typename stce_9778>
struct stce_9781<stce_9778, void,
                 typename dco::enable_if<(is_gbcp_type<stce_9778>::value && dco::mode<stce_9778>::order == 0)>::type> {
  typedef typename dco::remove_const<stce_9778>::type type;
  typedef typename dco::mode<type>::value_t stce_9803;
  static inline stce_9803 value(const type&) { return stce_9803(); }
};
template <typename stce_9778>
struct stce_9781<std::vector<stce_9778>, void, typename dco::enable_if<!dco::mode<stce_9778>::is_tangent_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9903 stce_9803;
  static inline stce_9803 value(const stce_9903& value) { return stce_9803(value.size(), 0.0); }
};
template <typename stce_9778>
struct stce_9781<std::vector<stce_9778>, void, typename dco::enable_if<dco::mode<stce_9778>::is_dco_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9798, stce_9778, stce_9903> stce_9803;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
};
template <stce_9794 stce_9978, class stce_9778, typename stce_9919, typename stce_9920>
struct stce_9781<stce_9902<stce_9978, stce_9778, stce_9919, stce_9920>, void> {
  typedef stce_9902<stce_9978, stce_9778, stce_9919, stce_9920> stce_9903;
  typedef stce_9902<stce_9798, typename stce_9903::value_t, stce_9903> stce_9803;
  static inline stce_9803 value(const stce_9903& stce_9861) { return stce_9803(stce_9861); }
};
} // namespace internal
} // namespace dco

namespace dco {
template <typename stce_9778> typename internal::stce_9784<stce_9778>::stce_9803 tape(const stce_9778& stce_9808) {
  return internal::stce_9784<stce_9778>::value(stce_9808);
}
template <typename stce_9778>
typename internal::stce_9785<stce_9778>::stce_9803 tape_index(const stce_9778& stce_9808) {
  return internal::stce_9785<stce_9778>::value(stce_9808);
}
namespace internal {
template <typename stce_9778, typename enable_if> struct stce_9784 {
  typedef typename dco::mode<stce_9778>::tape_t* stce_9803;
  static stce_9803 value(const stce_9778&) { return nullptr; }
};
template <typename stce_9778> struct stce_9784<stce_9778, decltype(std::declval<stce_9778>().tape(), void())> {
  typedef typename dco::mode<stce_9778>::tape_t* stce_9803;
  static stce_9803 value(const stce_9778& value) { return value.tape(); }
};
template <typename stce_9778>
struct stce_9784<std::vector<stce_9778>, decltype(std::declval<stce_9778>().tape(), void())> {
  typedef typename dco::mode<stce_9778>::tape_t* stce_9803;
  static stce_9803 value(const std::vector<stce_9778>& value) {
    stce_9803 tape = 0;
    for (size_t stce_9853 = 0; stce_9853 < value.size(); stce_9853++) {
      if (stce_9784<stce_9778>::value(value[stce_9853]) != 0) {
        tape = stce_9784<stce_9778>::value(value[stce_9853]);
        break;
      }
    }
    return tape;
  }
};
template <typename stce_9778, typename enable_if> struct stce_9785 {
  typedef index_t stce_9803;
  static index_t value(const stce_9778&) { return 0; }
};
template <typename stce_9778> struct stce_9785<stce_9778, decltype(std::declval<stce_9778>()._tape_index(), void())> {
  typedef index_t& stce_9803;
  static stce_9803 value(const stce_9778& value) { return value._tape_index(); }
};
template <typename stce_9778>
struct stce_9785<std::vector<stce_9778>, typename dco::enable_if<dco::mode<stce_9778>::is_dco_type>::type> {
  typedef std::vector<stce_9778> stce_9903;
  typedef stce_9902<stce_9802, stce_9778, stce_9903> stce_9803;
  typedef const stce_9902<stce_9802, stce_9778, stce_9903> stce_9899;
  static inline stce_9803 value(stce_9903& stce_9861) { return stce_9803(stce_9861); }
  static inline stce_9899 value(const stce_9903& stce_9861) { return stce_9899(stce_9861); }
};
} // namespace internal
} // namespace dco

namespace dco {
namespace folding {
template <typename stce_9778, typename enable_if> struct is_zero_trait {
  static bool get(const stce_9778& stce_9808) { return stce_9808 == 0; }
};
template <typename stce_9778> bool is_zero(const stce_9778& stce_9808) {
  return is_zero_trait<stce_9778>::get(stce_9808);
}
template <typename stce_9778>
struct is_zero_trait<stce_9778, typename dco::enable_if<dco::mode<stce_9778>::is_tangent_type>::type> {
  static bool get(const stce_9778& stce_9808) { return is_zero(value(stce_9808)) && is_zero(derivative(stce_9808)); }
};
template <typename stce_9778>
struct is_zero_trait<stce_9778, typename dco::enable_if<dco::mode<stce_9778>::is_adjoint_type>::type> {
  static bool get(const stce_9778& stce_9808) { return is_zero(value(stce_9808)) && !tape_index(stce_9808); }
};
} // namespace folding
} // namespace dco

namespace dco {
template <typename stce_9818, typename... stce_9979>
int fprintf(stce_9818& stream, char const* stce_9980, stce_9979&&... stce_9981) {
  return ::fprintf(stream, stce_9980, dco::passive_value(stce_9981)...);
}
template <typename... stce_9979> int printf(char const* const stce_9980, stce_9979&&... stce_9981) {
  return ::printf(stce_9980, dco::passive_value(stce_9981)...);
}
template <typename... stce_9979> int sprintf(char* stream, char const* stce_9980, stce_9979&&... stce_9981) {
  return ::sprintf(stream, stce_9980, dco::passive_value(stce_9981)...);
}
namespace stce_9982 {
inline void init() {}
template <typename stce_9778, typename... stce_9979>
typename dco::enable_if<!dco::mode<typename std::remove_pointer<stce_9778>::type>::is_dco_type>::type
init(stce_9778&, stce_9979&... stce_9981);
template <typename stce_9778, typename... stce_9979>
typename dco::enable_if<dco::mode<typename std::remove_pointer<stce_9778>::type>::is_dco_type>::type
init(stce_9778& stce_9808, stce_9979&... stce_9981) {
  *stce_9808 = 0;
  init(stce_9981...);
}
template <typename stce_9778, typename... stce_9979>
typename dco::enable_if<!dco::mode<typename std::remove_pointer<stce_9778>::type>::is_dco_type>::type
init(stce_9778&, stce_9979&... stce_9981) {
  init(stce_9981...);
}
} // namespace stce_9982
template <typename stce_9818, typename... stce_9979>
int sscanf(stce_9818& stream, char const* stce_9980, stce_9979&&... stce_9981) {
  stce_9982::init(stce_9981...);
  return ::sscanf(stream, stce_9980, &dco::passive_value(*stce_9981)...);
}
template <typename stce_9818, typename... stce_9979>
int fscanf(stce_9818& stream, char const* stce_9980, stce_9979&&... stce_9981) {
  stce_9982::init(stce_9981...);
  return ::fscanf(stream, stce_9980, &dco::passive_value(*stce_9981)...);
}
} // namespace dco

namespace dco {
namespace internal {
template <memory_model::TYPE memory_model, typename stce_9983, memory_model::TYPE stce_9984 = memory_model::stce_9762>
class stce_9985 {};
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
template <class stce_9986>
struct jacobian_preaccumulator_t : adjoint_vector_abstract<typename dco::mode<stce_9986>::stce_9987> {
  typedef typename dco::mode<stce_9986>::stce_9987 stce_9760;
  typedef stce_9760 stce_9940;
  typedef typename dco::mode<stce_9986>::tape_t tape_t;
  typedef typename tape_t::iterator_t stce_9988;
  typedef typename tape_t::edge_inserter stce_9989;
  tape_t* const stce_9990;
  stce_9988 stce_9991;
  index_t stce_9992;
  typedef adjoint_vector_lazy<stce_9760, tape_t> vector_t;
  vector_t stce_9901;
  bool stce_9993;
  bool stce_9994;
  std::map<index_t, stce_9760> stce_9995;
  void init() {}
  typedef stce_9985<memory_model::BLOB_TAPE, tape_t> stce_9903;
  typedef typename stce_9903::edge_inserter stce_9996;
  typedef typename stce_9903::iterator stce_9997;
  stce_9903* stce_9930;
  stce_9996* stce_9998;
  typedef typename stce_9986::data_t stce_9999;
  std::vector<stce_9999*> stce_10000;
  index_t stce_9958;
  bool& merge_edges() { return stce_9994; }
  jacobian_preaccumulator_t(tape_t* const tape)
      : stce_9990(tape), stce_9901(0, *tape, tape->stce_9946()), stce_9994(false), stce_9930(0), stce_9998(0),
        stce_9958(0) {
    if (stce_9990) {
      stce_9991 = stce_9990->get_position();
      stce_9992 = stce_9991.index();
      stce_9993 = true;
    } else {
      stce_9993 = false;
    }
  }
  ~jacobian_preaccumulator_t() {
    if (stce_9993)
      this->finish();
    if (stce_9930)
      delete stce_9930;
  }
  void start() {
    if (stce_9990) {
      stce_9991 = stce_9990->get_position();
      stce_9992 = stce_9991.index();
      stce_9993 = true;
    } else {
      stce_9993 = false;
    }
  }
  void stce_10001(stce_9986& stce_9808) {
    if (!dco::tape_index(stce_9808))
      return;
    if (dco::tape_index(stce_9808) && dco::tape_index(stce_9808) <= stce_9992) {
      throw dco::exception::create<std::runtime_error>("jacobian_preaccumulator_t: registering output, which is indeed "
                                                       "an input (was alive already before starting point).");
    }
    stce_10000.push_back(&static_cast<stce_9999&>(stce_9808));
  }
  void register_output(stce_9986& stce_9808) {
    if (stce_9990) {
      stce_10001(stce_9808);
    }
  }
  void register_output(std::vector<stce_9986>& stce_9808) {
    if (stce_9990) {
      stce_10000.reserve(stce_10000.size() + stce_9808.size());
      for (size_t stce_9853 = 0; stce_9853 < stce_9808.size(); ++stce_9853) {
        stce_10001(stce_9808[stce_9853]);
      }
    }
  }
  void finish() {
    if (!stce_9993)
      return;
    stce_9993 = false;
    if (!stce_9990)
      return;
    if (!stce_10000.size()) {
      stce_9990->reset_to(stce_9991);
      return;
    }
    const stce_9988 stce_10002 = stce_9990->get_position();
    const index_t stce_10003 = stce_10002.index() - stce_9991.index();
    stce_9901.resize(stce_10003 + 1);
    const index_t stce_10004 = stce_9990->size(stce_10002, stce_9991);
    const index_t stce_10005 = stce_10004 * (1 + static_cast<index_t>(stce_10000.size()));
    if (stce_9930)
      delete stce_9930;
    tape_options stce_10006;
    stce_10006.blob_size_in_byte() = stce_10005 * stce_9903::entry::size_of();
    stce_9930 = new stce_9903(stce_10006, *stce_9990);
    stce_9930->current_ref().index() = stce_10002.index();
    stce_9901.stce_9955();
    for (typename std::vector<stce_9999*>::iterator stce_10007 = stce_10000.begin(); stce_10007 != stce_10000.end();
         ++stce_10007) {
      stce_9999& stce_9826 = **stce_10007;
      if (stce_9826._tape_index() == 0)
        continue;
      stce_9901.stce_9952(stce_10003 - 1, 0);
      stce_9964(stce_9826._tape_index()) = 1.0;
      stce_9998 = new stce_9996(stce_9930->current_ref());
      if (stce_9994) {
        stce_9995.clear();
      }
      stce_9990->stce_9968(*this, *this, stce_10002, stce_9991, interpretation_settings(false, true),
                           [](index_t, typename tape_t::stce_9760) {});
      if (stce_9994) {
        for (typename std::map<index_t, stce_9760>::const_iterator stce_10008 = stce_9995.cbegin();
             stce_10008 != stce_9995.cend(); ++stce_10008) {
          stce_9998->insert(stce_10008->first, stce_10008->second);
        }
      }
      delete stce_9998;
    }
    stce_9990->reset_to(stce_9991);
    stce_9997 stce_10009 = stce_9930->current();
    for (typename std::vector<stce_9999*>::reverse_iterator stce_10007 = stce_10000.rbegin();
         stce_10007 != stce_10000.rend(); ++stce_10007) {
      stce_9989 stce_10010(stce_9990->current_ref());
      for (;; --stce_10009) {
        stce_10010.insert(stce_10009->arg(), stce_10009->pval());
        if (stce_10009->stce_10011())
          break;
      }
      --stce_10009;
      (*stce_10007)->_tape_index() = stce_10010.index();
    }
    stce_10000.clear();
  }
  stce_9760& stce_9964(const index_t stce_9811) { return stce_9901[stce_9811 - stce_9992]; }
  template <class stce_9966>
  void _increment_adjoint(const index_t& stce_9811, const stce_9966& stce_9967, const stce_9760& stce_9927) {
    _increment_adjoint(stce_9811, stce_9967 * stce_9927);
  }
  void stce_9952(index_t stce_9834, index_t stce_9835) { stce_9901.stce_9952(stce_9834, stce_9835); }
  void stce_9954(index_t stce_9811) { stce_9901.stce_9954(stce_9811 - stce_9992); }
  stce_9760& operator[](const index_t stce_9811) { return stce_9901[stce_9811 - stce_9992]; }
  template <typename iterator_t> void stce_9950(iterator_t& stce_9826) {
    _increment_adjoint(stce_9826->arg(), stce_9826->pval() * (*this)[stce_9826.index()]);
  }
  virtual stce_9760 _read_adjoint(const index_t stce_9811) { return stce_9901[stce_9811 - stce_9992]; }
  virtual void _increment_adjoint(const index_t stce_9811, const stce_9760& stce_9927) {
    if (stce_9927 == 0)
      return;
    if (stce_9811 <= stce_9992) {
      if (stce_9994 == false) {
        stce_9998->insert(stce_9811, stce_9927);
      } else {
        stce_9995[stce_9811] += stce_9927;
      }
    } else {
      stce_9964(stce_9811) += stce_9927;
    }
  }
};
template <> struct jacobian_preaccumulator_t<void> {
  jacobian_preaccumulator_t(void*) {}
  void start() {}
  template <typename stce_9778> void register_output(const stce_9778&) {}
  void finish() {}
};
} // namespace internal
} // namespace dco

namespace dco {
namespace helper {
template <typename, typename stce_10012> struct stce_10013 {
  stce_10013(stce_10012*) {}
  template <typename stce_9778> void register_input(const stce_9778&) {}
  template <typename stce_9778> void register_output(const stce_9778&) {}
};
} // namespace helper
} // namespace dco

namespace dco {
namespace helper {
template <typename stce_10014> class stce_10015 {
  template <memory_model::TYPE, typename, memory_model::TYPE> friend class internal::tape;
  typedef typename stce_10014::stce_9940 stce_9760;

protected:
  stce_10014* stce_10016;

public:
  virtual ~stce_10015() {}
  dco::adjoint_vector_abstract<stce_9760>* _adjoint_vector;

public:
  void set_tape(stce_10014* stce_10017) {
    if (stce_10016 != 0) {
      return;
    } else {
      stce_10016 = stce_10017;
    }
  }
  void stce_10018() {}
  inline stce_10014* get_tape() { return stce_10016; }
  stce_10015() : stce_10016(0) {}
  virtual void stce_10019(stce_9865& stce_9866, index_t stce_9874) {
    (void)stce_9866;
    (void)stce_9874;
  }
  virtual mem_long_t size_in_byte() { return sizeof(stce_10014); }
};
} // namespace helper
} // namespace dco

namespace dco {
namespace helper {
template <class stce_10020, class stce_10014> class stce_10021 : public stce_10015<stce_10014> {
private:
  class stce_10022 {
  public:
    virtual ~stce_10022(){};
    virtual mem_long_t size_in_byte() = 0;
    virtual void stce_10023(const std::string&, const std::string&){};
  };
  template <typename stce_10024> class stce_10025 : public stce_10022 {
  public:
    const stce_10024 _data;
    stce_10025(const stce_10024& stce_10026) : _data(stce_10026) {}
    const stce_10024& stce_10027() const { return _data; }
  };
  template <typename stce_10024> class stce_10028 : public stce_10025<stce_10024> {
  public:
    stce_10028(stce_10024 data) : stce_10025<stce_10024>(data) {}
    virtual ~stce_10028() {}
    virtual mem_long_t size_in_byte() { return size_of(stce_10025<stce_10024>::_data); }
    virtual void stce_10023(const std::string& stce_10029, const std::string& stce_10030) {
      if (false && IS_DEBUG && stce_10030 != stce_10029) {
        std::stringstream stce_10031;
        stce_10031 << "read_data error: tried to read " << stce_10029 << " instead of " << stce_10030 << "!";
        throw dco::exception::create<std::runtime_error>(stce_10031.str());
      }
    }
  };
  template <typename stce_10024> class stce_10032 : public stce_10025<stce_10024*> {
  public:
    const index_t stce_10033;
    stce_10032(const stce_10024* data, index_t stce_9832)
        : stce_10025<stce_10024*>(new stce_10024[size_t(stce_9832)]), stce_10033(stce_9832) {
      for (index_t stce_9853 = 0; stce_9853 < stce_9832; ++stce_9853)
        this->_data[stce_9853] = data[stce_9853];
    }
    stce_10032(const stce_10024* data, const index_t stce_9925, const index_t stce_9832)
        : stce_10025<stce_10024*>(new stce_10024[stce_9832]), stce_10033(stce_9832) {
      for (index_t stce_9853 = 0, stce_9811 = 0; stce_9853 < stce_9832; ++stce_9853, stce_9811 += stce_9925)
        this->_data[stce_9853] = data[stce_9811];
    }
    virtual ~stce_10032() { delete[] this->_data; }
    virtual mem_long_t size_in_byte() { return stce_10033 * static_cast<index_t>(sizeof(stce_10024)); }
    virtual void stce_10023(const std::string& stce_10029, const std::string& stce_10030) {
      (void)stce_10029;
      (void)stce_10030;
      if (false && IS_DEBUG && stce_10030 + "*" != stce_10029) {
        std::stringstream stce_10031;
        stce_10031 << "read_data error: tried to read " << stce_10029 << " instead of " << stce_10030 << "!";
        throw dco::exception::create<std::runtime_error>(stce_10031.str());
      }
    }
  };
  index_t stce_10034;
  std::vector<stce_10022*> stce_10035;
  std::vector<std::string> stce_10036;

protected:
  virtual ~stce_10021() {
    for (size_t stce_9853 = 0; stce_9853 < stce_10035.size(); stce_9853++)
      delete stce_10035[stce_9853];
    stce_10035.clear();
  }

public:
  stce_10021() : stce_10015<stce_10014>(), stce_10034(0) {}
  virtual mem_long_t size_in_byte() {
    mem_long_t stce_9818 = stce_10015<stce_10014>::size_in_byte();
    for (size_t stce_9853 = 0; stce_9853 < stce_10035.size(); stce_9853++) {
      stce_9818 += stce_10035[stce_9853]->size_in_byte();
    }
    stce_9818 += stce_10035.size() * sizeof(stce_10022*);
    stce_9818 += stce_10036.size() * sizeof(std::string);
    return stce_9818;
  }
  template <typename stce_10024> void write_data(const stce_10024& stce_10037) {
    stce_10035.push_back(new stce_10028<stce_10024>(stce_10037));
    if (IS_DEBUG)
      stce_10036.push_back(type_name<stce_10024>());
  }
  template <typename stce_10024> void write_data(const stce_10024* const stce_10037, const index_t stce_9832) {
    stce_10035.push_back(new stce_10032<stce_10024>(stce_10037, stce_9832));
    if (IS_DEBUG)
      stce_10036.push_back(type_name<stce_10024>());
  }
  template <typename stce_10024>
  void write_data(const stce_10024* const& stce_10037, const index_t stce_9925, const index_t stce_9832) {
    stce_10035.push_back(new stce_10032<stce_10024>(stce_10037, stce_9925, stce_9832));
    if (IS_DEBUG) {
      stce_10036.push_back(type_name<stce_10024>());
    }
  }
  template <typename stce_10024> const stce_10024& read_data() {
    const stce_10024& stce_10037 = static_cast<stce_10025<stce_10024>*>(stce_10035[stce_10034])->stce_10027();
    if (IS_DEBUG)
      stce_10035[stce_10034]->stce_10023(type_name<stce_10024>(), stce_10036.at(stce_10034));
    ++stce_10034;
    if (stce_10034 == static_cast<index_t>(stce_10035.size()))
      stce_10034 = 0;
    return stce_10037;
  }
};
} // namespace helper
} // namespace dco

namespace dco {
namespace helper {
template <class stce_10020, class stce_10014>
class stce_10038 : public stce_10021<stce_10020, stce_10014>,
                   public stce_10013<stce_10014, stce_10038<stce_10020, stce_10014>> {
  typedef stce_10013<stce_10014, stce_10038> stce_10039;
  bool stce_10040;

protected:
  std::vector<index_t> stce_9872;
  std::vector<index_t> stce_9873;
  size_t stce_10041;
  size_t stce_10042;

public:
  stce_10014*& tape() { return this->stce_10016; }
  virtual mem_long_t size_in_byte() {
    mem_long_t stce_9818 = stce_10021<stce_10020, stce_10014>::size_in_byte();
    stce_9818 += stce_9872.size() * sizeof(index_t);
    stce_9818 += stce_9873.size() * sizeof(index_t);
    stce_9818 += 2 * sizeof(index_t);
    return stce_9818;
  }
  size_t stce_10043() { return stce_9872.size(); }
  size_t stce_10044() { return stce_9873.size(); }
  void stce_10018() { stce_10040 = true; }
  void stce_10019(stce_9865& stce_9866, index_t stce_9874) {
    stce_9866.stce_9871(stce_9872, stce_9873, stce_9874 - static_cast<index_t>(stce_9873.size()) - 1);
  }

public:
  void stce_10045(const stce_10020& stce_9808) {
    if ((stce_9808.tape() != 0) && (this->stce_10016 != stce_9808.tape()))
      throw dco::exception::create<std::runtime_error>("impossible binding tape - wrong tape in variable!");
    if (this->stce_10040 == true) {
      throw dco::exception::create<std::runtime_error>(
          "Input registration required, but callback already inserted; please check ordering.");
    }
  }
  void stce_10046() {
    if (this->stce_10016 == NULL) {
      throw dco::exception::create<std::runtime_error>("Output registration required, but no tape available.");
    }
    if (this->stce_10040 == true) {
      throw dco::exception::create<std::runtime_error>(
          "Output registration required, but callback already inserted; please check ordering.");
    }
  }

protected:
  ~stce_10038() {
    if (IS_DEBUG && stce_10041 != 0) {
      DCO_LOG(dco::logERROR) << "not all input adjoints incremented in external adjoint object.";
    }
    if (IS_DEBUG && stce_10042 != 0) {
      DCO_LOG(dco::logERROR) << "not all output adjoints read in external adjoint object.";
    }
  }

public:
  stce_10038(const std::pair<size_t, size_t>& stce_10047)
      : stce_10021<stce_10020, stce_10014>(), stce_10039(this), stce_10040(false), stce_10041(0), stce_10042(0) {
    stce_9872.reserve(stce_10047.first);
    stce_9873.reserve(stce_10047.second);
  }
  stce_10038()
      : stce_10021<stce_10020, stce_10014>(), stce_10039(this), stce_10040(false), stce_10041(0), stce_10042(0) {}
  typename stce_10020::VALUE_TYPE register_input(const stce_10020& stce_9808) {
    stce_10045(stce_9808);
    const index_t stce_9811 = stce_9808._tape_index();
    stce_9872.push_back(stce_9811);
    stce_10039::register_input(stce_9808);
    return stce_9808._value();
  }
  void register_input(const stce_10020* const stce_9808, typename stce_10020::VALUE_TYPE* stce_10048,
                      const size_t stce_9832) {
    stce_9872.reserve(stce_9872.size() + stce_9832);
    for (size_t stce_9853 = 0; stce_9853 < stce_9832; ++stce_9853) {
      stce_10045(stce_9808[stce_9853]);
      const index_t stce_9811 = stce_9808[stce_9853]._tape_index();
      stce_9872.push_back(stce_9811);
      stce_10048[stce_9853] = stce_9808[stce_9853]._value();
      stce_10039::register_input(stce_9808[stce_9853]);
    }
  }
  void register_input(const std::vector<stce_10020>& stce_9808,
                      std::vector<typename stce_10020::VALUE_TYPE>& stce_10048) {
    assert(stce_9808.size() == stce_10048.size());
    register_input(&(stce_9808[0]), &(stce_10048[0]), stce_9808.size());
  }
  std::vector<typename stce_10020::VALUE_TYPE> register_input(const std::vector<stce_10020>& stce_9808) {
    std::vector<typename stce_10020::VALUE_TYPE> stce_10048(stce_9808.size());
    register_input(stce_9808, stce_10048);
    return stce_10048;
  }
  void register_output(stce_10020* stce_10049, const size_t stce_9832) { register_output(NULL, stce_10049, stce_9832); }
  void register_output(const typename stce_10020::VALUE_TYPE* const stce_10050, stce_10020* stce_10049,
                       const size_t stce_9832) {
    stce_10046();
    stce_9873.reserve(stce_9873.size() + stce_9832);
    for (size_t stce_9853 = 0; stce_9853 < stce_9832; ++stce_9853) {
      if (stce_10050) {
        stce_10049[stce_9853] = stce_10050[stce_9853];
      }
      this->stce_10016->register_variable(stce_10049[stce_9853]);
      stce_9873.push_back(stce_10049[stce_9853]._tape_index());
      stce_10039::register_output(stce_10049[stce_9853]);
    }
  }
  void register_output(const std::vector<typename stce_10020::VALUE_TYPE>& stce_10050,
                       std::vector<stce_10020>& stce_10049) {
    assert(stce_10050.size() == stce_10049.size());
    register_output(&(stce_10050[0]), &(stce_10049[0]), stce_10050.size());
  }
  std::vector<stce_10020> register_output(const std::vector<typename stce_10020::VALUE_TYPE>& stce_10050) {
    std::vector<stce_10020> stce_10049(stce_10050.size());
    register_output(stce_10050, stce_10049);
    return stce_10049;
  }
  void register_output(std::vector<stce_10020>& stce_10049) { register_output(&(stce_10049[0]), stce_10049.size()); }
  stce_10020 register_output(const typename stce_10020::VALUE_TYPE& stce_10051, stce_10014* tape = NULL) {
    stce_10020 stce_10052;
    if (tape != NULL) {
      if (this->stce_10016 != NULL && this->stce_10016 != tape) {
        throw dco::exception::create<std::runtime_error>(
            "impossible binding output in external function (register_output) - tape of inputs and outputs differ!");
      }
      this->stce_10016 = tape;
    }
    stce_10046();
    stce_10052 = stce_10051;
    this->stce_10016->register_variable(stce_10052);
    stce_9873.push_back(stce_10052._tape_index());
    stce_10039::register_output(stce_10052);
    return stce_10052;
  }
  inline typename dco::mode<stce_10020>::stce_9987 get_output_adjoint() {
    size_t stce_9811 = stce_10042;
    stce_10042++;
    if (stce_10042 == stce_9873.size())
      stce_10042 = 0;
    typename dco::mode<stce_10020>::stce_9987 back = this->_adjoint_vector->_read_adjoint(stce_9873[stce_9811]);
    return back;
  }
  void get_output_adjoint(typename stce_10020::VALUE_TYPE* stce_9812, const size_t stce_9832) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9832; ++stce_9853) {
      stce_9812[stce_9853] = get_output_adjoint();
    }
  }
  void get_output_adjoint(std::vector<typename stce_10020::VALUE_TYPE>& stce_9812) {
    assert(stce_9812.size());
    get_output_adjoint(&(stce_9812[0]), stce_9812.size());
  }
  void increment_input_adjoint(const typename stce_10020::VALUE_TYPE* const stce_9927, const size_t stce_9832) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9832; ++stce_9853) {
      this->_adjoint_vector->_increment_adjoint(stce_9872[stce_10041 + stce_9853], stce_9927[stce_9853]);
    }
    stce_10041 += stce_9832;
    if (stce_10041 == stce_9872.size())
      stce_10041 = 0;
  }
  void increment_input_adjoint(const std::vector<typename stce_10020::VALUE_TYPE>& stce_9927) {
    assert(stce_9927.size() != 0);
    increment_input_adjoint(&(stce_9927[0]), stce_9927.size());
  }
  bool stce_10053() { return (stce_10041 == 0); }
  bool stce_10054() { return (stce_10042 == 0); }
  void increment_input_adjoint(const typename dco::mode<stce_10020>::stce_9987& stce_9927) {
    size_t stce_9811 = stce_10041;
    stce_10041++;
    if (stce_10041 == stce_9872.size())
      stce_10041 = 0;
    this->_adjoint_vector->_increment_adjoint(stce_9872[stce_9811], stce_9927);
  }
};
} // namespace helper
} // namespace dco

namespace dco {
namespace ACM {
template <class stce_10014, class stce_10055> struct baseclass : dco::helper::stce_10015<stce_10014> {
private:
  std::vector<stce_10055*> stce_10056;
  std::vector<stce_10055*> stce_10057;
  std::vector<index_t> stce_10058;
  std::vector<index_t> stce_10059;
  std::vector<void*> _data;
  int stce_10060;

public:
  typedef stce_10055 active_t;
  typedef stce_10014 tape_t;
  baseclass(tape_t* tape) : stce_10060(0) { this->set_tape(tape); }
  size_t register_input(stce_10055& stce_9808) {
    size_t stce_9836 = stce_10056.size();
    stce_10056.push_back(&stce_9808);
    stce_10059.push_back(stce_9808._tape_index());
    return stce_9836;
  }
  size_t register_input(std::vector<stce_10055>& stce_10061) {
    size_t stce_9836 = stce_10056.size();
    for (int stce_9853 = 0; stce_9853 < stce_10061.size(); ++stce_9853) {
      const stce_10055& stce_10062 = stce_10061[stce_9853];
      this->register_input(stce_10062);
    }
    return stce_9836;
  }
  size_t register_output(stce_10055& stce_9808) {
    if (stce_9808._tape_index() == 0) {
      this->get_tape()->register_variable(stce_9808);
    }
    size_t stce_9836 = stce_10057.size();
    stce_10057.push_back(&stce_9808);
    stce_10058.push_back(stce_9808._tape_index());
    return stce_9836;
  }
  int register_output(std::vector<stce_10055>& stce_10061) {
    int stce_9836 = stce_10057.size();
    for (int stce_9853 = 0; stce_9853 < stce_10061.size(); ++stce_9853) {
      if (stce_10061[stce_9853]._tape_index() == 0) {
        this->get_tape()->register_variable(stce_10061[stce_9853]);
      }
      stce_10058.push_back(stce_10061[stce_9853]._tape_index());
      stce_10057.push_back(&stce_10061[stce_9853]);
    }
    return stce_9836;
  }
  template <typename stce_9778> int write_data(const stce_9778& data) {
    stce_9778* stce_10063 = new stce_9778(data);
    int stce_9836 = _data.size();
    _data.push_back(stce_10063);
    return stce_9836;
  }
  template <typename stce_9778> const stce_9778& read_data(const int stce_10064 = -1) {
    int stce_9811 = 0;
    if (stce_10064 == -1) {
      stce_9811 = stce_10060 % _data.size();
      stce_10060++;
    }
    void* stce_10065 = _data[stce_9811];
    return *static_cast<stce_9778*>(stce_10065);
  }
  size_t stce_10066() { return stce_10056.size(); }
  size_t stce_10067() { return stce_10056.size(); }
  typename stce_10055::VALUE_TYPE& input_value(const int stce_9811) { return stce_10056[stce_9811]->_value(); }
  typename stce_10055::VALUE_TYPE& output_value(const int stce_9811) { return stce_10057[stce_9811]->_value(); }
  typename dco::mode<stce_10055>::stce_9987& input_adjoint(const int stce_9811) {
    return this->get_tape()->_adjoint(stce_10059[stce_9811]);
  }
  typename dco::mode<stce_10055>::stce_9987& output_adjoint(const int stce_9811) {
    return this->get_tape()->_adjoint(stce_10058[stce_9811]);
  }
  virtual void evaluate_primal() { std::cout << "WARNING: you need to implement evaluate_primal!!!!\n"; }
  virtual void evaluate_augmented_primal() {
    std::cout << "WARNING: you need to implement evaluate_augmented_primal!!!!\n";
  }
  virtual void evaluate_adjoint() { std::cout << "WARNING: you need to implement evaluate_adjoint!!!!\n"; }
};
template <class stce_10014, class stce_10055> static void stce_10068(baseclass<stce_10014, stce_10055>* stce_10069) {
  stce_10069->evaluate_adjoint();
}
} // namespace ACM
} // namespace dco
namespace dco {
namespace stce_10070 {
template <class stce_10071> struct stce_10072 {
  std::vector<stce_10071*> stce_10056;
  std::vector<stce_10071*> stce_10057;
  std::vector<void*> _data;
  int stce_10060;
  stce_10072() : stce_10060(0) {}
  virtual ~stce_10072() {}
  template <typename stce_9778> int write_data(const stce_9778& data) {
    stce_9778* stce_10063 = new stce_9778(data);
    int stce_9836 = _data.size();
    _data.push_back(stce_10063);
    return stce_9836;
  }
  template <typename stce_9778> const stce_9778& read_data(const int stce_10064 = -1) {
    int stce_9811 = 0;
    if (stce_10064 == -1) {
      stce_9811 = stce_10060 % _data.size();
      stce_10060++;
    }
    void* stce_10065 = _data[stce_9811];
    return *static_cast<stce_9778*>(stce_10065);
  }
  size_t stce_10066() { return stce_10056.size(); }
  size_t stce_10067() { return stce_10057.size(); }
  stce_10071& input_value(const int stce_9811) { return *stce_10056[stce_9811]; }
  stce_10071& output_value(const int stce_9811) { return *stce_10057[stce_9811]; }
  virtual void evaluate_primal() { std::cout << "WARNING: you need to implement evaluate_primal!!!!\n"; }
};
template <class stce_10071> struct stce_10073 : stce_10072<stce_10071> {
  int register_input(stce_10071& stce_9808) {
    int stce_9836 = this->stce_10056.size();
    this->stce_10056.push_back(&stce_9808);
    return stce_9836;
  }
  int register_input(std::vector<stce_10071>& stce_10061) {
    int stce_9836 = this->stce_10056.size();
    for (int stce_9853 = 0; stce_9853 < stce_10061.size(); ++stce_9853) {
      const stce_10071& stce_10062 = stce_10061[stce_9853];
      this->register_input(stce_10062);
    }
    return stce_9836;
  }
  int register_output(stce_10071& stce_9808) {
    int stce_9836 = this->stce_10057.size();
    this->stce_10057.push_back(&stce_9808);
    return stce_9836;
  }
  int register_output(std::vector<stce_10071>& stce_10061) {
    int stce_9836 = this->stce_10057.size();
    for (int stce_9853 = 0; stce_9853 < stce_10061.size(); ++stce_9853) {
      register_output(stce_10061[stce_9853]);
    }
    return stce_9836;
  }
};
template <class stce_10014, class stce_10055>
struct stce_10074 : public dco::helper::stce_10015<stce_10014>, public stce_10072<stce_10055> {
private:
  std::vector<index_t> stce_10058;
  std::vector<index_t> stce_10059;

public:
  typedef stce_10055 active_t;
  typedef stce_10014 tape_t;
  stce_10074(tape_t* tape) { this->set_tape(tape); }
  stce_10055& stce_10075(const int stce_9811) { return *(this->stce_10056[stce_9811]); }
  stce_10055& stce_10076(const int stce_9811) { return *(this->stce_10057[stce_9811]); }
  typename stce_10055::VALUE_TYPE& input_value(const int stce_9811) { return this->stce_10056[stce_9811]->_value(); }
  typename stce_10055::VALUE_TYPE& output_value(const int stce_9811) { return this->stce_10057[stce_9811]->_value(); }
  typename dco::mode<stce_10055>::stce_9987& input_adjoint(const int stce_9811) {
    return this->get_tape()->_adjoint(stce_10059[stce_9811]);
  }
  typename dco::mode<stce_10055>::stce_9987& output_adjoint(const int stce_9811) {
    return this->get_tape()->_adjoint(stce_10058[stce_9811]);
  }
  int register_input(stce_10055& stce_9808) {
    int stce_9836 = this->stce_10056.size();
    this->stce_10056.push_back(&stce_9808);
    this->stce_10059.push_back(stce_9808._tape_index());
    return stce_9836;
  }
  int register_input(std::vector<stce_10055>& stce_10061) {
    int stce_9836 = this->stce_10056.size();
    for (int stce_9853 = 0; stce_9853 < stce_10061.size(); ++stce_9853) {
      const stce_10055& stce_10062 = stce_10061[stce_9853];
      this->register_input(stce_10062);
    }
    return stce_9836;
  }
  int register_output(stce_10055& stce_9808) {
    if (stce_9808._tape_index() == 0) {
      this->get_tape()->register_variable(stce_9808);
    }
    int stce_9836 = this->stce_10057.size();
    this->stce_10057.push_back(&stce_9808);
    this->stce_10058.push_back(stce_9808._tape_index());
    return stce_9836;
  }
  int register_output(std::vector<stce_10055>& stce_10061) {
    int stce_9836 = this->stce_10057.size();
    for (int stce_9853 = 0; stce_9853 < stce_10061.size(); ++stce_9853) {
      if (stce_10061[stce_9853]._tape_index() == 0) {
        this->get_tape()->register_variable(stce_10061[stce_9853]);
      }
      this->stce_10058.push_back(stce_10061[stce_9853]._tape_index());
      this->stce_10057.push_back(&stce_10061[stce_9853]);
    }
    return stce_9836;
  }
  virtual void evaluate_augmented_primal() {
    std::cout << "WARNING: you need to implement evaluate_augmented_primal!!!!\n";
  }
  virtual void evaluate_adjoint() { std::cout << "WARNING: you need to implement evaluate_adjoint!!!!\n"; }
};
template <class stce_10014, class stce_10055> static void stce_10068(stce_10074<stce_10014, stce_10055>* stce_10069) {
  stce_10069->evaluate_adjoint();
}
} // namespace stce_10070
} // namespace dco

namespace dco {
namespace internal {
template <class stce_10055> class stce_10077 {
private:
  typedef typename dco::mode<stce_10055>::tape_t tape_t;
  typedef typename tape_t::stce_9759 stce_9759;
  typedef typename tape_t::edge_inserter edge_inserter;
  stce_10055& stce_10078;
  edge_inserter stce_9998;
  stce_10077(const stce_10077&);

public:
  stce_10077(stce_10055& stce_10079) : stce_10078(stce_10079), stce_9998(stce_10079.tape()->current_ref()) {}
  template <typename stce_9793> void put(const stce_9793& stce_9808, const stce_9759& stce_9967) {
    index_t stce_10080 = stce_9808._tape_index();
    if (!HAS_TAPE_ACTIVITY_CHECK || stce_10080 != 0) {
      bool stce_10081 = (stce_9998.index() == 0);
      stce_9998.insert(stce_10080, stce_9967);
      stce_10078._tape_index() = stce_9998.index();
      if (stce_10081)
        stce_10078.stce_10082(stce_10078._value(), stce_9825());
    }
  }
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <class stce_9788> struct stce_10083 {
  typedef typename stce_9788::tape_t::stce_9760 derivative_t;

protected:
  mutable index_t stce_10084;

public:
  stce_10083() : stce_10084(0) {}
  DCO_STRONG_INLINE stce_10083(const stce_10083& stce_10085) : stce_10084(stce_10085.stce_10084) {}
  DCO_STRONG_INLINE stce_10083& operator=(const stce_10083& stce_9808) {
    stce_10084 = stce_9808.stce_10084;
    return *this;
  }
  void clear() { stce_10084 = 0; }
  derivative_t& stce_9971() const { return _adjoint(); }
  derivative_t& _adjoint() const {
    if (IS_DEBUG && !stce_9788::global_tape)
      throw dco::exception::create<std::runtime_error>(
          "Tape not created yet. Please use tape_t::create() before accessing derivative components of adjoint types.");
    return stce_9788::global_tape->_adjoint(stce_10084);
  }
  void stce_10086(const derivative_t& v) const {
    if (IS_DEBUG && !stce_9788::global_tape)
      throw dco::exception::create<std::runtime_error>(
          "Tape not created yet. Please use tape_t::create() before accessing derivative components of adjoint types.");
    stce_9788::global_tape->_adjoint(stce_10084) = v;
  }
  bool _is_registered() const { return stce_10084 == 0 ? false : true; }
  index_t& _tape_index() const { return stce_10084; }
  template <class stce_10071> DCO_STRONG_INLINE void stce_10082(const stce_10071&, const double&) {}
  template <typename stce_10087>
  static DCO_STRONG_INLINE void register_variable(stce_10087& stce_9808, index_t index, typename stce_9788::tape_t*) {
    if (IS_DEBUG && !stce_9788::global_tape) {
      throw dco::exception::create<std::runtime_error>("Global tape not yet created (is NULL).");
    }
    stce_9808.stce_10084 = index;
  }
  static typename stce_9788::tape_t* tape() { return stce_9788::global_tape; }
  void set_tape(typename stce_9788::tape_t*) {}
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
struct stce_10088 {
  template <class stce_10089, class stce_10090>
  static auto stce_10091(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() == stce_10093._value()) {
    return stce_10092._value() == stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10094(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() == stce_10093) {
    return stce_10092._value() == stce_10093;
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10095(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092 == stce_10093._value()) {
    return stce_10092 == stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10096(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() != stce_10093._value()) {
    return stce_10092._value() != stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10097(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() != stce_10093) {
    return stce_10092._value() != stce_10093;
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10098(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092 != stce_10093._value()) {
    return stce_10092 != stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10099(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() < stce_10093._value()) {
    return stce_10092._value() < stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10100(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() < stce_10093) {
    return stce_10092._value() < stce_10093;
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10101(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092 < stce_10093._value()) {
    return stce_10092 < stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10102(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() <= stce_10093._value()) {
    return stce_10092._value() <= stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10103(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() <= stce_10093) {
    return stce_10092._value() <= stce_10093;
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10104(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092 <= stce_10093._value()) {
    return stce_10092 <= stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10105(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() > stce_10093._value()) {
    return stce_10092._value() > stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10106(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() > stce_10093) {
    return stce_10092._value() > stce_10093;
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10107(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092 > stce_10093._value()) {
    return stce_10092 > stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10108(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() >= stce_10093._value()) {
    return stce_10092._value() >= stce_10093._value();
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10109(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092._value() >= stce_10093) {
    return stce_10092._value() >= stce_10093;
  }
  template <class stce_10089, class stce_10090>
  static auto stce_10110(const stce_10089& stce_10092, const stce_10090& stce_10093)
      -> decltype(stce_10092 >= stce_10093._value()) {
    return stce_10092 >= stce_10093._value();
  }
};
template <class stce_10111, stce_10111*& stce_9990> struct stce_10112 {
  template <class stce_10089, class stce_10090>
  static bool stce_10091(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() == stce_10093._value();
    const bool stce_10113 = stce_10092.stce_10114(0) == stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092.stce_10114(1) == stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_AA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10094(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() == stce_10093;
    const bool stce_10113 = stce_10092.stce_10114(0) == stce_10093;
    const bool stce_10115 = stce_10092.stce_10114(1) == stce_10093;
    stce_9990->stce_10116("compare_AP", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10095(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092 == stce_10093._value();
    const bool stce_10113 = stce_10092 == stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092 == stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_PA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10096(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() != stce_10093._value();
    const bool stce_10113 = stce_10092.stce_10114(0) != stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092.stce_10114(1) != stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_AA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10097(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() != stce_10093;
    const bool stce_10113 = stce_10092.stce_10114(0) != stce_10093;
    const bool stce_10115 = stce_10092.stce_10114(1) != stce_10093;
    stce_9990->stce_10116("compare_AP", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10098(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092 != stce_10093._value();
    const bool stce_10113 = stce_10092 != stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092 != stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_PA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10099(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() < stce_10093._value();
    const bool stce_10113 = stce_10092.stce_10114(0) < stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092.stce_10114(1) < stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_AA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10100(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() < stce_10093;
    const bool stce_10113 = stce_10092.stce_10114(0) < stce_10093;
    const bool stce_10115 = stce_10092.stce_10114(1) < stce_10093;
    stce_9990->stce_10116("compare_AP", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10101(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092 < stce_10093._value();
    const bool stce_10113 = stce_10092 < stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092 < stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_PA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10102(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() <= stce_10093._value();
    const bool stce_10113 = stce_10092.stce_10114(0) <= stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092.stce_10114(1) <= stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_AA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10103(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() <= stce_10093;
    const bool stce_10113 = stce_10092.stce_10114(0) <= stce_10093;
    const bool stce_10115 = stce_10092.stce_10114(1) <= stce_10093;
    stce_9990->stce_10116("compare_AP", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10104(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092 <= stce_10093._value();
    const bool stce_10113 = stce_10092 <= stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092 <= stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_PA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10105(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() > stce_10093._value();
    const bool stce_10113 = stce_10092.stce_10114(0) > stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092.stce_10114(1) > stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_AA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10106(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() > stce_10093;
    const bool stce_10113 = stce_10092.stce_10114(0) > stce_10093;
    const bool stce_10115 = stce_10092.stce_10114(1) > stce_10093;
    stce_9990->stce_10116("compare_AP", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10107(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092 > stce_10093._value();
    const bool stce_10113 = stce_10092 > stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092 > stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_PA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10108(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() >= stce_10093._value();
    const bool stce_10113 = stce_10092.stce_10114(0) >= stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092.stce_10114(1) >= stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_AA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10109(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092._value() >= stce_10093;
    const bool stce_10113 = stce_10092.stce_10114(0) >= stce_10093;
    const bool stce_10115 = stce_10092.stce_10114(1) >= stce_10093;
    stce_9990->stce_10116("compare_AP", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
  template <class stce_10089, class stce_10090>
  static bool stce_10110(const stce_10089& stce_10092, const stce_10090& stce_10093) {
    const bool stce_9836 = stce_10092 >= stce_10093._value();
    const bool stce_10113 = stce_10092 >= stce_10093.stce_10114(0);
    const bool stce_10115 = stce_10092 >= stce_10093.stce_10114(1);
    stce_9990->stce_10116("compare_PA", stce_9836, stce_10113, stce_10115);
    return stce_9836;
  }
};
} // namespace internal
} // namespace dco

namespace dco {
namespace folding {
template <class stce_10117> class stce_10118 {
public:
  typedef typename stce_10117::stce_9760 stce_9760;
  typedef typename stce_10117::stce_9759 stce_9759;
  typedef typename stce_10117::edge_inserter stce_10119;
  stce_10118(stce_10117* tape) : stce_10120(1), stce_9998(tape->current_ref()) {}
  template <class stce_10121, typename stce_9757> DCO_ALWAYS_INLINE stce_10121& stce_10122(stce_9757 const& pval) {
    stce_10120 *= static_cast<stce_9759>(pval);
    return static_cast<stce_10121&>(*this);
  }
  DCO_ALWAYS_INLINE stce_9759& pval() { return stce_10120; }
  DCO_ALWAYS_INLINE index_t index() const { return stce_9998.index(); }
  template <class stce_10087> DCO_ALWAYS_INLINE void insert(stce_10087 const& stce_9808) {
    const index_t stce_10123 = stce_9808._tape_index();
    if (!HAS_TAPE_ACTIVITY_CHECK || stce_10123 != 0) {
      if (!stce_9753 || !is_zero(stce_10120)) {
        stce_9998.insert(stce_10123, stce_10120);
      }
    }
  }

protected:
  stce_9759 stce_10120;

private:
  stce_10118();
  stce_10118(stce_10118& stce_9938);
  stce_10119 stce_9998;
};
template <class stce_10117> class stce_10124 : public stce_10118<stce_10117> {
  typedef typename stce_10117::stce_9760 stce_9760;
  typedef typename stce_10117::edge_inserter stce_10119;

public:
  stce_10124(stce_10117* tape) : stce_10118<stce_10117>(tape), stce_10125(0) {}
  template <class stce_10087> DCO_ALWAYS_INLINE void insert(stce_10087 stce_9808) {
    stce_10118<stce_10117>::insert(stce_9808);
    stce_10125 += this->stce_10120 * stce_9808.stce_9977;
  }
  stce_9760 tangent() const { return stce_10125; }

private:
  stce_10124();
  stce_10124(stce_10124& stce_9938);
  stce_9760 stce_10125;
};
template <class stce_10126, class stce_9756, class stce_10127>
DCO_ALWAYS_INLINE void interpret(const dco::internal::active_type<stce_9756, stce_10127>& stce_9808,
                                 stce_10126& stce_10128) {
  stce_10128.insert(stce_9808);
}
template <class stce_10126, class stce_9756, class stce_10129, class stce_10130, class stce_10131>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::stce_9775<stce_9756, stce_10129, stce_10130, stce_10131>& stce_9808,
          stce_10126& stce_10128) {
  typename stce_10126::stce_9759 stce_10132 = stce_10128.pval();
  interpret<stce_10126>(stce_9808.stce_10133, stce_10128.template stce_10122<stce_10126>(stce_9808.stce_10134()));
  stce_10128.pval() = stce_10132;
  interpret<stce_10126>(stce_9808.stce_10135, stce_10128.template stce_10122<stce_10126>(stce_9808.stce_10136()));
}
template <class stce_10126, class stce_9756, class stce_10137, class stce_10131>
DCO_ALWAYS_INLINE void interpret(const dco::internal::stce_9772<stce_9756, stce_10137, stce_10131>& stce_9808,
                                 stce_10126& stce_10128) {
  interpret<stce_10126>(stce_9808.stce_10138, stce_10128.template stce_10122<stce_10126>(stce_9808.pval()));
}
template <class stce_10126, class stce_9756, class stce_10129, class stce_10130, class stce_10131>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::stce_9776<stce_9756, stce_10129, stce_10130, stce_10131>& stce_9808,
          stce_10126& stce_10128) {
  interpret<stce_10126>(stce_9808.stce_10133, stce_10128.template stce_10122<stce_10126>(stce_9808.stce_10134()));
}
template <class stce_10126, class stce_9756, class stce_10129, class stce_10130, class stce_10131>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::stce_9777<stce_9756, stce_10129, stce_10130, stce_10131>& stce_9808,
          stce_10126& stce_10128) {
  interpret<stce_10126>(stce_9808.stce_10135, stce_10128.template stce_10122<stce_10126>(stce_9808.stce_10136()));
}
template <class stce_10117> class stce_10139 {
public:
  stce_10139() : stce_9990(0) {}
  template <class stce_10087> DCO_ALWAYS_INLINE void insert(stce_10087 stce_9808) {
    if (stce_9808.tape())
      stce_9990 = stce_9808.tape();
  }
  stce_10117* tape() const { return stce_9990; }

private:
  stce_10139(stce_10139& stce_9938);
  stce_10117* stce_9990;
};
template <class stce_9756, class stce_10129, class stce_10130, class stce_10131, class stce_10117>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::stce_9775<stce_9756, stce_10129, stce_10130, stce_10131>& stce_9808,
          stce_10139<stce_10117>& stce_10128) {
  interpret(stce_9808.stce_10133, stce_10128);
  if (stce_10128.tape()) {
    if (IS_DEBUG) {
      stce_10117* tape = stce_10128.tape();
      interpret(stce_9808.stce_10135, stce_10128);
      if (tape != stce_10128.tape()) {
        throw dco::exception::create<std::runtime_error>(
            "multiple tape error: different tapes on right-hand side of statement");
      }
    }
    return;
  }
  interpret(stce_9808.stce_10135, stce_10128);
}
template <class stce_9756, class stce_10137, class stce_10131, class stce_10117>
DCO_ALWAYS_INLINE void interpret(const dco::internal::stce_9772<stce_9756, stce_10137, stce_10131>& stce_9808,
                                 stce_10139<stce_10117>& stce_10128) {
  interpret(stce_9808.stce_10138, stce_10128);
}
template <class stce_9756, class stce_10129, class stce_10130, class stce_10131, class stce_10117>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::stce_9776<stce_9756, stce_10129, stce_10130, stce_10131>& stce_9808,
          stce_10139<stce_10117>& stce_10128) {
  interpret(stce_9808.stce_10133, stce_10128);
}
template <class stce_9756, class stce_10129, class stce_10130, class stce_10131, class stce_10117>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::stce_9777<stce_9756, stce_10129, stce_10130, stce_10131>& stce_9808,
          stce_10139<stce_10117>& stce_10128) {
  interpret(stce_9808.stce_10135, stce_10128);
}
} // namespace folding
} // namespace dco
namespace dco {
namespace internal {
template <typename stce_9788> class stce_10140 : public stce_10083<stce_9788> {
  typedef stce_10083<stce_9788> stce_10141;

public:
  typedef stce_9788 mode_t;
  typedef stce_10088 stce_10142;
  typedef typename stce_9788::tape_t tape_t;
  typedef typename tape_t::stce_9760 derivative_t;
  stce_10140() {}
  DCO_STRONG_INLINE stce_10140(const stce_10140& stce_10085) : stce_10141(stce_10085) {}
  DCO_STRONG_INLINE stce_10140& operator=(const stce_10140& stce_9808) {
    stce_10141::operator=(static_cast<const stce_10141&>(stce_9808));
    return *this;
  }
  template <class stce_9912> DCO_ALWAYS_INLINE void stce_9913(const stce_9912& stce_10143) {
    if (!stce_9788::global_tape || !stce_9788::global_tape->is_active()) {
      this->clear();
      return;
    }
    using namespace folding;
    stce_10118<tape_t> stce_10144(stce_9788::global_tape);
    interpret(stce_10143, stce_10144);
    this->stce_10084 = stce_10144.index();
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename stce_9778, typename stce_9757 = stce_9778, typename stce_9758 = stce_9757,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1s {
  typedef types_config_t<stce_9778, stce_9757, stce_9758> stce_10145;

public:
  static const memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef ga1s mode_t;
  typedef dco::internal::stce_10140<ga1s> data_t;
  typedef typename stce_10145::value_t value_t;
  typedef value_t scalar_value_t;
  typedef typename stce_10145::value_t active_value_t;
  typedef typename stce_10145::stce_9760 derivative_t;
  typedef derivative_t stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = true;
  static const bool is_tangent_type = false;
  static const bool stce_10146 = false;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, stce_10145> tape_t;
  static DCOi_THREAD_LOCAL tape_t* global_tape;
  typedef typename internal::stce_10077<type> local_gradient_t;
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  typedef dco::helper::stce_10021<type, tape_t> userdata_object_t;
  typedef dco::helper::stce_10038<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type> jacobian_preaccumulator_t;
};
template <class stce_9778, class stce_9757, class stce_9758, memory_model::TYPE MEMORY_MODEL>
DCOi_THREAD_LOCAL typename ga1s<stce_9778, stce_9757, stce_9758, MEMORY_MODEL>::tape_t*
    ga1s<stce_9778, stce_9757, stce_9758, MEMORY_MODEL>::global_tape = 0;
} // namespace dco
namespace dco {
typedef ga1s<double> a1w;
typedef double w_rtype;
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9788> class stce_10147 {
public:
  typedef typename stce_9788::tape_t tape_t;

private:
  mutable index_t stce_10084;
  mutable tape_t* stce_10148;

public:
  typedef stce_9788 mode_t;
  typedef stce_10088 stce_10142;
  typedef typename tape_t::stce_9760 derivative_t;
  stce_10147() : stce_10084(0), stce_10148(0) {}
  DCO_STRONG_INLINE stce_10147& operator=(const stce_10147& stce_9808) {
    stce_10084 = stce_9808.stce_10084;
    stce_10148 = stce_9808.stce_10148;
    return *this;
  }
  DCO_STRONG_INLINE stce_10147(const stce_10147& stce_10085)
      : stce_10084(stce_10085.stce_10084), stce_10148(stce_10085.stce_10148) {}
  void clear() {
    stce_10084 = 0;
    stce_10148 = 0;
  }
  derivative_t& stce_9971() const { return _adjoint(); }
  derivative_t& _adjoint() const {
    static derivative_t stce_9972 = static_cast<derivative_t>(0);
    if (stce_10148 == 0) {
      stce_9972 = 0;
      return stce_9972;
    } else {
      return stce_10148->_adjoint(stce_10084);
    }
  }
  void stce_10086(const derivative_t& v) const {
    if (stce_10148 != 0)
      stce_10148->_adjoint(stce_10084) = v;
  }
  bool _is_registered() const { return stce_10084 == 0 ? false : true; }
  index_t& _tape_index() const { return stce_10084; }
  template <typename stce_10071> DCO_STRONG_INLINE void stce_10082(const stce_10071&, const double&) {}
  template <typename stce_10087>
  static DCO_STRONG_INLINE void register_variable(stce_10087& stce_9808, index_t index, tape_t* tape) {
    stce_9808.stce_10148 = tape;
    stce_9808.stce_10084 = index;
  }
  tape_t* tape() const { return stce_10148; }
  void set_tape(tape_t* stce_9778) { stce_10148 = stce_9778; }
  template <class stce_9912> DCO_ALWAYS_INLINE void stce_9913(const stce_9912& stce_10143) {
    using namespace folding;
    stce_10139<tape_t> stce_10139;
    interpret(stce_10143, stce_10139);
    tape_t* stce_10149 = stce_10139.tape();
    if (!stce_10149 || !stce_10149->is_active()) {
      clear();
      return;
    }
    stce_10118<tape_t> stce_10144(stce_10149);
    interpret(stce_10143, stce_10144);
    stce_10084 = stce_10144.index();
    stce_10148 = stce_10149;
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <class stce_9778, class stce_9757 = stce_9778, class stce_9758 = stce_9757,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1sm {
  typedef types_config_t<stce_9778, stce_9757, stce_9758> stce_10145;

public:
  static const memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef ga1sm mode_t;
  typedef dco::internal::stce_10147<ga1sm> data_t;
  typedef typename stce_10145::value_t value_t;
  typedef typename stce_10145::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename stce_10145::stce_9760 derivative_t;
  typedef derivative_t stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = true;
  static const bool is_tangent_type = false;
  static const bool stce_10146 = false;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, stce_10145> tape_t;
  typedef typename internal::stce_10077<type> local_gradient_t;
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  typedef dco::helper::stce_10021<type, tape_t> userdata_object_t;
  typedef dco::helper::stce_10038<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9788> struct data_g {
  typedef stce_9788 mode_t;
  typedef stce_10088 stce_10142;
  typedef typename mode_t::derivative_t derivative_t;
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename stce_9778> class gvalue {
public:
  typedef internal::data_g<gvalue> data_t;
  typedef typename std::decay<stce_9778>::type type;
  typedef type active_value_t;
  typedef type active_t;
  typedef type value_t;
  typedef value_t scalar_value_t;
  typedef type passive_t;
  typedef type scalar_passive_t;
  typedef void derivative_t;
  typedef void stce_9987;
  typedef stce_9805 tape_t;
  typedef void local_gradient_t;
  typedef void local_gradient_with_activity_t;
  typedef void external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<void> jacobian_preaccumulator_t;
  static const bool is_dco_type = false;
  static const bool is_adjoint_type = false;
  static const bool is_tangent_type = false;
  static const bool stce_10146 = false;
  static const int order = 0;
  static const size_t p1f_size = 0;
  static tape_t* global_tape;
};
template <typename stce_9778> typename gvalue<stce_9778>::tape_t* gvalue<stce_9778>::global_tape = 0;
} // namespace dco
namespace dco {
template <typename stce_9778> struct mode : public dco::gvalue<stce_9778> {
  static const bool is_intermediate_type = false;
};
template <typename stce_9767, typename stce_9768>
struct mode<internal::active_type<stce_9767, stce_9768>> : public stce_9768::mode_t {
  static const bool is_intermediate_type = false;
};
template <typename stce_9767, typename stce_9768>
struct mode<internal::active_type<stce_9767, stce_9768> const> : public stce_9768::mode_t {
  static const bool is_intermediate_type = false;
};
template <typename stce_9767, typename stce_9768>
struct mode<internal::active_type<stce_9767, stce_9768>&> : public stce_9768::mode_t {
  static const bool is_intermediate_type = false;
};
template <typename stce_9767, typename stce_9768>
struct mode<internal::active_type<stce_9767, stce_9768> const&> : public stce_9768::mode_t {
  static const bool is_intermediate_type = false;
};
template <typename stce_9767, typename stce_9768>
struct mode<internal::active_type<stce_9767, stce_9768>&&> : public stce_9768::mode_t {
  static const bool is_intermediate_type = false;
};
template <typename stce_9778, typename stce_10012, typename stce_10150>
struct mode<internal::stce_9772<stce_9778, stce_10012, stce_10150>>
    : public internal::stce_9772<stce_9778, stce_10012, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <typename stce_9778, typename stce_10012, typename stce_10150>
struct mode<internal::stce_9772<stce_9778, stce_10012, stce_10150> const>
    : public internal::stce_9772<stce_9778, stce_10012, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <typename stce_9778, typename stce_10012, typename stce_10150>
struct mode<internal::stce_9772<stce_9778, stce_10012, stce_10150>&>
    : public internal::stce_9772<stce_9778, stce_10012, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <typename stce_9778, typename stce_10012, typename stce_10150>
struct mode<internal::stce_9772<stce_9778, stce_10012, stce_10150> const&>
    : public internal::stce_9772<stce_9778, stce_10012, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <typename stce_9778, typename stce_10012, typename stce_10150>
struct mode<internal::stce_9772<stce_9778, stce_10012, stce_10150>&&>
    : public internal::stce_9772<stce_9778, stce_10012, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10151, class stce_10152, class stce_10150>
struct mode<internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150>>
    : public internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10151, class stce_10152, class stce_10150>
struct mode<internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150> const>
    : public internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10151, class stce_10152, class stce_10150>
struct mode<internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150>&>
    : public internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10151, class stce_10152, class stce_10150>
struct mode<internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150> const&>
    : public internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10151, class stce_10152, class stce_10150>
struct mode<internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150>&&>
    : public internal::stce_9775<stce_9778, stce_10151, stce_10152, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150>>
    : public internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150> const>
    : public internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150>&>
    : public internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150> const&>
    : public internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150>&&>
    : public internal::stce_9776<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150>>
    : public internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150> const>
    : public internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150>&>
    : public internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150> const&>
    : public internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9778, class stce_10012, class stce_9879, class stce_10150>
struct mode<internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150>&&>
    : public internal::stce_9777<stce_9778, stce_10012, stce_9879, stce_10150>::data_t::mode_t {
  static const bool is_intermediate_type = true;
};
template <class stce_9767, class DATA_TYPE>
struct mode<internal::stce_9769<stce_9767, DATA_TYPE>> : public DATA_TYPE::mode_t {
  static const bool is_intermediate_type = true;
};
} // namespace dco

namespace std {
template <typename stce_9778, typename stce_10153, typename stce_10154, typename stce_10155, typename stce_10156>
struct common_type<stce_9778, dco::internal::stce_9775<stce_10153, stce_10154, stce_10155, stce_10156>> {
  using type =
      typename std::common_type<typename dco::mode<stce_9778>::type, typename dco::mode<stce_10154>::type>::type;
};
template <typename stce_9778, typename stce_10153, typename stce_10151, typename stce_10156>
struct common_type<stce_9778, dco::internal::stce_9772<stce_10153, stce_10151, stce_10156>> {
  using type =
      typename std::common_type<typename dco::mode<stce_9778>::type, typename dco::mode<stce_10151>::type>::type;
};
template <typename stce_9778, typename stce_10153, typename stce_10151, typename stce_10152, typename stce_10156>
struct common_type<stce_9778, dco::internal::stce_9776<stce_10153, stce_10151, stce_10152, stce_10156>> {
  using type =
      typename std::common_type<typename dco::mode<stce_9778>::type, typename dco::mode<stce_10151>::type>::type;
};
template <typename stce_9778, typename stce_10153, typename stce_10151, typename stce_10152, typename stce_10156>
struct common_type<stce_9778, dco::internal::stce_9777<stce_10153, stce_10151, stce_10152, stce_10156>> {
  using type =
      typename std::common_type<typename dco::mode<stce_9778>::type, typename dco::mode<stce_10152>::type>::type;
};
template <typename stce_9778, typename stce_10153, typename stce_10154, typename stce_10155, typename stce_10156>
struct common_type<dco::internal::stce_9775<stce_10153, stce_10154, stce_10155, stce_10156,
                                            typename enable_if<!dco::mode<stce_9778>::is_dco_type>::type>,
                   stce_9778> {
  using type = typename std::common_type<stce_9778, typename dco::mode<stce_10154>::type>::type;
};
template <typename stce_9778, typename stce_10153, typename stce_10151, typename stce_10156>
struct common_type<dco::internal::stce_9772<stce_10153, stce_10151, stce_10156,
                                            typename enable_if<!dco::mode<stce_9778>::is_dco_type>::type>,
                   stce_9778> {
  using type = typename std::common_type<stce_9778, typename dco::mode<stce_10151>::type>::type;
};
template <typename stce_9778, typename stce_10153, typename stce_10151, typename stce_10152, typename stce_10156>
struct common_type<dco::internal::stce_9776<stce_10153, stce_10151, stce_10152, stce_10156,
                                            typename enable_if<!dco::mode<stce_9778>::is_dco_type>::type>,
                   stce_9778> {
  using type = typename std::common_type<stce_9778, typename dco::mode<stce_10151>::type>::type;
};
template <typename stce_9778, typename stce_10153, typename stce_10151, typename stce_10152, typename stce_10156>
struct common_type<dco::internal::stce_9777<stce_10153, stce_10151, stce_10152, stce_10156,
                                            typename enable_if<!dco::mode<stce_9778>::is_dco_type>::type>,
                   stce_9778> {
  using type = typename std::common_type<stce_9778, typename dco::mode<stce_10152>::type>::type;
};
} // namespace std
namespace dco {
template <typename stce_9778, typename stce_10157 = stce_9778> struct dco_type_constructable_from {
  const static bool value = false;
};
template <typename stce_9778> struct dco_explicit_type_cast_to {
  const static bool value = false;
};
namespace internal {
template <typename stce_9778> struct stce_10158 {
  static constexpr bool value = false;
};
template <typename stce_9778, typename stce_10151, typename stce_10150>
struct stce_10158<stce_9772<stce_9778, stce_10151, stce_10150>> {
  static constexpr bool value = true;
};
template <typename stce_9778> constexpr bool stce_10159 = stce_10158<std::decay_t<stce_9778>>::value;
template <typename stce_9778> struct stce_10160 {
  static constexpr bool value = false;
};
template <typename stce_9778, typename stce_10151, typename stce_10152, typename stce_10150>
struct stce_10160<stce_9775<stce_9778, stce_10151, stce_10152, stce_10150>> {
  static constexpr bool value = true;
};
template <typename stce_9778, typename stce_10151, typename stce_10152, typename stce_10150>
struct stce_10160<stce_9777<stce_9778, stce_10151, stce_10152, stce_10150>> {
  static constexpr bool value = true;
};
template <typename stce_9778, typename stce_10151, typename stce_10152, typename stce_10150>
struct stce_10160<stce_9776<stce_9778, stce_10151, stce_10152, stce_10150>> {
  static constexpr bool value = true;
};
template <typename stce_9778> constexpr bool stce_10161 = stce_10160<std::decay_t<stce_9778>>::value;
template <typename stce_9778> struct stce_10162 {
  static constexpr bool value = false;
};
template <typename stce_9778, typename stce_10163> struct stce_10162<active_type<stce_9778, stce_10163>> {
  static constexpr bool value = true;
};
template <typename stce_9778> constexpr bool stce_10164 = stce_10162<std::decay_t<stce_9778>>::value;
template <typename stce_9778, typename = void> struct stce_10165 {
  static constexpr bool value = false;
};
template <typename stce_9778> struct stce_10165<stce_9778, decltype((void)dco::mode<stce_9778>::global_tape, void())> {
  static constexpr bool value = true;
};
template <typename stce_9778> constexpr bool stce_10166 = stce_10165<std::decay_t<stce_9778>>::value;
template <typename stce_9778, typename = void> struct stce_10167 {
  static constexpr bool value = false;
};
template <typename stce_9778> struct stce_10167<stce_9778, decltype(std::declval<stce_9778>()._tape_index(), void())> {
  static constexpr bool value = true;
};
template <typename stce_9778> constexpr bool stce_10168 = stce_10167<std::decay_t<stce_9778>>::value;
} // namespace internal
enum class stce_10169 { global_tape };
using stce_10170 = stce_10169;
namespace internal {
template <typename stce_9778, stce_10170... stce_10171> struct stce_10172;
template <typename stce_9778> struct stce_10172<stce_9778, stce_10170::global_tape> {
  using mode_t = typename dco::mode<stce_9778>::mode_t;
  using data_t = typename dco::mode<stce_9778>::data_t;
  static constexpr bool value() {
    if constexpr (mode_t::is_adjoint_type) {
      return std::is_base_of<internal::stce_10140<mode_t>, data_t>::value;
    }
    return false;
  }
};
} // namespace internal
template <typename stce_9778> constexpr bool stce_10173 = mode<stce_9778>::is_dco_type;
template <typename stce_9778> constexpr bool stce_10174 = mode<stce_9778>::is_adjoint_type;
template <typename stce_9778> constexpr bool stce_10175 = mode<stce_9778>::is_tangent_type;
template <typename stce_9778> constexpr bool stce_10176 = mode<stce_9778>::stce_10146;
template <typename stce_9778, stce_10170... stce_10171>
constexpr bool stce_10177 = internal::stce_10172<stce_9778, stce_10171...>::value();
template <typename stce_9778, stce_10170... stce_10171>
constexpr bool stce_10178 = stce_10177<stce_9778, stce_10171...>;
} // namespace dco
namespace dco {
namespace internal {
template <class stce_9767> struct stce_10179 {
  const stce_9767 stce_9914;
  stce_10179(stce_9767 const& value) : stce_9914(value) {}
  inline const stce_9767& _value() const { return stce_9914; }
  template <typename TYPE, typename stce_10180 = typename enable_if<dco_explicit_type_cast_to<TYPE>::value>::type>
  explicit operator TYPE() {
    return static_cast<TYPE>(_value());
  }
};
template <class stce_9767, class DATA_TYPE> struct stce_9769 : public stce_10179<stce_9767> {
  stce_9769(const stce_9767& value) : stce_10179<stce_9767>(value) {}
  template <typename stce_9778 = DATA_TYPE>
  DCO_STRONG_INLINE
  operator typename dco::enable_if<is_gbcp_type<stce_9778>::value,
                                   typename stce_9917<stce_9769, stce_9778::gbcp_order>::stce_9899>::type() const {
    return stce_9917<stce_9769, stce_9778::gbcp_order>::value(*this);
  }
};
template <class stce_9767, class stce_9770, class stce_9771, typename>
struct stce_9772 : public stce_9769<stce_9767, typename stce_9770::data_t> {
  const stce_9770 DCO_TEMPORARY_REFORCOPY stce_10138;
  typedef typename stce_9770::data_t data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t stce_10181;
  using stce_10182 = stce_9771;
  explicit stce_9772(const stce_9770& arg)
      : stce_9769<stce_9767, data_t>(stce_9771::stce_10183(arg._value())), stce_10138(arg) {}
  inline const stce_9767 stce_10114(const int stce_9811) const {
    return stce_9771::stce_10183(stce_10138.stce_10114(stce_9811));
  }
  inline const stce_9767 pval() const { return stce_9771::stce_10184(this->_value(), stce_10138._value()); }
};
template <class stce_9767, class stce_9773, class stce_9774, class stce_9771, typename>
struct stce_9775 : public stce_9769<stce_9767, typename stce_9773::data_t> {
  const stce_9773 DCO_TEMPORARY_REFORCOPY stce_10133;
  const stce_9774 DCO_TEMPORARY_REFORCOPY stce_10135;
  typedef typename stce_9773::data_t data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t stce_10181;
  using stce_10182 = stce_9771;
  explicit stce_9775(const stce_9773& stce_10185, const stce_9774& stce_10186)
      : stce_9769<stce_9767, data_t>(stce_9771::stce_10183(stce_10185._value(), stce_10186._value())),
        stce_10133(stce_10185), stce_10135(stce_10186) {}
  inline const stce_9767 stce_10134() const {
    return stce_9771::stce_10187(this->_value(), stce_10133._value(), stce_10135._value());
  }
  inline const stce_9767 stce_10136() const {
    return stce_9771::stce_10188(this->_value(), stce_10133._value(), stce_10135._value());
  }
  inline const stce_9767 stce_10114(const int stce_9811) const {
    return stce_9771::stce_10183(stce_10133.stce_10114(stce_9811), stce_10135.stce_10114(stce_9811));
  }
};
template <class stce_9767, class stce_9773, class stce_9774, class stce_9771, typename>
struct stce_9776 : public stce_9769<stce_9767, typename stce_9773::data_t> {
  const stce_9773 DCO_TEMPORARY_REFORCOPY stce_10133;
  const stce_9774 stce_10135;
  typedef typename stce_9773::data_t data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t stce_10181;
  using stce_10182 = stce_9771;
  explicit stce_9776(const stce_9773& stce_10185, const stce_9774& stce_10186)
      : stce_9769<stce_9767, data_t>(stce_9771::stce_10183(stce_10185._value(), stce_10186)), stce_10133(stce_10185),
        stce_10135(stce_10186) {}
  inline const stce_9767 stce_10114(const int stce_9811) const {
    return stce_9771::stce_10183(stce_10133.stce_10114(stce_9811), stce_10135);
  }
  inline const stce_9767 stce_10134() const {
    return stce_9771::stce_10187(this->stce_9914, stce_10133._value(), stce_10135);
  }
};
template <class stce_9767, class stce_9773, class stce_9774, class stce_9771, typename>
struct stce_9777 : public stce_9769<stce_9767, typename stce_9774::data_t> {
  const stce_9773 stce_10133;
  const stce_9774 DCO_TEMPORARY_REFORCOPY stce_10135;
  typedef typename stce_9774::data_t data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t stce_10181;
  using stce_10182 = stce_9771;
  explicit stce_9777(const stce_9773& stce_10185, const stce_9774& stce_10186)
      : stce_9769<stce_9767, data_t>(stce_9771::stce_10183(stce_10185, stce_10186._value())), stce_10133(stce_10185),
        stce_10135(stce_10186) {}
  inline const stce_9767 stce_10114(const int stce_9811) const {
    return stce_9771::stce_10183(stce_10133, stce_10135.stce_10114(stce_9811));
  }
  inline const stce_9767 stce_10136() const {
    return stce_9771::stce_10188(this->stce_9914, stce_10133, stce_10135._value());
  }
};
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
template <typename stce_9778> struct passive_value_type_of {
  typedef stce_9778 TYPE;
};
template <typename stce_9778> class stce_10189 {
protected:
  stce_9778 stce_9914;

public:
  stce_10189() : stce_9914(0.0) {}
  template <typename stce_9881> stce_10189(const stce_9881& stce_9808) : stce_9914(stce_9808) {}
};
template <class stce_9767, class stce_9768> struct active_type : private stce_10189<stce_9767>, public stce_9768 {
  typedef stce_10189<stce_9767> stce_10190;
  using stce_10190::stce_9914;

public:
  typedef stce_9768 data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t stce_10181;
  typedef typename data_t::mode_t::scalar_passive_t stce_10191;

private:
  typedef typename data_t::mode_t::scalar_value_t stce_10192;

public:
  DCO_STRONG_INLINE const stce_9767& _value() const { return stce_9914; }
  stce_9768 const& data() const { return *static_cast<stce_9768 const*>(this); }
  stce_9768& data() { return *static_cast<stce_9768*>(this); }
  DCO_STRONG_INLINE stce_9767& _value() { return stce_9914; }
  DCO_STRONG_INLINE const stce_9767 stce_10114(const int stce_9811) const {
    return stce_9768::stce_10114(stce_9914, stce_9811);
  }
  DCO_STRONG_INLINE active_type() : stce_10190(static_cast<stce_9767>(0.0)), stce_9768() {}
  DCO_STRONG_INLINE active_type(const active_type& stce_10085)
      : stce_10190(stce_10085.stce_9914), stce_9768(stce_10085) {}
  template <typename stce_9778 = stce_9768>
  DCO_STRONG_INLINE
  operator typename dco::enable_if<is_gbcp_type<stce_9778>::value,
                                   typename stce_9917<active_type, stce_9778::gbcp_order>::stce_9899>::type() const {
    return stce_9917<active_type, stce_9778::gbcp_order>::value(*this);
  }
  template <typename stce_9778 = stce_9768>
  DCO_STRONG_INLINE
  operator typename dco::enable_if<is_gbcp_type<stce_9778>::value,
                                   typename stce_9917<active_type, stce_9778::gbcp_order>::stce_9803>::type() {
    return stce_9917<active_type, stce_9778::gbcp_order>::value(*this);
  }
  template <typename stce_9881, typename stce_9778 = stce_9768>
  DCO_STRONG_INLINE typename dco::enable_if<
      (dco::mode<stce_9881>::order > 0 && dco::internal::is_gbcp_type<stce_9778>::value &&
       dco::is_same<typename stce_9778::mode_t::active_t, typename dco::mode<stce_9881>::active_t>::value),
      active_type>::type&
  operator=(const stce_9881& stce_10143) {
    stce_9914 = stce_10143;
    return *this;
  }
  template <typename stce_9881, typename stce_9778 = stce_9768>
  DCO_STRONG_INLINE
  active_type(const stce_9881& stce_9846,
              typename dco::enable_if<
                  (dco::mode<stce_9881>::order > 0 && dco::internal::is_gbcp_type<stce_9778>::value &&
                   dco::is_same<typename stce_9778::mode_t::active_t, typename dco::mode<stce_9881>::active_t>::value),
                  void*>::type = NULL)
      : stce_10190(stce_9846) {}
  template <typename TYPE>
  DCO_STRONG_INLINE active_type(const TYPE& stce_9846, typename dco_type_constructable_from<TYPE>::type* = 0)
      : stce_10190(stce_9846) {}
  template <typename TYPE, typename stce_9778 = stce_9768,
            typename stce_10193 = typename enable_if<!is_gbcp_type<stce_9778>::value>::type,
            typename stce_10180 = typename enable_if<dco_explicit_type_cast_to<TYPE>::value>::type>
  explicit operator TYPE() const {
    return static_cast<TYPE>(_value());
  }
  template <typename TYPE>
  DCO_STRONG_INLINE active_type(
      const TYPE& stce_9846,
      typename dco::enable_if<stce_9886<typename TYPE::data_t::mode_t, typename data_t::mode_t>::value, void*>::type =
          NULL)
      : stce_10190(stce_9846) {}
  DCO_STRONG_INLINE active_type(const stce_10181& stce_9846) : stce_10190(stce_9846) {}
  template <typename scalar_passive_t>
  DCO_STRONG_INLINE active_type(const scalar_passive_t& stce_9846,
                                typename dco::enable_if<!dco::is_same<stce_10181, scalar_passive_t>::value &&
                                                            dco::is_same<stce_10191, scalar_passive_t>::value,
                                                        void*>::type = NULL)
      : stce_10190(stce_9846) {}
  DCO_STRONG_INLINE active_type& operator=(const active_type& stce_9808) {
    stce_9768::operator=(stce_9808);
    stce_9914 = stce_9808.stce_9914;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator=(const stce_10181& stce_10143) {
    this->stce_9914 = stce_10143;
    this->clear();
    return *this;
  }
  template <typename scalar_passive_t>
  DCO_STRONG_INLINE typename dco::enable_if<!dco::is_same<stce_10181, scalar_passive_t>::value &&
                                                dco::is_same<stce_10191, scalar_passive_t>::value,
                                            active_type>::type&
  operator=(const scalar_passive_t& stce_10143) {
    this->stce_9914 = stce_10143;
    this->clear();
    return *this;
  }
  template <class stce_10194, class stce_10195>
  DCO_STRONG_INLINE typename dco::enable_if<stce_9886<typename stce_10195::mode_t, typename data_t::mode_t>::value,
                                            active_type>::type&
  operator=(const active_type<stce_10194, stce_10195>& stce_10143) {
    stce_9914 = stce_10143;
    this->clear();
    return *this;
  }
  template <typename TYPE>
  DCO_STRONG_INLINE typename dco_type_constructable_from<TYPE, active_type>::type& operator=(const TYPE& stce_9846) {
    stce_9914 = stce_9846;
    this->clear();
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE
  active_type(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    this->stce_9913(stce_9808);
    this->stce_9914 = stce_9808.stce_9914;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    this->stce_9913(stce_9808);
    this->stce_9914 = stce_9808.stce_9914;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE
  active_type(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    this->stce_9913(stce_9808);
    this->stce_9914 = stce_9808.stce_9914;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    this->stce_9913(stce_9808);
    this->stce_9914 = stce_9808.stce_9914;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE
  active_type(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    this->stce_9913(stce_9808);
    this->stce_9914 = stce_9808.stce_9914;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    this->stce_9913(stce_9808);
    this->stce_9914 = stce_9808.stce_9914;
    return *this;
  }
  template <class stce_10137, class stce_10131>
  DCO_ALWAYS_INLINE active_type(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
    this->stce_9913(stce_9808);
    this->stce_9914 = stce_9808.stce_9914;
  }
  template <class stce_10137, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
    this->stce_9913(stce_9808);
    this->stce_9914 = stce_9808.stce_9914;
    return *this;
  }
  template <typename stce_9881, typename stce_9778 = stce_9768>
  DCO_ALWAYS_INLINE typename enable_if<
      (dco::mode<stce_9881>::order > 0 && dco::internal::is_gbcp_type<stce_9778>::value &&
       dco::is_same<typename stce_9778::mode_t::active_t, typename dco::mode<stce_9881>::active_t>::value),
      active_type>::type&
  operator+=(const stce_9881& stce_9808) {
    *this = *this + stce_9808;
    return *this;
  }
  template <class stce_10195>
  DCO_ALWAYS_INLINE active_type& operator+=(const active_type<stce_9767, stce_10195>& stce_9808) {
    *this = *this + stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator+=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this + stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator+=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this + stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator+=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this + stce_9808;
    return *this;
  }
  template <class stce_10137, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator+=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
    *this = *this + stce_9808;
    return *this;
  }
  DCO_ALWAYS_INLINE active_type& operator+=(const VALUE_TYPE& stce_9808) {
    this->_value() += stce_9808;
    return *this;
  }
  template <typename stce_9881, typename stce_9778 = stce_9768>
  DCO_ALWAYS_INLINE typename enable_if<
      (dco::mode<stce_9881>::order > 0 && dco::internal::is_gbcp_type<stce_9778>::value &&
       dco::is_same<typename stce_9778::mode_t::active_t, typename dco::mode<stce_9881>::active_t>::value),
      active_type>::type&
  operator-=(const stce_9881& stce_9808) {
    *this = *this - stce_9808;
    return *this;
  }
  template <class stce_10195>
  DCO_ALWAYS_INLINE active_type& operator-=(const active_type<stce_9767, stce_10195>& stce_9808) {
    *this = *this - stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator-=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this - stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator-=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this - stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator-=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this - stce_9808;
    return *this;
  }
  template <class stce_10137, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator-=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
    *this = *this - stce_9808;
    return *this;
  }
  DCO_ALWAYS_INLINE active_type& operator-=(const VALUE_TYPE& stce_9808) {
    this->_value() -= stce_9808;
    return *this;
  }
  template <typename stce_9881, typename stce_9778 = stce_9768>
  DCO_ALWAYS_INLINE typename enable_if<
      (dco::mode<stce_9881>::order > 0 && dco::internal::is_gbcp_type<stce_9778>::value &&
       dco::is_same<typename stce_9778::mode_t::active_t, typename dco::mode<stce_9881>::active_t>::value),
      active_type>::type&
  operator*=(const stce_9881& stce_9808) {
    *this = *this * stce_9808;
    return *this;
  }
  template <class stce_10195>
  DCO_ALWAYS_INLINE active_type& operator*=(const active_type<stce_9767, stce_10195>& stce_9808) {
    *this = *this * stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator*=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this * stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator*=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this * stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator*=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this * stce_9808;
    return *this;
  }
  template <class stce_10137, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator*=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
    *this = *this * stce_9808;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator*=(const VALUE_TYPE& stce_9808) {
    *this = *this * stce_9808;
    return *this;
  }
  template <typename stce_9881, typename stce_9778 = stce_9768>
  DCO_ALWAYS_INLINE typename enable_if<
      (dco::mode<stce_9881>::order > 0 && dco::internal::is_gbcp_type<stce_9778>::value &&
       dco::is_same<typename stce_9778::mode_t::active_t, typename dco::mode<stce_9881>::active_t>::value),
      active_type>::type&
  operator/=(const stce_9881& stce_9808) {
    *this = *this / stce_9808;
    return *this;
  }
  template <class stce_10195>
  DCO_ALWAYS_INLINE active_type& operator/=(const active_type<stce_9767, stce_10195>& stce_9808) {
    *this = *this / stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator/=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this / stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator/=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this / stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator/=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    *this = *this / stce_9808;
    return *this;
  }
  template <class stce_10137, class stce_10131>
  DCO_ALWAYS_INLINE active_type&
  operator/=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
    *this = *this / stce_9808;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator/=(const VALUE_TYPE& stce_9808) {
    *this = *this / stce_9808;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator++() {
    ++this->stce_9914;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator--() {
    --this->stce_9914;
    return *this;
  }
  DCO_STRONG_INLINE active_type operator++(int) {
    active_type stce_9836(*this);
    ++this->stce_9914;
    return stce_9836;
  }
  DCO_STRONG_INLINE active_type operator--(int) {
    active_type stce_9836(*this);
    --this->stce_9914;
    return stce_9836;
  }
};
template <class stce_9767, class stce_9768> struct passive_value_type_of<active_type<stce_9767, stce_9768>> {
  typedef typename passive_value_type_of<stce_9767>::TYPE TYPE;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_10196, typename stce_10197>
void assign_from_interop(stce_10196& stce_9835, stce_10197 const& stce_9834) {
  if (sizeof(stce_10196) > sizeof(stce_10197)) {
    throw dco::exception::create<std::runtime_error>("Internal: Using iterator interop type, which is too small.");
  }
  std::memcpy(reinterpret_cast<void*>(&stce_9835), &stce_9834, sizeof(stce_10196));
}
template <typename stce_10196, typename stce_10197>
static void assign_to_interop(stce_10196 const& stce_9834, stce_10197& stce_9835) {
  if (sizeof(stce_10196) > sizeof(stce_10197)) {
    throw dco::exception::create<std::runtime_error>("Internal: Using iterator interop type, which is too small.");
  }
  std::memcpy(&stce_9835, reinterpret_cast<void const*>(&stce_9834), sizeof(stce_10196));
}
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
template <class stce_9983, memory_model::TYPE stce_10198>
class stce_9985<memory_model::BLOB_TAPE_SPLINT, stce_9983, stce_10198> : public stce_9929<stce_9983>, object_logger {
  typedef stce_9929<stce_9983> stce_9939;

public:
  typedef typename stce_9790<stce_9983>::type stce_10199;
  enum stce_10200 { stce_10201, stce_10202 };
  struct entry {
    stce_10199* stce_10203;
    index_t* stce_10204;
    DCO_ALWAYS_INLINE entry(stce_10199* stce_10205, index_t* stce_10206)
        : stce_10203(stce_10205), stce_10204(stce_10206){};
    DCO_ALWAYS_INLINE index_t arg() { return (*stce_10204 < 0) ? std::abs(*stce_10204) - 1 : *stce_10204; }
    DCO_ALWAYS_INLINE stce_10199& pval() { return *stce_10203; }
    DCO_ALWAYS_INLINE stce_10199 pval() const { return *stce_10203; }
    DCO_ALWAYS_INLINE bool stce_10011() { return *stce_10204 < 0; }
    DCO_ALWAYS_INLINE static bool stce_10011(index_t* stce_9837) { return *stce_9837 < 0; }
    DCO_ALWAYS_INLINE static index_t stce_10207(index_t stce_10080) { return -stce_10080 - 1; }
    static size_t size_of() { return sizeof(stce_10199) + sizeof(index_t); }
    bool operator>=(entry const& stce_9938) const { return stce_10203 >= stce_9938.stce_10203; }
  };
  class iterator {
  public:
    index_t stce_10208;
    entry stce_10209;
    template <typename stce_10197> void assign_from_interop(stce_10197 const& stce_9834) {
      internal::assign_from_interop(*this, stce_9834);
    }
    template <typename stce_10197> void assign_to_interop(stce_10197& stce_9835) const {
      internal::assign_to_interop(*this, stce_9835);
    }
    DCO_ALWAYS_INLINE const entry* operator->() const { return &stce_10209; }
    DCO_ALWAYS_INLINE entry* operator->() { return &stce_10209; }
    DCO_ALWAYS_INLINE const entry& operator*() const { return stce_10209; }
    DCO_ALWAYS_INLINE entry& operator*() { return stce_10209; }
    DCO_ALWAYS_INLINE void stce_10210() {
      stce_10209.stce_10203++;
      stce_10209.stce_10204--;
      if (stce_9752 && static_cast<void*>(stce_10209.stce_10203) >= static_cast<void*>(stce_10209.stce_10204)) {
        throw dco::exception::create<std::runtime_error>(
            "Blob tape (splint) container overflow. Allocate bigger blob or use chunk tape container instead.");
      }
    }
    DCO_ALWAYS_INLINE index_t stce_10211() { return ++stce_10208; }
    DCO_ALWAYS_INLINE explicit iterator() : stce_10208(-1), stce_10209(NULL, NULL) {}
    DCO_ALWAYS_INLINE explicit iterator(stce_10199* stce_10205, index_t* stce_10206, index_t index = index_t(-1))
        : stce_10208(index), stce_10209(stce_10205, stce_10206) {}
    DCO_ALWAYS_INLINE index_t index() const { return stce_10208; }
    DCO_ALWAYS_INLINE index_t& index() { return stce_10208; }
    bool stce_10011() const { return entry::stce_10011(stce_10209.stce_10204); }
    DCO_ALWAYS_INLINE void operator--() {
      if (entry::stce_10011(stce_10209.stce_10204))
        stce_10208--;
      stce_10209.stce_10203--;
      stce_10209.stce_10204++;
    }
    DCO_ALWAYS_INLINE iterator operator--(int) {
      iterator stce_10031(*this);
      operator--();
      return stce_10031;
    }
    DCO_ALWAYS_INLINE bool operator==(const iterator& stce_9938) const {
      return stce_10209.stce_10203 == stce_9938.stce_10209.stce_10203;
    }
    DCO_ALWAYS_INLINE bool operator!=(const iterator& stce_9938) const { return !operator==(stce_9938); }
    DCO_ALWAYS_INLINE bool operator<(const iterator& stce_9938) const {
      return stce_10209.stce_10203 < stce_9938.stce_10209.stce_10203;
    }
    DCO_ALWAYS_INLINE bool operator>=(const iterator& stce_9938) const { return !operator<(stce_9938); }
    DCO_ALWAYS_INLINE bool operator>(const iterator& stce_9938) const {
      return stce_10209.stce_10203 > stce_9938.stce_10209.stce_10203;
    }
    DCO_ALWAYS_INLINE bool operator<=(const iterator& stce_9938) const { return !operator>(stce_9938); }
  };
  class edge_inserter {
    iterator& stce_10212;
    index_t stce_10208;

  public:
    edge_inserter(iterator& current) : stce_10212(current), stce_10208(0) {}
    iterator& current() { return stce_10212; }
    edge_inserter& operator=(edge_inserter stce_9938) {
      swap(stce_9938);
      return *this;
    }
    index_t index() const { return stce_10208; }
    void swap(edge_inserter& stce_9938) {
      std::swap(stce_10212, stce_9938.stce_10212);
      std::swap(stce_10208, stce_9938.stce_10208);
    }
    DCO_ALWAYS_INLINE_IF_AGRESSIVE void insert(const index_t& stce_10080, const stce_10199& pval) {
      if (IS_DEBUG && stce_10212.index() < stce_10080) {
        throw dco::exception::create<std::runtime_error>(
            "DCO_DEBUG: tape index of read variable bigger than current progvarcounter.");
      }
      if (stce_10208 == 0) {
        stce_10212.stce_10210();
        new (stce_10212.stce_10209.stce_10203) stce_10199(pval);
        new (stce_10212.stce_10209.stce_10204) index_t(entry::stce_10207(stce_10080));
        stce_10208 = stce_10212.stce_10211();
        DCO_LOG(logDEBUG2) << "inserting first entry, index now = " << stce_10208 << "; pval = " << pval
                           << ", target = " << stce_10080;
        return;
      }
      if (stce_9754 && stce_10080 == *(stce_10212.stce_10209.stce_10204)) {
        *(stce_10212.stce_10209.stce_10203) += pval;
        return;
      }
      stce_10212.stce_10210();
      new (stce_10212.stce_10209.stce_10203) stce_10199(pval);
      new (stce_10212.stce_10209.stce_10204) index_t(stce_10080);
    }

  private:
    edge_inserter(const edge_inserter& stce_9938);
  };

protected:
  void init(tape_options const& stce_9946, index_t stce_10213 = 0) {
    stce_9945 = stce_9946;
    size_t stce_10214;
    if (stce_9946.write_to_file())
      stce_10214 = stce_9946.blob_size_in_byte();
    else
      stce_10214 = get_allocation_size(stce_9946.blob_size_in_byte());
    size_t stce_10215 = stce_10214 / entry::size_of();
    DCO_LOG(logDEBUG1) << "BLOB SPLINT container: user requested allocation size = " << stce_10214
                       << "; size of element = " << entry::size_of() << "; max elements in memory = " << stce_10215;
    if (static_cast<double>(stce_10215) / static_cast<double>(std::numeric_limits<DCO_INTEGRAL_TAPE_INT>::max()) >
        1.0) {
      stce_10215 = std::numeric_limits<index_t>::max();
      DCO_LOG(logDEBUG1)
          << "BLOB SPLINT container: too many elements requested for currently used index_t. Setting to: "
          << stce_10215 * 1.e-6 << "M elements";
    }
    index_t stce_10216 = static_cast<index_t>(stce_10215);
    size_t stce_10217 = stce_10216 * entry::size_of();
    DCO_LOG(logDEBUG) << "BLOB SPLINT container: trying allocation for = " << stce_10217 / 1024 << "K ~=~ "
                      << stce_10216 * 1.e-6 << "M elements";
    stce_9930 = stce_1000001(&stce_10217, stce_9946.alloc_use_huge_pages());
    if (!stce_9930) {
      std::string stce_10218 = "";
      if (stce_9946.alloc_use_huge_pages()) {
        stce_10218 =
            " You are using huge pages; have you prepared your system correspondingly (see documentation as well)?";
      }
      throw dco::exception::create<std::runtime_error>("Could not allocate memory. Use environment variables "
                                                       "(DCO_MEM_RATIO, DCO_MAX_ALLOCATION) and see documentation." +
                                                       stce_10218);
    }
    stce_10216 = static_cast<index_t>(stce_10217 / entry::size_of());
    DCO_LOG(logINFO) << "BLOB SPLINT container: actually allocated size = " << stce_10217 / 1024 << "K ~=~ "
                     << stce_10216 * 1.e-6 << "M elements";
    stce_10219 = static_cast<stce_10199*>(stce_9930);
    stce_10220 = static_cast<index_t*>(stce_9930) + stce_10217 / sizeof(index_t) - 1;
    stce_10212 = iterator(stce_10219, stce_10220, stce_10213);
    stce_10221 = iterator(stce_10219, stce_10220, stce_10213);
    stce_10222 =
        iterator(stce_10219 + stce_10216 - 1, stce_10220 - stce_10216 + 1, std::numeric_limits<index_t>::max());
    if (static_cast<std::size_t>(reinterpret_cast<char*>(stce_10220) - reinterpret_cast<char*>(stce_10219)) <
        entry::size_of()) {
      dco::dealloc(stce_9930);
      throw dco::exception::create<std::runtime_error>(
          "Blob/chunk size too small. Use bigger blob/chunk size (at least " + std::to_string(entry::size_of()) +
          " bytes).");
    }
    new (stce_10212.stce_10209.stce_10203) stce_10199(static_cast<stce_10199>(0.0));
    new (stce_10212.stce_10209.stce_10204) index_t(entry::stce_10207(0));
  }

public:
  DCO_ALWAYS_INLINE explicit stce_9985(tape_options const& stce_9946, stce_9983& tape)
      : stce_9939(tape), object_logger("BLOB SPLINT container"), stce_9930(0), stce_10219(0), stce_10220(0),
        stce_10212(), stce_10221(), stce_10222(), stce_10223(stce_10202) {
    assert(stce_10198 != memory_model::stce_9766);
    init(stce_9946);
  }
  DCO_ALWAYS_INLINE explicit stce_9985(iterator& stce_9826, stce_9983& tape)
      : stce_9939(tape), object_logger("BLOB SPLINT container"), stce_9930(0), stce_10219(0), stce_10220(0),
        stce_10212(stce_9826), stce_10221(), stce_10222(), stce_10223(stce_10202) {
    assert(stce_10198 == memory_model::stce_9766);
  }
  DCO_ALWAYS_INLINE explicit stce_9985(stce_9985& stce_9834, stce_10200 stce_10224)
      : stce_9939(stce_9834), object_logger("BLOB SPLINT container"), stce_9930(0), stce_10219(0), stce_10220(0),
        stce_10212(), stce_10221(), stce_10222(), stce_10223(stce_10224) {
    if (stce_10224 == stce_10201) {
      stce_9930 = stce_9834.stce_9930;
      stce_10219 = stce_9834.stce_10219;
      stce_10220 = stce_9834.stce_10220;
      stce_10212 = iterator(stce_9834.stce_10219, stce_9834.stce_10220, stce_9834.current().index());
      stce_10221 = stce_10212;
      stce_10222 = stce_9834.stce_10222;
    } else {
      init(stce_9834.stce_9946());
    }
  }
  DCO_ALWAYS_INLINE ~stce_9985() {
    if (stce_10223 == stce_10202) {
      dco::dealloc(stce_9930);
    }
  }
  iterator start() { return stce_10221; }
  iterator start() const { return stce_10221; }
  iterator end() { return stce_10222; }
  iterator end() const { return stce_10222; }
  iterator rend() { return start(); }
  iterator current() const { return stce_10212; }
  iterator current() { return stce_10212; }
  iterator& current_ref() { return stce_10212; }
  iterator& insert_ref() { return stce_10212; }
  iterator rbegin() const { return current(); }
  bool empty() const { return stce_10212 == start(); }
  index_t size(const iterator& stce_9834, const iterator& stce_9835) const {
    if (stce_9834 < stce_9835)
      throw dco::exception::create<std::runtime_error>("size from < to");
    return static_cast<index_t>(stce_9834->stce_10203 - stce_9835->stce_10203);
  }
  index_t size(iterator stce_9834) const { return size(stce_9834, start()); }
  index_t size() const { return size(current(), start()); }
  index_t stce_10225() const { return size(stce_10222, start()); }
  size_t size_in_byte() const { return size(current(), start()) * entry::size_of(); }
  size_t stce_10226() const { return size(stce_10222, start()) * entry::size_of(); }
  void erase(const iterator& stce_9837) {
    if (!stce_10219)
      return;
    if (stce_9837 > stce_10222)
      throw dco::exception::create<std::runtime_error>("pos behind stack!");
    if (stce_9837 > stce_10212)
      throw dco::exception::create<std::runtime_error>("reset to position out of tape!");
    stce_10212 = stce_9837;
  }
  void erase() { stce_10212 = stce_10221; }
  void stce_10227(const iterator&) {}
  void stce_10228() {}
  index_t stce_10229() const { return stce_10212.index() + 1; }
  void stce_10230(stce_9985 const* const stce_9938) { current_ref().index() = stce_9938->current().index(); }
  tape_options stce_9946() const { return stce_9945; }
  char* stce_10231() { return reinterpret_cast<char*>(stce_9930); }
  std::size_t stce_10232() {
    return std::abs(reinterpret_cast<char*>(stce_10219) - reinterpret_cast<char*>(stce_10220));
  }

private:
  stce_9985(const stce_9985& stce_9938);
  void* stce_9930;
  stce_10199* stce_10219;
  index_t* stce_10220;

protected:
  typename stce_9830<iterator, stce_10198 == memory_model::stce_9766>::type stce_10212;
  iterator stce_10221;
  iterator stce_10222;
  tape_options stce_9945;
  stce_10200 stce_10223;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9983, memory_model::TYPE stce_10198>
class stce_9985<memory_model::BLOB_TAPE, stce_9983, stce_10198> : public stce_9929<stce_9983>, public object_logger {
  typedef stce_9929<stce_9983> stce_9939;
  typedef stce_9983 tape_t;

public:
  typedef typename stce_9790<stce_9983>::type stce_10199;
  enum stce_10200 { stce_10201, stce_10202 };
  struct entry {
    index_t stce_10138;
    stce_10199 stce_10120;

  public:
    static size_t size_of() { return sizeof(entry); }
    entry(index_t arg = 0, stce_10199 const& pval = stce_10199(0.)) : stce_10138(arg), stce_10120(pval) {}
    DCO_STRONG_INLINE index_t arg() const { return (stce_10138 < 0) ? std::abs(stce_10138) - 1 : stce_10138; }
    DCO_STRONG_INLINE static index_t stce_10207(const index_t& arg) { return -arg - 1; }
    DCO_STRONG_INLINE bool stce_10011() const { return stce_10138 < 0; }
    DCO_STRONG_INLINE void stce_10233(const stce_10199& stce_9925) { stce_10120 += stce_9925; }
    DCO_STRONG_INLINE stce_10199 pval() const { return stce_10120; }
  };
  class iterator {
    entry* stce_10234;
    index_t stce_10208;
    entry const* stce_10235;

  public:
    template <class stce_10236> void assign_to_interop(stce_10236& stce_10007) const {
      assert(sizeof(iterator) <= sizeof(stce_10236));
      std::memcpy(&stce_10007, this, sizeof(iterator));
    }
    template <class stce_10236> void assign_from_interop(const stce_10236& stce_10007) {
      assert(sizeof(iterator) <= sizeof(stce_10236));
      std::memcpy(static_cast<void*>(this), &stce_10007, sizeof(iterator));
    }
    void stce_10237(index_t stce_9811) { stce_10208 = stce_9811; }
    void stce_10210() {
      stce_10234++;
      if (stce_10234 > stce_10235) {
        throw dco::exception::create<std::runtime_error>(
            "Blob tape container overflow. Allocate bigger blob or use chunk tape container instead.");
      }
    }
    index_t index() const { return stce_10208; }
    index_t& index() { return stce_10208; }
    index_t stce_10211() { return ++stce_10208; }
    void stce_10238(entry const* end) { stce_10235 = end; }
    explicit iterator(entry* stce_9837 = 0, index_t index = index_t(-1)) : stce_10234(stce_9837), stce_10208(index) {}
    void operator--() {
      if (stce_10234->stce_10011())
        stce_10208--;
      stce_10234--;
    }
    bool stce_10011() const { return stce_10234->stce_10011(); }
    iterator operator--(int) {
      iterator stce_10031(*this);
      operator--();
      return stce_10031;
    }
    entry* operator*() { return stce_10234; }
    entry* operator->() { return stce_10234; }
    entry* operator*() const { return stce_10234; }
    entry* operator->() const { return stce_10234; }
    bool operator==(const iterator& stce_9938) const { return stce_10234 == stce_9938.stce_10234; }
    bool operator!=(const iterator& stce_9938) const { return !operator==(stce_9938); }
    bool operator<(const iterator& stce_9938) const { return stce_10234 < stce_9938.stce_10234; }
    bool operator>=(const iterator& stce_9938) const { return !operator<(stce_9938); }
    bool operator>(const iterator& stce_9938) const { return stce_10234 > stce_9938.stce_10234; }
    bool operator<=(const iterator& stce_9938) const { return !operator>(stce_9938); }
    friend std::ostream& operator<<(std::ostream& stce_10239, const iterator& stce_10007) {
      stce_10239 << "(" << stce_10007.stce_10234 << ":" << stce_10007.stce_10208 << ")";
      return stce_10239;
    }
  };
  class edge_inserter {
    iterator& stce_10212;
    index_t stce_10208;

  public:
    edge_inserter(iterator& current) : stce_10212(current), stce_10208(0) {}
    iterator& current() { return stce_10212; }
    edge_inserter& operator=(edge_inserter stce_9938) {
      swap(stce_9938);
      return *this;
    }
    index_t index() const { return stce_10208; }
    void swap(edge_inserter& stce_9938) {
      std::swap(stce_10212, stce_9938.stce_10212);
      std::swap(stce_10208, stce_9938.stce_10208);
    }
    DCO_ALWAYS_INLINE_IF_AGRESSIVE void insert(const index_t& stce_10080, const stce_10199& pval) {
      if (IS_DEBUG && stce_10212.index() < stce_10080) {
        throw dco::exception::create<std::runtime_error>(
            "DCO_DEBUG: tape index of read variable bigger than current progvarcounter.");
      }
      if (stce_10208 == 0) {
        stce_10212.stce_10210();
        new (*stce_10212) entry(entry::stce_10207(stce_10080), pval);
        stce_10208 = stce_10212.stce_10211();
        return;
      }
      if (stce_9754 && stce_10080 == stce_10212->arg()) {
        stce_10212->stce_10233(pval);
        return;
      }
      stce_10212.stce_10210();
      new (*stce_10212) entry(stce_10080, pval);
    }

  private:
    edge_inserter(const edge_inserter& stce_9938);
  };
  explicit stce_9985(stce_9985& stce_9834, stce_10200 stce_10224)
      : stce_9939(stce_9834), object_logger("BLOB container"), stce_9930(0), stce_10212(), stce_10221(), stce_10222(),
        stce_10223(stce_10224), stce_9945(stce_9834.stce_9945) {
    if (stce_10224 == stce_10201) {
      stce_9930 = stce_9834.stce_9930;
      stce_10212 = iterator(stce_9930, stce_9834.current().index());
      stce_10221 = stce_10212;
      stce_10222 = stce_9834.stce_10222;
      stce_10212.stce_10238(*stce_10222);
    } else if (stce_10224 == stce_10202) {
      index_t stce_10215 = allocate(stce_9945);
      stce_10212 = iterator(stce_9930, (stce_9834.current().index()));
      stce_10221 = iterator(stce_9930, (stce_9834.current().index()));
      stce_10222 = iterator(stce_9930 + static_cast<DCO_INTEGRAL_TAPE_INT>(stce_10215) - 1,
                            std::numeric_limits<DCO_INTEGRAL_TAPE_INT>::max());
      stce_10212.stce_10238(*stce_10222);
      if (*stce_10222 - *stce_10221 < 1) {
        std::stringstream stce_10240;
        stce_10240 << 2 * sizeof(entry);
        dco::dealloc(stce_9930);
        throw dco::exception::create<std::runtime_error>(
            "Blob/chunk size too small. Use bigger blob/chunk size [at least " + stce_10240.str() + " bytes].");
      }
      new (*stce_10212) entry(entry::stce_10207(0));
    }
  }
  index_t allocate(const tape_options& stce_9946) {
    size_t stce_10217 = get_allocation_size(stce_9946.blob_size_in_byte());
    stce_9930 = static_cast<entry*>(stce_1000001(&stce_10217, stce_9946.alloc_use_huge_pages()));
    if (!stce_9930) {
      throw dco::exception::stce_9819<std::bad_alloc>("Could not allocate memory. Use environment variables "
                                                      "(DCO_MEM_RATIO, DCO_MAX_ALLOCATION) and see documentation.");
    }
    size_t stce_10241 = stce_10217 / entry::size_of();
    if (static_cast<double>(stce_10241) / static_cast<double>(std::numeric_limits<DCO_INTEGRAL_TAPE_INT>::max()) >
        1.0) {
      stce_10241 = std::numeric_limits<index_t>::max();
    }
    index_t stce_10215 = static_cast<index_t>(stce_10241);
    DCO_LOG(logINFO) << "BLOB container; size = " << stce_9946.blob_size_in_byte() << "b ~=~ "
                     << stce_9946.blob_size_in_byte() / entry::size_of() << "elements";
    DCO_LOG(logINFO) << "BLOB container; tried allocation size = " << stce_10217 << "b ~=~ "
                     << stce_10217 / entry::size_of() << "elements";
    DCO_LOG(logDEBUG) << "sizeof(entry) = " << sizeof(entry) << " == " << entry::size_of();
    return stce_10215;
  }
  void init(tape_options const& stce_9946) {
    index_t stce_10215 = allocate(stce_9946);
    stce_10212 = iterator(stce_9930, 0);
    stce_10221 = iterator(stce_9930, 0);
    stce_10222 = iterator(stce_9930 + static_cast<DCO_INTEGRAL_TAPE_INT>(stce_10215) - 1,
                          std::numeric_limits<DCO_INTEGRAL_TAPE_INT>::max());
    stce_10212.stce_10238(*stce_10222);
    if (*stce_10222 - *stce_10221 < 1) {
      std::stringstream stce_10240;
      stce_10240 << 2 * sizeof(entry);
      dco::dealloc(stce_9930);
      throw dco::exception::create<std::runtime_error>(
          "Blob/chunk size too small. Use bigger blob/chunk size (at least " + stce_10240.str() + " bytes).");
    }
    new (*stce_10212) entry(entry::stce_10207(0));
  }
  DCO_ALWAYS_INLINE explicit stce_9985(tape_options const& stce_9946, tape_t& tape)
      : stce_9939(tape), object_logger("BLOB container"), stce_9930(0), stce_10212(), stce_10221(), stce_10222(),
        stce_10223(stce_10202), stce_9945(stce_9946) {
    assert(stce_10198 != memory_model::stce_9766);
    init(stce_9946);
  }
  DCO_ALWAYS_INLINE explicit stce_9985(iterator& stce_9826, tape_t& tape)
      : stce_9939(tape), object_logger("BLOB container"), stce_9930(0), stce_10212(stce_9826), stce_10221(),
        stce_10222(), stce_10223(stce_10202), stce_9945(tape.stce_9946()) {
    assert(stce_10198 == memory_model::stce_9766);
  }
  DCO_ALWAYS_INLINE ~stce_9985() {
    if (stce_10223 == stce_10202)
      dco::dealloc(stce_9930);
  }
  char* stce_10231() { return reinterpret_cast<char*>(stce_9930); }
  std::size_t stce_10232() { return size() * sizeof(entry); }
  iterator current() const { return stce_10212; }
  iterator current() { return stce_10212; }
  iterator& insert_ref() { return stce_10212; }
  iterator& current_ref() { return stce_10212; }
  iterator start() { return stce_10221; }
  iterator start() const { return stce_10221; }
  iterator end() { return stce_10222; }
  iterator end() const { return stce_10222; }
  iterator rend() { return start(); }
  iterator rbegin() const { return current(); }
  bool empty() const { return stce_10212 == start(); }
  index_t size(const iterator& stce_9834, const iterator& stce_9835) const {
    if (stce_9834 < stce_9835)
      throw dco::exception::create<std::runtime_error>("size from < to");
    return static_cast<index_t>(*stce_9834 - *stce_9835);
  }
  tape_options stce_9946() const { return stce_9945; }
  index_t size(iterator stce_9834) const { return size(stce_9834, start()); }
  index_t size() const { return size(current(), start()); }
  index_t stce_10225() const { return size(stce_10222, start()); }
  size_t size_in_byte() const { return size(current(), start()) * sizeof(entry); }
  size_t stce_10226() const { return size(stce_10222, start()) * sizeof(entry); }
  void erase(const iterator& stce_9837) {
    if (!stce_9930)
      return;
    if (IS_DEBUG && stce_9837 > stce_10222)
      throw dco::exception::create<std::runtime_error>("pos behind stack!");
    if (stce_9837 > stce_10212)
      throw dco::exception::create<std::runtime_error>("reset to position out of tape!");
    stce_10212 = stce_9837;
    stce_10212.stce_10238(*stce_10222);
  }
  void erase() {
    if (!stce_9930)
      return;
    stce_10212 = stce_10221;
    stce_10212.stce_10238(*stce_10222);
  }
  void stce_10227(const iterator&) {}
  void stce_10228() {}
  index_t stce_10229() { return stce_10212.index() + 1; }

private:
  stce_9985(const stce_9985& stce_9938);
  entry* stce_9930;
  typename stce_9830<iterator, stce_10198 == memory_model::stce_9766>::type stce_10212;
  iterator stce_10221;
  iterator stce_10222;
  stce_10200 stce_10223;
  tape_options stce_9945;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9983, typename stce_10242> class stce_10243 : public stce_10242 {
  using stce_10244 = stce_10242;
  using tape_t = stce_9983;

public:
  using iterator_t = typename stce_10244::iterator;
  using stce_10245 = typename stce_10244::edge_inserter;
  using stce_10246 = typename stce_10244::entry;

private:
  index_t stce_10247;
  tape_options stce_9945;
  bool stce_10248;
  stce_10243 *stce_10249, *stce_10250;
  index_t stce_10251;
  static void stce_10252(const std::string& stce_10253, char* data, std::size_t size) {
    DCO_LOG(logDEBUG1) << "save_data_to_file: bytes to write = " << size << ", fname = " << stce_10253;
    std::ofstream out(stce_10253.c_str(), std::ios_base::out | std::ios_base::trunc | std::ios_base::binary);
    if (!out.is_open())
      throw dco::exception::create<std::runtime_error>("Could not open file, perhaps index corruption?");
    if (!out.good())
      throw dco::exception::create<std::runtime_error>("File could be opened, but got corrupted afterwards.");
    out.write(data, size);
    if (!out.good())
      throw dco::exception::create<std::runtime_error>("Reading the chunk failed, container corrupted.");
    out.close();
  }
  static index_t stce_10254(const std::string& stce_10253, char* data) {
    struct stat stce_10255;
    if (stat(stce_10253.c_str(), &stce_10255) == -1)
      throw dco::exception::create<std::runtime_error>("Could not check file size, perhaps index corruption?");
    index_t size = static_cast<index_t>(stce_10255.st_size);
    std::ifstream in(stce_10253.c_str(), std::ios_base::in | std::ios_base::binary);
    if (!in.is_open())
      throw dco::exception::create<std::runtime_error>("Could not open file, perhaps index corruption?");
    if (!in.good())
      throw dco::exception::create<std::runtime_error>("File could be opened, but got corrupted afterwards.");
    in.read(data, size);
    if (!in.good())
      throw dco::exception::create<std::runtime_error>("Reading the chunk failed, container corrupted.");
    in.close();
    return size;
  }

public:
  std::string stce_10256() {
    std::stringstream stce_10253;
    stce_10253 << stce_9945.filename() << '.' << stce_10247;
    return stce_10253.str();
  }
  DCO_ALWAYS_INLINE stce_10243(stce_10243* stce_10257, typename stce_10244::stce_10200 stce_10258)
      : stce_10244(*stce_10257, stce_10258), stce_10247(stce_10257->stce_10247 + 1), stce_9945(stce_10257->stce_9946()),
        stce_10248(true), stce_10249(stce_10257), stce_10250(0), stce_10251(-1) {}
  DCO_ALWAYS_INLINE stce_10243(tape_options stce_9946, tape_t& tape)
      : stce_10244(stce_9946, tape), stce_10247(0), stce_9945(stce_9946), stce_10248(true), stce_10249(0),
        stce_10250(0), stce_10251(-1) {}
  void stce_10259() {
    if (stce_9945.write_to_file()) {
      DCO_LOG(logDEBUG1) << "wake_up: Waking up chunk " << stce_10247 << " | " << &this->stce_9931()
                         << " from sleep (reading from file).";
      stce_10254(stce_10256(), this->stce_10231());
      DCO_LOG(logDEBUG3) << "wake_up: current partial = " << this->current()->pval();
      stce_10260(true);
    } else {
      DCO_LOG(logDEBUG1) << "wake_up: waking already awake chunk " << stce_10247 << " | " << &this->stce_9931();
    }
  }
  void sleep() {
    DCO_LOG(logDEBUG1) << "sleep: chunk " << stce_10247 << " | " << this->stce_10231() << " dirty = " << stce_10261();
    if (stce_9945.write_to_file() && stce_10261()) {
      if (!stce_10262()) {
        throw dco::exception::create<std::runtime_error>("Internal error: Writing chunk, which is not awake.");
      }
      const std::size_t stce_10263 = this->stce_10232();
      char* data = this->stce_10231();
      DCO_LOG(logDEBUG1) << "sleep: writing chunk " << stce_10247 << " | " << data << " | " << stce_10263;
      DCO_LOG(logDEBUG3) << "sleep: current partial = " << this->current()->pval();
      stce_10252(stce_10256(), data, stce_10263);
      stce_10264();
    } else {
      if (!stce_10261()) {
        DCO_LOG(logDEBUG1) << "sleep: not writing data for chunk: " << stce_10247;
      }
    }
    stce_10260(false);
  }
  void stce_10265(stce_10243* stce_10266) {
    if (!stce_10262()) {
      DCO_LOG(logDEBUG1) << "activate: chunk " << stce_10247 << " not awake yet.";
      stce_10243* stce_10267 = stce_10266;
      while (stce_10267 && !stce_10267->stce_10262()) {
        stce_10267 = stce_10267->stce_10257();
      }
      if (!stce_10267) {
        stce_10267 = stce_10266;
      }
      while (stce_10267 && !stce_10267->stce_10262()) {
        stce_10267 = stce_10267->stce_10268();
      }
      if (stce_10267) {
        DCO_LOG(logDEBUG1) << "activate: currently awake " << stce_10267->stce_10247;
        stce_10267->sleep();
      }
      stce_10259();
    }
  }
  DCO_ALWAYS_INLINE ~stce_10243() {
    if (stce_9946().write_to_file())
      std::remove(stce_10256().c_str());
  }
  index_t size(const iterator_t& stce_9834, const iterator_t& stce_9835) const {
    return stce_10244::size(stce_9834, stce_9835);
  }
  index_t size(iterator_t stce_9834) const { return stce_10244::size(stce_9834, this->start()); }
  index_t size() const { return stce_10244::size(this->current(), this->start()); }
  index_t stce_10225() const {
    if (!stce_10262())
      return 0;
    return stce_10244::stce_10225();
  }
  size_t size_in_byte() const { return stce_10244::size(this->current(), this->start()) * stce_10246::size_of(); }
  size_t stce_10226() const {
    if (!stce_10262()) {
      return 0;
    }
    return stce_10244::stce_10225() * stce_10246::size_of();
  }
  tape_options stce_9946() const { return stce_9945; }
  bool stce_10262() const { return stce_10248; }
  void stce_10260(bool stce_10269) { stce_10248 = stce_10269; }
  void stce_10264() { stce_10251 = size(); }
  void stce_10270() { stce_10251 = -1; }
  bool stce_10261() { return stce_10251 != size(); }
  index_t id() const { return stce_10247; }
  stce_10243*& stce_10257() { return stce_10249; }
  stce_10243*& stce_10268() { return stce_10250; }
  stce_10243 const* stce_10257() const { return stce_10249; }
  stce_10243 const* stce_10268() const { return stce_10250; }
};
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
template <typename stce_9983, memory_model::TYPE stce_10198>
class stce_9985<memory_model::CHUNK_TAPE, stce_9983, stce_10198> : public stce_9929<stce_9983>, object_logger {
  using tape_t = stce_9983;
  using stce_10271 = stce_9929<tape_t>;
  using stce_10272 = stce_9985<memory_model::BLOB_TAPE_SPLINT, tape_t>;
  using stce_10243 = typename internal::stce_10243<tape_t, stce_10272>;
  using stce_10273 = typename stce_10243::iterator_t;

public:
  using stce_10199 = typename stce_9790<tape_t>::type;
  using entry = typename stce_10272::entry;

public:
  class iterator : private stce_10273 {
    stce_10243* stce_10274;

  public:
    using stce_10273::operator->;
    using stce_10273::index;
    using stce_10273::stce_10011;
    using stce_10273::stce_10211;
    stce_10243* stce_10275() const { return stce_10274; }
    stce_10243*& stce_10275() { return stce_10274; }
    stce_10273& stce_10276() { return *this; }
    stce_10273 const& stce_10276() const { return *this; }
    template <typename stce_10197> void assign_from_interop(stce_10197 const& stce_9834) {
      internal::assign_from_interop(*this, stce_9834);
    }
    template <typename stce_10197> void assign_to_interop(stce_10197& stce_9835) const {
      internal::assign_to_interop(*this, stce_9835);
    }
    explicit iterator() : stce_10273(), stce_10274() {}
    explicit iterator(stce_10273 const& stce_10007, stce_10243* stce_10275)
        : stce_10273(stce_10007), stce_10274(stce_10275) {}
    explicit iterator(stce_10243* stce_10275) : stce_10273(stce_10275->current()), stce_10274(stce_10275) {}
    iterator(const iterator& stce_9938) : stce_10273(stce_9938), stce_10274(stce_9938.stce_10274) {}
    iterator& operator=(const iterator& stce_10085) {
      stce_10273::operator=(stce_10085);
      stce_10274 = stce_10085.stce_10274;
      return *this;
    }
    void operator--() {
      stce_10273::operator--();
      if (stce_10274->start() == *this && stce_10274->id() > 0) {
        stce_10274 = stce_10274->stce_10257();
        stce_10274->stce_10265(stce_10274->stce_10268());
        stce_10273::operator=(stce_10274->current());
      }
    }
    iterator operator--(int) {
      iterator stce_10031(*this);
      operator--();
      return stce_10031;
    }
    bool operator==(iterator const& stce_9938) const {
      return stce_10273::operator==(stce_9938) && stce_10274 == stce_9938.stce_10274;
    }
    bool operator!=(iterator const& stce_9938) const { return !operator==(stce_9938); }
    bool operator<(iterator const& stce_9938) const {
      return stce_10274 == stce_9938.stce_10274 ? this->stce_10276() < stce_9938.stce_10276()
                                                : this->index() < stce_9938.index();
    }
    bool operator>=(iterator const& stce_9938) const { return !operator<(stce_9938); }
    bool operator>(iterator const& stce_9938) const {
      return stce_10274 == stce_9938.stce_10274 ? this->stce_10276() > stce_9938.stce_10276()
                                                : this->index() > stce_9938.index();
    }
    bool operator<=(iterator const& stce_9938) const { return !operator>(stce_9938); }
  };
  class edge_inserter : public stce_10243::stce_10245 {
    stce_10243*& stce_10277;
    stce_10273 stce_10222;

  public:
    DCO_ALWAYS_INLINE edge_inserter(iterator& stce_9826)
        : stce_10243::stce_10245(stce_9826.stce_10276()), stce_10277(stce_9826.stce_10275()),
          stce_10222(stce_10277->end()) {}
    DCO_ALWAYS_INLINE_IF_AGRESSIVE void insert(const index_t& stce_10080, const stce_10199& pval) {
      if (*this->current() >= *stce_10222) {
        DCO_LOG(logDEBUG1) << "insert: chunk full, updating current and getting next.";
        stce_10277->current_ref() = this->current();
        stce_10278(stce_10277);
        index_t index = this->current().index();
        this->current() = stce_10277->current();
        this->current().index() = index;
        stce_10222 = stce_10277->end();
      }
      stce_10243::stce_10245::insert(stce_10080, pval);
    }

  private:
    edge_inserter(const edge_inserter& stce_9938);
  };
  void init(tape_options const& stce_9946) {
    tape_options stce_10279 = stce_9946;
    stce_10279.blob_size_in_byte() = stce_9946.chunk_size_in_byte();
    stce_10280 = new stce_10243(stce_10279, stce_10271::stce_9931());
    stce_10212 = iterator(stce_10280);
  }
  explicit stce_9985(tape_options const& stce_9946, tape_t& tape)
      : stce_10271(tape), object_logger("CHUNK container (w/ options)"), stce_10280(0), stce_10212() {
    assert(stce_10198 != memory_model::stce_9766);
    init(stce_9946);
  }
  explicit DCO_ALWAYS_INLINE stce_9985(iterator& stce_9826, tape_t& tape)
      : stce_10271(tape), object_logger("CHUNK container (w/ options)"), stce_10280(0), stce_10212(stce_9826) {
    assert(stce_10198 == memory_model::stce_9766);
  }
  DCO_ALWAYS_INLINE ~stce_9985() {
    stce_10243* stce_10007 = stce_10280;
    while (stce_10007) {
      stce_10243* stce_10281 = stce_10007;
      stce_10007 = stce_10007->stce_10268();
      delete stce_10281;
    }
  }
  static void stce_10278(stce_10243*& stce_9826) {
    DCO_LOG(logDEBUG1) << "Current chunk: id = " << stce_9826->id() << ", raw data = " << stce_9826->stce_10231()
                       << "; current iterator: index = " << stce_9826->current().index();
    if (stce_9826->stce_9946().write_to_file()) {
      stce_9826->sleep();
      stce_9826->stce_10268() = new stce_10243(stce_9826, stce_10243::stce_10201);
    } else {
      if (!stce_9826->stce_10268()) {
        stce_9826->stce_10268() = new stce_10243(stce_9826, stce_10243::stce_10202);
      }
    }
    stce_9826 = stce_9826->stce_10268();
    DCO_LOG(logDEBUG1) << "New chunk: id = " << stce_9826->id() << ", raw data = " << stce_9826->stce_10231()
                       << "; current iterator: index = " << stce_9826->current().index();
  }
  iterator start() const { return iterator(stce_10280->start(), stce_10280); }
  iterator& current_ref() { return stce_10212; }
  iterator& insert_ref() { return stce_10212; }
  iterator current() const { return stce_10212; }
  bool empty() const { return current() == start(); }
  index_t size(const iterator& stce_9834, const iterator& stce_9835) const {
    assert(stce_9834 >= stce_9835);
    stce_10243* stce_10275 = stce_9834.stce_10275();
    if (stce_10275 == stce_9835.stce_10275()) {
      return stce_10275->size(stce_9834.stce_10276(), stce_9835.stce_10276());
    }
    index_t size = stce_10275->size(stce_9834.stce_10276());
    stce_10275 = stce_10275->stce_10257();
    while (stce_10275 && stce_10275 != stce_9835.stce_10275()) {
      DCO_LOG(logDEBUG2) << "size: Adding " << stce_10275->size() << " => size = " << size;
      size += stce_10275->size();
      stce_10275 = stce_10275->stce_10257();
    }
    size += stce_10275->size(stce_10275->end(), stce_9835.stce_10276());
    return size;
  }
  index_t size(iterator stce_9834) const { return size(stce_9834, start()); }
  index_t size() const { return size(current(), start()); }
  mem_long_t size_in_byte() const { return size(current(), start()) * stce_10243::stce_10246::size_of(); }
  index_t stce_10225() const {
    index_t size = 0;
    if (!stce_10280) {
      return size;
    }
    for (stce_10243* stce_10275 = stce_10280; stce_10275 != NULL; stce_10275 = stce_10275->stce_10268()) {
      size += stce_10275->stce_10225();
    }
    return size;
  }
  mem_long_t stce_10226() const {
    mem_long_t size = 0;
    if (!stce_10280) {
      return size;
    }
    for (stce_10243* stce_10275 = stce_10280; stce_10275 != NULL; stce_10275 = stce_10275->stce_10268()) {
      size += stce_10275->stce_10226();
    }
    return size;
  }
  void erase(const iterator& stce_9837) {
    if (stce_9837 > current()) {
      throw dco::exception::create<std::invalid_argument>("erase: Given position outside of tape.");
    }
    stce_10212.stce_10275()->current_ref() = stce_10212.stce_10276();
    DCO_LOG(logDEBUG1) << "Erase chunk tape...";
    stce_10212.stce_10275() = stce_9837.stce_10275();
    stce_10212.stce_10275()->stce_10265(stce_10280);
    stce_10212.stce_10275()->stce_10270();
    stce_10243* stce_10007 = stce_9837.stce_10275()->stce_10268();
    if (stce_10212.stce_10275()->stce_9946().write_to_file() ||
        stce_10212.stce_10275()->stce_9946().deallocation_on_reset()) {
      stce_10212.stce_10275()->stce_10268() = nullptr;
      while (stce_10007) {
        stce_10243* stce_10281 = stce_10007;
        stce_10007 = stce_10007->stce_10268();
        delete stce_10281;
      }
    } else {
      while (stce_10007) {
        stce_10007->erase();
        stce_10007->stce_10270();
        stce_10007 = stce_10007->stce_10268();
      }
    }
    stce_10212.stce_10275()->erase(stce_9837.stce_10276());
    stce_10212.stce_10276() = stce_10212.stce_10275()->current();
  }
  void stce_10227(iterator& stce_9826) {
    DCO_LOG(logDEBUG1) << "Chunk tape: Prepare interpretation; activate: " << stce_9826.stce_10275()->id()
                       << ", is awake = " << stce_9826.stce_10275()->stce_10262() << ".";
    stce_10212.stce_10275()->current_ref() = stce_10212.stce_10276();
    stce_9826.stce_10275()->stce_10265(stce_10280);
    stce_10212.stce_10276() = stce_10212.stce_10275()->current_ref();
  }
  void stce_10228() {
    DCO_LOG(logDEBUG1) << "Chunk tape: Prepare recording.";
    stce_10212.stce_10275()->current_ref() = stce_10212.stce_10276();
    stce_10212.stce_10275()->stce_10265(stce_10280);
    stce_10212.stce_10276() = stce_10212.stce_10275()->current_ref();
  }
  index_t stce_10229() { return current().index() + 1; }
  void stce_10230(stce_9985 const* const stce_9938) { current_ref().index() = stce_9938->current().index(); }

private:
  stce_10243* stce_10280;
  typename stce_9830<iterator, stce_10198 == memory_model::stce_9766>::type stce_10212;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <class stce_9983>
class stce_9985<memory_model::stce_9765, stce_9983> : public stce_9985<memory_model::CHUNK_TAPE, stce_9983> {
  typedef stce_9983 tape_t;

public:
  typedef typename stce_9790<stce_9983>::type stce_10199;
  typedef stce_9985<memory_model::CHUNK_TAPE, stce_9983> stce_10282;
  typedef typename stce_10282::entry entry;
  typedef typename stce_10282::edge_inserter edge_inserter;
  typedef typename stce_10282::iterator iterator;
  bool stce_10283, stce_10284, stce_10285, stce_10286;
  double stce_10287, stce_10288, stce_10289;
  std::vector<index_t> stce_10290;
  std::vector<stce_10199> stce_10291;
  std::vector<const void*> stce_10292;
  index_t stce_10293, stce_10294;
  struct stce_10295 {
    static std::string id() { return " gtas "; }
  };
  typedef logging<stce_10295> logger;
  explicit stce_9985(tape_options stce_9946, stce_9983& tape)
      : stce_10282(stce_9946, tape), stce_10283(false), stce_10284(false), stce_10285(false), stce_10286(false),
        stce_10287(1e-6), stce_10288(1e-6), stce_10289(0.0), stce_10293(0), stce_10294(-1) {}
  void stce_10296(log_level_enum level) {
    if (stce_10286 && level <= dco::logWARNING) {
      throw dco::exception::create<std::runtime_error>("Warning occured.");
    }
  }
  void stce_10297() {
    if (stce_10294 == stce_10293) {
      stce_10293++;
      throw dco::exception::create<std::runtime_error>("Event counter reached.");
    }
    stce_10293++;
  };
  void stce_10298(stce_10199 tangent, double stce_10299) {
    if (stce_10285) {
      double stce_10300 = ::fabs(tangent - stce_10299);
      log_level_enum stce_10301 = dco::logWARNING;
      if (stce_10300 < stce_10287) {
        stce_10301 = dco::logINFO;
      }
      logger(stce_10301).get_stream() << stce_10293 << ": fd vs. tangent check";
      logger(stce_10301).get_stream() << " delta = " << stce_10300 << " tangent = " << tangent
                                      << " finite differences = " << stce_10299;
      stce_10296(stce_10301);
    }
  }
  void stce_10302(double stce_10303, double stce_10304, double stce_10305) {
    const double stce_10306 = ::fabs(stce_10303 - stce_10304);
    const double stce_10307 = ::fabs(stce_10303 - stce_10305);
    log_level_enum stce_10301 = dco::logWARNING;
    if (stce_10306 < stce_10288) {
      stce_10301 = dco::logINFO;
    }
    logger(stce_10301).get_stream() << stce_10293 << ": Tangent/adjoint identity check:";
    logger(stce_10301).get_stream() << " tangent vs. adjoint = " << stce_10306;
    logger(stce_10301).get_stream() << "  <x_(1),x^(1)> = " << stce_10303;
    logger(stce_10301).get_stream() << "  <y_(1),y^(1)> = " << stce_10304;
    stce_10296(stce_10301);
    stce_10301 = dco::logWARNING;
    if (stce_10307 < stce_10287) {
      stce_10301 = dco::logINFO;
    }
    logger(stce_10301).get_stream() << " finite differences vs. adjoint = " << stce_10307;
    logger(stce_10301).get_stream() << "  <y_(1),y_{FD}^(1)> = " << stce_10305;
    stce_10296(stce_10301);
  }
  void stce_10308(const iterator& stce_9835) {
    assert(stce_10282::start() == stce_9835);
    stce_10282::stce_10308(stce_9835);
    stce_10290.clear();
    stce_10291.clear();
    stce_10292.clear();
    stce_10289 = 0;
  }
  void stce_10116(std::string stce_10309, const bool stce_9836, const bool stce_10113, const bool stce_10115) {
    if (!stce_10283) {
      stce_10297();
      return;
    }
    log_level_enum stce_10301 = dco::logWARNING;
    if (stce_9836 == stce_10113 && stce_9836 == stce_10115) {
      stce_10301 = dco::logINFO;
    }
    logger(stce_10301).get_stream() << stce_10293 << ": Branch check:" << stce_10309 << std::boolalpha
                                    << " at current value returns " << stce_9836 << ", at minus h " << stce_10113
                                    << ", and at plus h " << stce_10115;
    stce_10296(stce_10301);
    stce_10297();
  }
  template <class data_t> void stce_10310(const data_t* data, const double& tangent) {
    if (stce_10289 == 0) {
      stce_10292.push_back(data);
      stce_10290.push_back(data->_tape_index());
      stce_10291.push_back(tangent);
    }
  }
  template <typename stce_10311> void stce_10312() {
    double stce_10313 = 0;
    for (size_t stce_9853 = 0; stce_9853 < stce_10292.size(); ++stce_9853) {
      const stce_10311& stce_9826 = *static_cast<const stce_10311*>(stce_10292[stce_9853]);
      stce_10313 = std::max(stce_10313, std::fabs(stce_9826.stce_10314[0]));
    }
    const double stce_10315 = 1e-14;
    stce_10289 = std::sqrt(stce_10315) * stce_10313;
    for (size_t stce_9853 = 0; stce_9853 < stce_10292.size(); ++stce_9853) {
      const stce_10311& stce_9826 = *static_cast<const stce_10311*>(stce_10292[stce_9853]);
      stce_9826.stce_10314[0] -= stce_10289 * stce_9826.stce_9977;
      stce_9826.stce_10314[1] += stce_10289 * stce_9826.stce_9977;
    }
  }
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <class stce_9983, memory_model::TYPE stce_9984>
class stce_9985<memory_model::stce_9766, stce_9983, stce_9984>
    : public stce_9985<stce_9984, stce_9983, memory_model::stce_9766> {
public:
  typedef typename stce_9790<stce_9983>::type stce_10199;
  typedef stce_9985<stce_9984, stce_9983, memory_model::stce_9766> stce_10282;
  explicit stce_9985(tape_options stce_9946, stce_9983& tape) : stce_10282(stce_10212, tape), stce_10212() {
    stce_10282::init(stce_9946);
  }
  struct iterator : public stce_10282::iterator {
    iterator() : stce_10316(1), stce_10317(0) {}
    iterator(const typename stce_10282::iterator& stce_10318)
        : stce_10282::iterator(stce_10318), stce_10316(-1), stce_10317(-1) {}
    index_t stce_10316;
    index_t stce_10317;
    const index_t& max_dist() const { return stce_10316; }
    void stce_10319(const index_t& stce_10320) {
      stce_10316 = stce_10320 + 1;
      DCO_LOG(logDEBUG3) << " updating max dist: " << stce_10316;
    }
    const index_t& stce_10321() const { return stce_10317; }
    index_t stce_10211() {
      stce_10317++;
      return stce_10282::iterator::stce_10211();
    }
  };
  class edge_inserter : public stce_10282::edge_inserter {
    iterator& stce_10212;

  public:
    edge_inserter(iterator& current) : stce_10282::edge_inserter(current), stce_10212(current) {}
    iterator& current() { return stce_10212; }
    DCO_ALWAYS_INLINE void insert(const index_t& stce_10080, const stce_10199& pval) {
      DCO_LOG(logDEBUG4) << "target = " << stce_10080 << ", parametercounter = " << current().stce_10321()
                         << ", max dist = " << current().max_dist();
      index_t stce_10322 = current().index();
      stce_10282::edge_inserter::insert(stce_10080, pval);
      if (stce_10080 > current().stce_10321()) {
        index_t stce_10323 = stce_10322 - stce_10080 + 1;
        DCO_LOG(logDEBUG4) << "curdist = " << stce_10323;
        if (stce_10323 - current().max_dist() > 0) {
          current().stce_10319(stce_10323);
        }
      }
    }

  private:
    edge_inserter(const edge_inserter& stce_9938);
  };
  iterator current() const { return stce_10212; }
  iterator current() { return stce_10212; }
  iterator& current_ref() { return stce_10212; }
  iterator rbegin() const { return stce_10212; }
  index_t stce_10229() {
    using ::log;
    using ::pow;
    index_t max_dist = stce_10212.max_dist();
    bool stce_10324 = (max_dist & (max_dist - 1)) == 0;
    if (HAS_BITWISE_MODULO && !stce_10324) {
      index_t stce_10026 = static_cast<index_t>(floor(log(static_cast<double>(max_dist)) / log(2.0))) + 1;
      stce_10212.stce_10319((1 << stce_10026) - 1);
      DCO_LOG(logDEBUG2) << "rounding adjoint vector size to " << stce_10212.max_dist();
    }
    return stce_10212.stce_10321() + stce_10212.max_dist() + 1;
  }

private:
  iterator stce_10212;
};
} // namespace internal
namespace helper {
template <typename stce_9786, memory_model::TYPE stce_9787, typename external_adjoint_object_t>
struct stce_10013<internal::tape<memory_model::stce_9766, stce_9786, stce_9787>, external_adjoint_object_t> {
  typedef internal::tape<memory_model::stce_9766, stce_9786, stce_9787> tape_t;
  index_t stce_10325;
  index_t stce_10326;
  external_adjoint_object_t* stce_10327;
  stce_10013(external_adjoint_object_t* stce_10328)
      : stce_10325(std::numeric_limits<index_t>::max()), stce_10326(0), stce_10327(stce_10328) {}
  template <typename stce_9778> void register_input(const stce_9778& stce_9808) {
    index_t stce_9811 = stce_9808._tape_index();
    if (stce_9811 > stce_10327->tape()->current().stce_10321()) {
      stce_10325 = std::min(stce_10325, stce_9811);
    }
  }
  template <typename stce_9778> void register_output(const stce_9778& stce_10052) {
    stce_10326 = std::max(stce_10326, stce_10052._tape_index());
    if (stce_10325 != std::numeric_limits<index_t>::max()) {
      index_t max_dist = stce_10326 - stce_10325;
      if (max_dist > stce_10327->tape()->current_ref().max_dist()) {
        stce_10327->tape()->current_ref().stce_10319(max_dist);
      }
    }
  }
};
} // namespace helper
namespace internal {
template <typename stce_9791, typename stce_9983, memory_model::TYPE stce_9984>
class adjoint_vector_lazy<stce_9791, internal::stce_9985<memory_model::stce_9766, stce_9983, stce_9984>>
    : public adjoint_vector_lazy<stce_9791, internal::stce_9985<stce_9984, stce_9983, memory_model::stce_9766>> {
  typedef internal::stce_9985<memory_model::stce_9766, stce_9983, stce_9984> stce_9903;
  typedef typename stce_9903::stce_10282 stce_10282;
  typedef adjoint_vector_lazy<stce_9791, stce_10282> stce_10329;
  typedef typename stce_10329::stce_9760 stce_9760;

public:
  stce_9903& stce_9990;
  adjoint_vector_lazy(index_t size, stce_9903& tape, tape_options stce_9946)
      : stce_10329(size, static_cast<stce_10282&>(tape), stce_9946), stce_9990(tape), stce_10330(true), stce_10331(0) {}
  void init() {
    stce_10332 = stce_9990.current().stce_10321();
    if (HAS_BITWISE_MODULO) {
      stce_10333 = stce_9990.current().max_dist() - 1;
    } else {
      stce_10333 = stce_9990.current().max_dist();
    }
    stce_10334 = this->stce_9901.data() + stce_10332 + 1;
  }
  bool stce_9947(index_t stce_9948) const {
    if (stce_9948 > stce_9990.current().stce_10321()) {
      stce_9948 -= stce_9990.current().stce_10321();
      stce_9948 %= stce_9990.current().max_dist();
      stce_9948 += stce_9990.current().stce_10321() + 1;
    }
    return static_cast<index_t>(this->stce_9941) > stce_9948;
  }
  index_t stce_10335(index_t stce_9811) const {
    if (stce_9811 > stce_9990.current().stce_10321()) {
      stce_9811 -= stce_9990.current().stce_10321();
      stce_9811 %= stce_9990.current().max_dist();
      stce_9811 += stce_9990.current().stce_10321() + 1;
    }
    return stce_9811;
  }
  typename stce_10329::stce_9760& operator[](index_t stce_9811) {
    DCO_LOG(logDEBUG4) << "getting " << stce_9811;
    stce_9811 = stce_10335(stce_9811);
    DCO_LOG(logDEBUG4) << "matched to " << stce_9811;
    return stce_10329::operator[](stce_9811);
  }
  typename stce_10329::stce_9760 operator[](index_t stce_9811) const {
    DCO_LOG(logDEBUG4) << "getting " << stce_9811;
    stce_9811 = stce_10335(stce_9811);
    DCO_LOG(logDEBUG4) << "matched to " << stce_9811;
    return stce_10329::operator[](stce_9811);
  }
  stce_9760 at(index_t stce_9811) const { return stce_9947(stce_9811) ? (*this)[stce_9811] : 0; }
  stce_9760& at(const index_t stce_9811) {
    if (!stce_9947(stce_9811))
      this->resize(stce_9990.stce_10229());
    return (*this)[stce_9811];
  }
  void stce_9954(index_t stce_9811) {
    if (!stce_9947(stce_9811)) {
      DCO_LOG(logDEBUG2) << "Resizing internal adjoint vector to " << stce_9811;
      this->resize(stce_9990.stce_10229());
    }
  }
  template <typename iterator_t> void stce_9950(iterator_t& stce_9826) {
    index_t stce_9835 = stce_9826->arg();
    stce_9760 pval = stce_9826->pval();
    index_t stce_9834 = stce_9826.index();
    if (stce_10330) {
      DCO_LOG(logDEBUG3) << "setting " << stce_9834 << " to 0 ";
      stce_9760& stce_10336 = HAS_BITWISE_MODULO ? stce_10334[(stce_9834 - stce_10332) & stce_10333]
                                                 : stce_10334[(stce_9834 - stce_10332) % stce_10333];
      this->stce_10331 = stce_10336;
      stce_10336 = 0;
    }
    if (stce_9835 > stce_10332) {
      stce_9760& stce_10336 = HAS_BITWISE_MODULO ? stce_10334[(stce_9835 - stce_10332) & stce_10333]
                                                 : stce_10334[(stce_9835 - stce_10332) % stce_10333];
      stce_10336 += pval * this->stce_10331;
    } else {
      (*this)[stce_9835] += pval * this->stce_10331;
    }
    stce_10330 = stce_9826.stce_10011();
  }

private:
  stce_9760* stce_10334;
  index_t stce_10332;
  index_t stce_10333;
  bool stce_10330;
  stce_9760 stce_10331;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9788> struct stce_10337 {
public:
  typedef stce_9788 mode_t;
  typedef stce_10088 stce_10142;

private:
  static const size_t size = mode_t::p1f_size;
  typedef std::bitset<size> stce_10338;

public:
  typedef stce_10338 derivative_t;

private:
  mutable stce_10338 stce_10339;

public:
  stce_10337() {}
  DCO_STRONG_INLINE stce_10337(stce_10337 const& stce_10037) : stce_10339(stce_10037.stce_10339) {}
  DCO_STRONG_INLINE stce_10337& operator=(const stce_10337& stce_10085) {
    stce_10339 = stce_10085.stce_10339;
    return *this;
  }
  stce_10338& stce_9971() const { return stce_10339; }
  void clear() { stce_10339.reset(); }
  template <class stce_9912> DCO_ALWAYS_INLINE void stce_9913(const stce_9912& stce_10143) {
    stce_10337 stce_10031;
    stce_10340(stce_10143, stce_10031.stce_10339);
    stce_10339 = stce_10031.stce_10339;
  }
  typedef typename mode_t::value_t stce_9767;

private:
  template <class stce_10127>
  static void stce_10340(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808, stce_10338& stce_10080) {
    stce_10080 |= stce_9808.stce_10339;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static void stce_10340(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
                         stce_10338& stce_10080) {
    stce_10340(stce_9808.stce_10133, stce_10080);
    stce_10340(stce_9808.stce_10135, stce_10080);
  }
  template <class stce_10137, class stce_10131>
  static void stce_10340(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808,
                         stce_10338& stce_10080) {
    stce_10340(stce_9808.stce_10138, stce_10080);
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static void stce_10340(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
                         stce_10338& stce_10080) {
    stce_10340(stce_9808.stce_10133, stce_10080);
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static void stce_10340(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
                         stce_10338& stce_10080) {
    stce_10340(stce_9808.stce_10135, stce_10080);
  }
};
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
namespace stce_10341 {
template <typename stce_10342, typename adjoint_vector>
void stce_10343(stce_10342 stce_9826, stce_10342 stce_9835, const adjoint_vector& stce_10344,
                const std::string& filename = "tape.dot") {
  stce_10343(stce_9826, stce_9835, stce_10344, stce_9865(filename));
}
template <typename stce_10342, typename adjoint_vector>
void stce_10343(stce_10342 stce_9826, stce_10342 stce_9835, const adjoint_vector& stce_10344, stce_9865& stce_9866) {
  if (stce_9826.index() == stce_9835.index()) {
    return;
  } else if (stce_9826.index() < stce_9835.index()) {
    std::swap(stce_9826, stce_9835);
  }
  for (; stce_9826 != stce_9835; stce_9826--) {
    if (stce_9826->stce_10011()) {
      stce_9866.stce_9875(stce_9826.index(), stce_10344.at(stce_9826.index()));
    }
    stce_9866.stce_9877(stce_9826->arg(), stce_9826.index(), stce_9826->pval());
  }
  for (int stce_9853 = 0; stce_9853 <= stce_9826.index(); ++stce_9853) {
    stce_9866.stce_9875(stce_9853, stce_10344.at(stce_9853));
  }
}
template <typename stce_10342, typename adjoint_vector, typename stce_10345>
void stce_10343(stce_10342 stce_9826, stce_10342 stce_9835, const adjoint_vector& stce_10344,
                const stce_10345& stce_10346, stce_9865& stce_9866) {
  if (stce_9826.index() < stce_9835.index()) {
    std::swap(stce_9826, stce_9835);
  }
  stce_10343(stce_9826, stce_9835, stce_10344, stce_9866);
  typedef typename stce_10345::const_reverse_iterator stce_10347;
  for (stce_10347 stce_10007 = stce_10346.rbegin();
       stce_10007 != stce_10346.rend() && stce_9835 <= stce_10007->stce_10348(); ++stce_10007) {
    if (stce_9826 < stce_10007->stce_10348())
      continue;
    stce_10007->stce_10349()->stce_10019(stce_9866, stce_10007->stce_10348().index() + 1);
  }
}
template <typename stce_10342>
void stce_10350(stce_10342 stce_9826, stce_10342 stce_9835, std::string const& filename) {
  if (stce_9826.index() < stce_9835.index()) {
    std::swap(stce_9826, stce_9835);
  }
  std::ofstream stce_9816(filename.c_str());
  stce_9816 << stce_9826.index() << "\n";
  for (; stce_9826 != stce_9835; --stce_9826) {
    stce_9816 << stce_9826->arg() << ", " << stce_9826->pval() << "; ";
    if (stce_9826->stce_10011())
      stce_9816 << "\n";
  }
}
template <bool USE_SPARSE_INTERPRET, typename stce_10342, typename adjoint_vector, typename stce_10351>
DCO_STRONG_INLINE void interpret(stce_10342 stce_9826, const stce_10342& stce_9835, adjoint_vector& stce_10344,
                                 stce_10351 const& stce_10352) {
  using stce_10353 = typename dco::mode<typename adjoint_vector::stce_9940>::data_t;
  using stce_10354 = typename stce_10353::mode_t;
  static constexpr bool sparse_interpret =
      USE_SPARSE_INTERPRET || std::is_base_of<stce_10353, internal::stce_10337<stce_10354>>::value;
  stce_9826.index()--;
  stce_1000002();
  stce_10344.stce_9954(stce_9813(stce_9826.index()));
  stce_10344.init();
  for (; stce_9826 != stce_9835; --stce_9826) {
    if (sparse_interpret && folding::is_zero(stce_10344[stce_9826.index()])) {
      continue;
    }
    DCO_LOG(logDEBUG3) << stce_10344[stce_9826->arg()] << " <=> adj[" << stce_9826->arg()
                       << "] += " << stce_9826->pval() * stce_10344[stce_9826.index()] << " from idx "
                       << stce_9826.index();
    stce_10344.stce_9950(stce_9826);
    helper::stce_9841(int(), stce_10352, stce_9826->arg(), stce_9826->pval() * stce_10344[stce_9826.index()]);
  }
}
template <bool USE_SPARSE_INTERPRET, typename stce_10342, typename adjoint_vector, typename stce_10351>
DCO_STRONG_INLINE void stce_10355(stce_10342 stce_9826, const stce_10342& stce_9835, adjoint_vector& stce_10344,
                                  stce_10351 const& stce_10352) {
  using stce_10353 = typename dco::mode<typename adjoint_vector::stce_9940>::data_t;
  using stce_10354 = typename stce_10353::mode_t;
  static constexpr bool sparse_interpret =
      USE_SPARSE_INTERPRET || std::is_base_of<stce_10353, internal::stce_10337<stce_10354>>::value;
  stce_9826.index()--;
  stce_1000002();
  stce_10344.stce_9954(stce_9813(stce_9826.index()));
  stce_10344.init();
  for (; stce_9826 != stce_9835; --stce_9826) {
    if (sparse_interpret && folding::is_zero(stce_10344[stce_9826.index()])) {
      continue;
    }
    DCO_LOG(logDEBUG3) << stce_10344[stce_9826->arg()] << " <=> adj[" << stce_9826->arg()
                       << "] += " << stce_9826->pval() * stce_10344[stce_9826.index()] << " from idx "
                       << stce_9826.index();
    stce_10344.stce_9950(stce_9826);
    helper::stce_9841(int(), stce_10352, stce_9826->arg(), stce_9826->pval() * stce_10344[stce_9826.index()]);
    if (stce_9826->stce_10011()) {
      stce_10344[stce_9826.index()] = 0;
    }
  }
}
template <typename stce_10342, typename adjoint_vector>
DCO_STRONG_INLINE void stce_10356(stce_10342 stce_9826, const stce_10342& stce_9835, adjoint_vector& stce_10344) {
  stce_10344.stce_9954(stce_9826.index());
  for (; stce_9826 != stce_9835; --stce_9826) {
    std::cout << stce_9826.index() << ": " << stce_9826->arg() << ", " << stce_9826->pval() << ", "
              << stce_10344[stce_9826.index()] << std::endl;
  }
}
template <typename tape_t> DCO_STRONG_INLINE void stce_10356(const tape_t* tape) {
  typename tape_t::iterator stce_9826 = tape->get_position();
  for (; stce_9826 != tape->begin(); --stce_9826) {
    std::cout << stce_9826.index() << ": " << stce_9826->arg() << ", " << stce_9826->pval() << std::endl;
  }
}
} // namespace stce_10341
} // namespace internal
} // namespace dco

namespace dco {
template <typename tape_t> struct stce_10357 {
  typedef std::map<std::string, mem_long_t> stce_10358;
  stce_10358 stce_10359;
  tape_t* stce_9990;
  stce_10357(tape_t* tape) : stce_9990(tape) {
    stce_10359["max_tape_memory"] = 0;
    stce_10359["max_adjoint_memory"] = 0;
    stce_10359["max_checkpoint_memory"] = 0;
    stce_10359["max_total_memory"] = 0;
  }
  mem_long_t operator[](std::string stce_10360) { return stce_10359[stce_10360]; }
  void stce_10361() {
    mem_long_t stce_10362 = dco::size_of(stce_9990, tape_t::size_of_stack);
    if (stce_10362 > stce_10359["max_tape_memory"]) {
      stce_10359["max_tape_memory"] = stce_10362;
    }
    stce_10362 = dco::size_of(stce_9990, tape_t::size_of_internal_adjoint_vector);
    if (stce_10362 > stce_10359["max_adjoint_memory"]) {
      stce_10359["max_adjoint_memory"] = stce_10362;
    }
    stce_10362 = dco::size_of(stce_9990, tape_t::size_of_checkpoints);
    if (stce_10362 > stce_10359["max_checkpoint_memory"]) {
      stce_10359["max_checkpoint_memory"] = stce_10362;
    }
    stce_10359["max_total_memory"] = 0;
    for (stce_10358::iterator stce_9853 = stce_10359.begin(); stce_9853 != stce_10359.end(); ++stce_9853) {
      stce_10359["max_total_memory"] += stce_9853->second;
    }
  }
  mem_long_t stce_10363() { return stce_10359["max_tape_memory"]; }
};
} // namespace dco

struct stce_10364 {
  int stce_10365;

public:
  DCO_ALWAYS_INLINE stce_10364() : stce_10365(DCO_COMPATIBILITY_VERSION) {}
  DCO_ALWAYS_INLINE bool is_compatible(int stce_10366, bool stce_10356 = false) {
    if (stce_10356)
      dco::cout_diffs_in_version(stce_10366, stce_10365);
    return stce_10366 == stce_10365;
  }
};
namespace dco {
namespace internal {
template <memory_model::TYPE MEMORY_MODEL, typename stce_10367, memory_model::TYPE stce_9787>
class tape
    : public stce_10364,
      public dco::adjoint_vector_abstract<typename helper::vecsize_info<typename stce_10367::stce_9760>::stce_9857>,
      public stce_9985<MEMORY_MODEL, tape<MEMORY_MODEL, stce_10367, stce_9787>, stce_9787> {
public:
  typedef stce_10367 types_config_t;
  typedef stce_9985<MEMORY_MODEL, tape, stce_9787> stce_9903;
  typedef typename stce_9903::iterator iterator_t;
  typedef iterator_t position_t;
  typedef typename types_config_t::stce_9760 stce_9760;
  typedef typename types_config_t::stce_9759 stce_9759;
  typedef typename helper::vecsize_info<typename stce_10367::stce_9760>::stce_9857 stce_9940;
  typedef tape<MEMORY_MODEL, types_config_t, stce_9787> tape_t;
  typedef adjoint_vector_lazy<typename types_config_t::stce_9760, stce_9903> vector_t;
  vector_t stce_9901;
  stce_10357<tape> stce_10368;
  stce_10357<tape>& stce_10369() { return stce_10368; }
  const stce_10357<tape>& stce_10369() const { return stce_10368; }
  tape& get_tape() { return *this; }

private:
  bool stce_10370;
  bool stce_10371;
  struct stce_10372 {
    stce_10372() {}
    template <typename stce_9758> void operator()(index_t, stce_9758&&) const {}
  };
  static const stce_10372 stce_10373;
  index_t stce_9958;
  tape_options stce_9945;
  bool stce_10374;
  bool stce_10375;
  void stce_9963(const iterator_t& stce_9834, const iterator_t& stce_9835 = stce_9903::start()) {
    stce_9901.stce_9952(stce_9834.index(), stce_9835.index());
  }
  void stce_10376() {
    stce_9901.resize(this->stce_10229());
    stce_9901.stce_9955();
  }
  template <typename stce_10342, typename adjoint_vector, typename stce_10351>
  DCO_STRONG_INLINE void stce_10377(stce_10342 stce_9826, const stce_10342& stce_9835, adjoint_vector& stce_10344,
                                    stce_10351 const& stce_10352) {
    if (stce_10374) {
      dco::internal::stce_10341::interpret<true>(stce_9826, stce_9835, stce_10344, stce_10352);
    } else {
      dco::internal::stce_10341::interpret<false>(stce_9826, stce_9835, stce_10344, stce_10352);
    }
  }
  template <typename stce_10342, typename adjoint_vector, typename stce_10351>
  DCO_STRONG_INLINE void stce_10378(stce_10342 stce_9826, const stce_10342& stce_9835, adjoint_vector& stce_10344,
                                    stce_10351 const& stce_10352) {
    if (stce_10374) {
      dco::internal::stce_10341::stce_10355<true>(stce_9826, stce_9835, stce_10344, stce_10352);
    } else {
      dco::internal::stce_10341::stce_10355<false>(stce_9826, stce_9835, stce_10344, stce_10352);
    }
  }

public:
  const tape_options& stce_9946() const { return stce_9945; }
  bool stce_10379() { return this->start() == this->current(); }
  DCO_ALWAYS_INLINE tape(tape_options stce_9946 = tape_options())
      : stce_10364(), stce_9903(stce_9946, *this), stce_9901(1, *this, stce_9946), stce_10368(this), stce_10370(false),
        stce_10371(true), stce_9958(0), stce_9945(stce_9946), stce_10374(false), stce_10375(true) {}
  DCO_ALWAYS_INLINE ~tape() {
    for (typename std::vector<stce_10380>::iterator stce_10007 = stce_10381.begin(); stce_10007 != stce_10381.end();
         ++stce_10007) {
      stce_10007->stce_10382();
    }
  }
  bool is_active() const { return stce_9755 ? stce_10371 : true; }
  bool& sparse_interpret() { return stce_10374; }
  bool& scalar_callback_mode() { return stce_10375; }
  DCO_TAPE_INT current_vector_mode_index() { return stce_9958; }
  iterator_t current() const { return get_position(); }
  iterator_t begin() const { return stce_9903::start(); }
  vector_t& adjoints() { return stce_9901; }
  template <typename stce_9778>
  typename std::enable_if<dco::mode<stce_9778>::is_adjoint_type, stce_9760>::type& adjoint(stce_9778 const& stce_9808) {
    return stce_9901[stce_9808._tape_index()];
  }
  typedef helper::stce_10015<tape> stce_10383;
  static void stce_10384(stce_10383* stce_10163) { stce_10163->get_tape()->stce_10374 = true; }
  static void stce_10385(stce_10383* stce_10163) { stce_10163->get_tape()->stce_10374 = false; }
  void set_sparse_interpret() {
    if (stce_10374 == false) {
      stce_10383* stce_10163 = this->create_callback_object<stce_10383>();
      this->insert_callback(stce_10385, stce_10163);
    }
    stce_10374 = true;
  }
  void unset_sparse_interpret() {
    if (stce_10374 == true) {
      stce_10383* stce_10163 = this->create_callback_object<stce_10383>();
      this->insert_callback(stce_10384, stce_10163);
    }
    stce_10374 = false;
  }
  bool switch_to_active() {
    if (!stce_9755) {
      throw dco::exception::create<std::runtime_error>("activity check disabled but switched");
    }
    if (!stce_10371) {
      stce_10371 = true;
      return false;
    }
    return true;
  }
  bool switch_to_passive() {
    if (!stce_9755) {
      throw dco::exception::create<std::runtime_error>("activity check disabled but switched");
    }
    if (stce_10371) {
      stce_10371 = false;
      return true;
    }
    return false;
  }
  bool switch_to(bool stce_10386) {
    bool stce_10387 = stce_10371;
    stce_10371 = stce_10386;
    return stce_10387;
  }
  template <bool stce_10388> index_t stce_10389() {
    if (!stce_10388 && this->empty()) {
      return stce_9903::current_ref().stce_10211();
    } else {
      typename stce_9903::edge_inserter stce_10390(stce_9903::current_ref());
      stce_10390.insert(0, static_cast<typename stce_9903::stce_10199>(0.0));
      return stce_10390.index();
    }
  }
  template <typename stce_10087, typename stce_10163>
  void register_variable(internal::active_type<stce_10087, stce_10163> const& stce_9808) {
    internal::active_type<stce_10087, stce_10163>::register_variable(stce_9808, stce_10389<false>(), this);
  }
  template <typename stce_10087> void register_variable(std::vector<stce_10087> const& stce_9808) {
    this->register_variable(stce_9808.data(), stce_9808.size());
  }
  template <typename stce_10391> void register_variable(stce_10391 first, stce_10391 stce_10392) {
    while (first != stce_10392) {
      this->register_variable(*first++);
    }
  }
  template <typename stce_10391, typename stce_10393>
  void register_variable(stce_10391 stce_10394, stce_10391 stce_10395, stce_10393 stce_10396) {
    while (stce_10394 != stce_10395) {
      *stce_10396 = *stce_10394++;
      this->register_variable(*stce_10396++);
    }
  }
  template <typename stce_10087> void register_variable(stce_10087* stce_9808, size_t stce_9832) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9832; ++stce_9853) {
      stce_10087::register_variable(stce_9808[stce_9853], stce_10389<false>(), this);
    }
  }
  template <typename stce_10087> void register_output_variable(stce_10087& stce_9808) {
    typename stce_9903::edge_inserter stce_10390(stce_9903::current_ref());
    stce_10390.insert(dco::tape_index(stce_9808), static_cast<typename stce_9903::stce_10199>(1.0));
    dco::tape_index(stce_9808) = stce_10390.index();
  }
  template <typename stce_10087> void register_output_variable(std::vector<stce_10087>& stce_9808) {
    this->register_output_variable(stce_9808.data(), stce_9808.size());
  }
  template <typename stce_10087> void register_output_variable(stce_10087* stce_9808, size_t stce_9832) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9832; ++stce_9853) {
      this->register_output_variable(stce_9808[stce_9853]);
    }
  }
  template <typename stce_10391> void register_output_variable(stce_10391 first, stce_10391 stce_10392) {
    while (first != stce_10392) {
      this->register_output_variable(*first++);
    }
  }
  template <stce_9794 stce_10397, typename stce_9778, typename stce_9892>
  void register_output_variable(stce_9902<stce_10397, stce_9778, stce_9892> stce_9808) {
    for (size_t stce_9853 = 0; stce_9853 < stce_9808.size(); ++stce_9853) {
      this->register_output_variable(stce_9808[stce_9853]);
    }
  }
  void reset_to(const iterator_t& stce_9835) {
    stce_10308(stce_9835);
    stce_10398(stce_9835);
  }
  void reset() { reset_to(stce_9903::start()); }
  void interpret_adjoint(interpretation_settings stce_9961 = interpretation_settings()) {
    iterator_t stce_9835 = stce_9903::start();
    stce_9962(get_position(), stce_9835, stce_9961, stce_10373);
  }
  template <typename stce_10351 = decltype(stce_10373)>
  typename std::enable_if<!std::is_same<stce_10351, interpretation_settings>::value>::type
  interpret_adjoint(stce_10351 const& stce_10352 = stce_10373) {
    iterator_t stce_9835 = stce_9903::start();
    interpretation_settings stce_9961;
    stce_9962(get_position(), stce_9835, stce_9961, stce_10352);
  }
  template <typename stce_10351 = decltype(stce_10373)>
  void interpret_adjoint_to(const iterator_t& stce_9835, stce_10351 const& stce_10352 = stce_10373) {
    interpretation_settings stce_9961;
    stce_9962(get_position(), stce_9835, stce_9961, stce_10352);
  }
  template <typename stce_10351 = decltype(stce_10373)>
  void interpret_adjoint_from(const iterator_t& stce_9834, stce_10351 const& stce_10352 = stce_10373) {
    iterator_t stce_9835 = stce_9903::start();
    interpretation_settings stce_9961;
    stce_9962(stce_9834, stce_9835, stce_9961, stce_10352);
  }
  template <typename stce_10351 = decltype(stce_10373)>
  void interpret_adjoint_from_to(const iterator_t& stce_9834, const iterator_t& stce_9835,
                                 stce_10351 const& stce_10352 = stce_10373) {
    interpretation_settings stce_9961;
    stce_9962(stce_9834, stce_9835, stce_9961, stce_10352);
  }
  template <typename stce_10351 = decltype(stce_10373)>
  void interpret_adjoint_and_reset_to(const iterator_t& stce_9835, stce_10351 const& stce_10352 = stce_10373) {
    iterator_t stce_9834(get_position());
    interpretation_settings stce_9961;
    stce_9961.reset = true;
    stce_9961.stce_9921 = true;
    stce_9962(stce_9834, stce_9835, stce_9961, stce_10352);
    stce_10308(stce_9835);
    stce_10398(stce_9835);
  }
  template <typename stce_10351 = decltype(stce_10373)>
  void interpret_adjoint_and_zero_adjoints_to(const iterator_t& stce_9835, stce_10351 const& stce_10352 = stce_10373) {
    iterator_t stce_9834(get_position());
    interpretation_settings stce_9961;
    stce_9961.reset = false;
    stce_9961.stce_9921 = true;
    stce_9962(stce_9834, stce_9835, stce_9961, stce_10352);
  }
  template <typename stce_10351 = decltype(stce_10373)>
  void interpret_adjoint_and_zero_adjoints_from_to(const iterator_t& stce_9834, const iterator_t& stce_9835,
                                                   stce_10351 const& stce_10352 = stce_10373) {
    interpretation_settings stce_9961;
    stce_9961.reset = false;
    stce_9961.stce_9921 = true;
    stce_9962(stce_9834, stce_9835, stce_9961, stce_10352);
  }
  void zero_adjoints() {
    iterator_t stce_9835 = stce_9903::start();
    stce_9963(get_position(), stce_9835);
  }
  void zero_adjoints_to(const iterator_t& stce_9835) { stce_9963(get_position(), stce_9835); }
  void zero_adjoints_from(const iterator_t& stce_9834) {
    iterator_t stce_9835 = stce_9903::start();
    stce_9963(stce_9834, stce_9835);
  }
  void zero_adjoints_from_to(const iterator_t& stce_9834, const iterator_t& stce_9835) {
    stce_9963(stce_9834, stce_9835);
  }
  void stce_10308(const iterator_t& stce_9835) {
    bool alloc = stce_9901.stce_9947(stce_9835.index());
    stce_9901.resize(stce_9835.index() + 1);
    if (alloc) {
      stce_9901.stce_9955();
    }
    stce_9903::erase(stce_9835);
  }

public:
  iterator_t get_position() const { return stce_9903::current(); }
  stce_9940& stce_10399(const index_t tape_index) {
    stce_9760& stce_9927 = _adjoint(tape_index);
    stce_9940* stce_10400 = reinterpret_cast<stce_9940*>(&stce_9927);
    return stce_10400[stce_9958];
  }
  stce_9940 stce_10399(const index_t tape_index) const {
    stce_9760 stce_9927(_adjoint(tape_index));
    stce_9940* stce_10400 = reinterpret_cast<stce_9940*>(&stce_9927);
    return stce_10400[stce_9958];
  }
  stce_9760& _adjoint(index_t tape_index) {
    if (!stce_9901.stce_9947(get_position().index() + 1))
      stce_10376();
    return stce_9901[tape_index];
  }
  stce_9760 _adjoint(const index_t tape_index) const {
    return stce_9901.stce_9947(tape_index) ? stce_9901[tape_index] : 0;
  }
  enum stce_10401 {
    size_of_stack = 1,
    size_of_allocated_stack = 2,
    size_of_internal_adjoint_vector = 4,
    size_of_checkpoints = 8,
    stce_9890 = size_of_stack | size_of_internal_adjoint_vector
  };
  mem_long_t stce_10402() const {
    mem_long_t stce_10403 = 0;
    for (size_t stce_9853 = 0; stce_9853 < stce_10381.size(); stce_9853++) {
      stce_10403 += stce_10381[stce_9853].stce_10349()->size_in_byte();
    }
    return stce_10403;
  }
  mem_long_t stce_9891(const int stce_10404 = stce_9890) const {
    mem_long_t stce_10405 = 0;
    if (stce_10404 & size_of_allocated_stack) {
      stce_10405 += static_cast<size_t>(stce_9903::stce_10226());
    } else if (stce_10404 & size_of_stack) {
      stce_10405 += static_cast<size_t>(stce_9903::size_in_byte());
    }
    if (stce_10404 & size_of_internal_adjoint_vector) {
      stce_10405 += stce_9901.stce_9949();
    }
    if (stce_10404 & size_of_checkpoints) {
      stce_10405 += stce_10402();
    }
    return stce_10405;
  }
  static DCO_ALWAYS_INLINE tape_t* create(tape_options stce_9946 = tape_options()) {
    tape_t* tape = new tape_t(stce_9946);
    return tape;
  }
  static DCO_ALWAYS_INLINE void remove(tape_t*& tape) {
    if (tape == 0)
      return;
    delete tape;
    tape = 0;
  }
  virtual stce_9940 _read_adjoint(const index_t stce_9811) { return stce_10399(stce_9811); }
  virtual void _increment_adjoint(const index_t stce_9811, const stce_9940& stce_9927) {
    stce_10399(stce_9811) += stce_9927;
  }
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  template <typename stce_10406> class stce_10407 {
  public:
    typedef void (*stce_10408)(tape_t& stce_10409, const interpretation_settings& stce_10410, stce_10406* stce_10411);
    typedef void (*stce_10412)(tape_t& stce_10409, stce_10406* stce_10411);
    typedef void (*stce_10413)(stce_10406* stce_10411);
  };
  class stce_10414 {
  public:
    virtual void stce_10415(tape_t& stce_10409, const interpretation_settings& stce_10410,
                            callback_object_t* stce_10411) = 0;
    virtual ~stce_10414(){};
  };
  template <typename stce_10406> class stce_10416 : public stce_10414 {
  private:
    union {
      typename stce_10407<stce_10406>::stce_10413 stce_10417;
      typename stce_10407<stce_10406>::stce_10412 stce_10418;
      typename stce_10407<stce_10406>::stce_10408 stce_10419;
    } stce_10417;
    int stce_10420;

  public:
    stce_10416(typename stce_10407<stce_10406>::stce_10413 stce_10421) : stce_10420(0) {
      stce_10417.stce_10417 = stce_10421;
    }
    stce_10416(typename stce_10407<stce_10406>::stce_10412 stce_10421) : stce_10420(1) {
      stce_10417.stce_10418 = stce_10421;
    }
    stce_10416(typename stce_10407<stce_10406>::stce_10408 stce_10421) : stce_10420(2) {
      stce_10417.stce_10419 = stce_10421;
    }
    void stce_10415(tape_t& stce_10409, const interpretation_settings& stce_10410, callback_object_t* stce_10411) {
      stce_10406* stce_10422 = static_cast<stce_10406*>(stce_10411);
      switch (stce_10420) {
      case 0:
        stce_10417.stce_10417(stce_10422);
        break;
      case 1:
        stce_10417.stce_10418(stce_10409, stce_10422);
        break;
      case 2:
        stce_10417.stce_10419(stce_10409, stce_10410, stce_10422);
        break;
      default:
        if (helper::stce_9844) {
          throw dco::exception::create<std::runtime_error>(
              "Internal error: Unknown callback type. Please contact NAG.");
        }
        break;
      }
    }
    ~stce_10416() {}
  };
  class stce_10380 {
    callback_object_t* stce_10411;
    stce_10414* stce_10423;
    iterator_t stce_10424;

  public:
    stce_10380() = delete;
    stce_10380(const stce_10380& stce_10037) noexcept
        : stce_10411(stce_10037.stce_10411), stce_10423(stce_10037.stce_10423), stce_10424(stce_10037.stce_10424){};
    stce_10380& operator=(const stce_10380& stce_10037) noexcept {
      stce_10411 = stce_10037.stce_10411;
      stce_10423 = stce_10037.stce_10423;
      stce_10424 = stce_10037.stce_10424;
      return *this;
    }
    stce_10380(const iterator_t& stce_9837) : stce_10411(0), stce_10423(0), stce_10424(stce_9837) {}
    bool operator<(const stce_10380& stce_9938) const { return stce_10424 < stce_9938.stce_10424; }
    void stce_10382() {
      delete stce_10411;
      if (stce_10423)
        delete stce_10423;
    }
    template <typename stce_10406, typename stce_10425> void stce_10426(stce_10425 stce_10421) {
      if (stce_10423)
        throw dco::exception::create<std::runtime_error>(
            "Currently not supported to insert external_adjoint_object_bases twice.");
      stce_10423 = new stce_10416<stce_10406>(stce_10421);
    }
    callback_object_t*& stce_10349() { return stce_10411; }
    callback_object_t* stce_10349() const { return stce_10411; }
    iterator_t& stce_10348() { return stce_10424; }
    iterator_t stce_10348() const { return stce_10424; }
    void stce_10415(tape_t& stce_10409, const interpretation_settings& stce_10410) {
      if (stce_10423)
        stce_10423->stce_10415(stce_10409, stce_10410, stce_10411);
    }
  };
  std::vector<stce_10380> stce_10381;
  size_t number_of_callbacks() { return stce_10381.size(); }
  template <class stce_10427> void stce_10428(stce_10427* stce_10411) {
    stce_10381.emplace_back(stce_10380(stce_9903::current()));
    stce_10381.back().stce_10349() = stce_10411;
    stce_10411->set_tape(this);
    typedef typename stce_10427::active_t stce_9986;
    typedef dco::stce_10070::stce_10074<tape_t, stce_9986> stce_10429;
    stce_10429* stce_10069 = stce_10411;
    insert_callback(&dco::stce_10070::stce_10068<tape_t, stce_9986>, stce_10069);
  }
  template <class stce_10427, typename stce_10425> void insert_callback(stce_10425 stce_10423, stce_10427* stce_10163) {
    if (stce_10381.back().stce_10349() == stce_10163) {
      stce_10163->stce_10018();
      stce_10381.back().template stce_10426<stce_10427>(stce_10423);
      stce_10381.back().stce_10348() = stce_9903::current();
      stce_10389<true>();
    } else {
      throw dco::exception::create<std::runtime_error>(
          "please always insert most recently created external function object.");
    }
  }
  template <typename stce_10351> struct stce_10430 : helper::stce_10015<tape> {
    stce_10351 stce_10352;
    template <typename stce_10431>
    stce_10430(stce_10431&& stce_10352) : stce_10352(std::forward<stce_10431>(stce_10352)) {}
  };
  template <typename stce_10432> static auto stce_10433(stce_10432* stce_10163) -> decltype(stce_10163->stce_10352()) {
    stce_10163->stce_10352();
  }
  template <typename stce_10432>
  static auto stce_10433(stce_10432* stce_10163) -> decltype(stce_10163->stce_10352(*stce_10163->_adjoint_vector)) {
    stce_10163->stce_10352(*stce_10163->_adjoint_vector);
  }
  template <typename stce_10351> void insert_callback(stce_10351&& stce_9855) {
    using stce_10434 = stce_10430<typename std::decay<stce_10351>::type>;
    auto* stce_10163 = this->create_callback_object<stce_10434>(std::forward<stce_10351>(stce_9855));
    this->insert_callback(stce_10433<stce_10434>, stce_10163);
  }
  template <class stce_10427, typename... FCN_PARAMETERS>
  stce_10427* create_callback_object(FCN_PARAMETERS&&... parameters) {
    stce_10381.emplace_back(stce_10380(stce_9903::current()));
    stce_10427* stce_10411 = new stce_10427(std::forward<FCN_PARAMETERS>(parameters)...);
    stce_10381.back().stce_10349() = stce_10411;
    stce_10411->set_tape(this);
    return stce_10411;
  }
  template <class stce_10427> inline stce_10427* create_ACM_object() {
    stce_10427* stce_9836 = create_callback_object<stce_10427>();
    typedef typename stce_10427::active_t stce_9986;
    typedef dco::ACM::baseclass<tape_t, stce_9986> stce_10435;
    stce_10435* stce_10069 = stce_9836;
    insert_callback(&dco::ACM::stce_10068<tape_t, stce_9986>, stce_10069);
    return stce_9836;
  }
  template <class stce_10427, typename FCN_PARAMETERS>
  inline stce_10427* create_ACM_object(const FCN_PARAMETERS& parameters) {
    const stce_9862<FCN_PARAMETERS> stce_10436(parameters);
    stce_10380 stce_10437(stce_9903::current());
    stce_10381.push_back(stce_10437);
    stce_10427* stce_10411 = stce_10436.template create<stce_10427>();
    stce_10381.back().stce_10349() = stce_10411;
    stce_10411->set_tape(this);
    typedef typename stce_10427::active_t stce_9986;
    typedef dco::ACM::baseclass<tape_t, stce_9986> stce_10435;
    stce_10435* stce_10069 = stce_10411;
    insert_callback(&dco::ACM::stce_10068<tape_t, stce_9986>, stce_10069);
    return stce_10411;
  }
  template <class stce_10427> void insert_ACM_object(stce_10427* stce_10411) {
    stce_10380 stce_10437(stce_9903::current());
    stce_10381.push_back(stce_10437);
    stce_10381.back().stce_10349() = stce_10411;
    stce_10411->set_tape(this);
    typedef typename stce_10427::active_t stce_9986;
    typedef dco::ACM::baseclass<tape_t, stce_9986> stce_10435;
    stce_10435* stce_10069 = stce_10411;
    insert_callback(&dco::ACM::stce_10068<tape_t, stce_9986>, stce_10069);
  }
  void stce_10398(const iterator_t& stce_9835) {
    typedef typename std::vector<stce_10380>::iterator stce_10347;
    stce_10347 stce_10080 = stce_10381.begin();
    for (; stce_10080 != stce_10381.end() && stce_10080->stce_10348().index() < stce_9835.index(); ++stce_10080) {
    }
    for (stce_10347 stce_10007 = stce_10080; stce_10007 != stce_10381.end(); ++stce_10007)
      stce_10007->stce_10382();
    stce_10381.erase(stce_10080, stce_10381.end());
  }

public:
  void write_to_dot(const std::string& filename = "tape.dot") {
    write_to_dot(stce_9903::current(), stce_9903::start(), filename);
  }
  void write_to_dot(iterator_t stce_9834) { write_to_dot(stce_9834, stce_9903::start()); }
  void write_to_dot(iterator_t stce_9826, iterator_t stce_9835, const std::string& filename = "tape.dot") {
    stce_9865 stce_9866(filename);
    dco::internal::stce_10341::stce_10343(stce_9826, stce_9835, stce_9901, stce_10381, stce_9866);
  }
  void write_to_csv(const std::string& filename = "tape.csv") {
    write_to_csv(stce_9903::current(), stce_9903::start(), filename);
  }
  void write_to_csv(iterator_t stce_9834) { write_to_csv(stce_9834, stce_9903::start()); }
  void write_to_csv(iterator_t stce_9826, iterator_t stce_9835, const std::string& filename = "tape.csv") {
    if (stce_10381.size() != 0)
      throw dco::exception::create<std::runtime_error>("write_to_csv not implemented for callbacks.");
    dco::internal::stce_10341::stce_10350(stce_9826, stce_9835, filename);
  }
  void synchronize_with(tape const* const stce_9938) { this->stce_10230(stce_9938); }
  void stce_10438(iterator_t const& stce_9826, stce_10380& stce_10439, interpretation_settings const& stce_9961) {
    this->stce_10438(*this, stce_9826, stce_10439, stce_9961);
  }
  template <class stce_10440>
  void stce_10438(stce_10440& stce_10400, const iterator_t& stce_9826, stce_10380& stce_10439,
                  const interpretation_settings& stce_9961) {
    if (stce_10439.stce_10348() != stce_9826)
      throw dco::exception::create<std::runtime_error>("invoking callback at wrong position");
    if (stce_9961.reset) {
      stce_10308(stce_9826);
      stce_10389<true>();
    }
    index_t vecsize = static_cast<index_t>(dco::helper::vecsize_info<typename types_config_t::stce_9760>::vecsize);
    if (stce_10375) {
      for (index_t stce_10441 = 0; stce_10441 < vecsize; stce_10441++) {
        stce_9958 = stce_10441;
        stce_10439.stce_10349()->_adjoint_vector = &stce_10400;
        stce_10439.stce_10415(*this, stce_9961);
      }
    } else {
      stce_10439.stce_10349()->_adjoint_vector = &stce_10400;
      stce_10439.stce_10415(*this, stce_9961);
    }
  }
  struct stce_10442 {
    tape* stce_9990;
    bool stce_10374;
    stce_10442(tape* stce_10017) : stce_9990(stce_10017), stce_10374(stce_10017->sparse_interpret()) {}
    ~stce_10442() { stce_9990->sparse_interpret() = stce_10374; }
  };
  template <typename stce_10351 = decltype(stce_10373)>
  void stce_9962(iterator_t stce_9826, const iterator_t& stce_9835, const interpretation_settings& stce_9961,
                 stce_10351 const& stce_10352) {
    stce_10376();
    stce_9968(stce_9901, *this, stce_9826, stce_9835, stce_9961, stce_10352);
  }
  template <typename stce_10440, typename stce_10443, typename stce_10351>
  void stce_9968(stce_10440& stce_10400, stce_10443& stce_10444, iterator_t stce_9826, const iterator_t& stce_9835,
                 const interpretation_settings& stce_9961, stce_10351 const& stce_10352) {
    stce_10442 stce_10445(this);
    if (stce_9826 > stce_9903::current()) {
      throw dco::exception::create<std::runtime_error>("you try to use a tape position outside of the current tape.");
    }
    if (stce_9835 > stce_9826) {
      throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.");
    }
    for (int stce_9853 = static_cast<int>(stce_10381.size() - 1);
         stce_9853 >= 0 && stce_9835 <= stce_10381[stce_9853].stce_10348(); --stce_9853) {
      const iterator_t& stce_10446 = stce_10381[stce_9853].stce_10348();
      if (stce_9826 < stce_10446) {
        continue;
      }
      stce_9903::stce_10227(stce_9826);
      if (stce_9961.stce_9921)
        stce_10378(stce_9826, stce_10446, stce_10400, stce_10352);
      else {
        stce_10377(stce_9826, stce_10446, stce_10400, stce_10352);
      }
      stce_9826 = stce_10446;
      stce_9903::stce_10228();
      stce_10438(stce_10444, stce_9826, stce_10381[stce_9853], stce_9961);
      if (stce_9961.reset) {
        stce_10308(stce_9826);
        stce_10381[stce_9853].stce_10382();
        stce_10381.erase(stce_10381.begin() + stce_9853);
      }
    }
    stce_9903::stce_10227(stce_9826);
    if (stce_9961.stce_9921) {
      stce_10378(stce_9826, stce_9835, stce_10400, stce_10352);
    } else {
      stce_10377(stce_9826, stce_9835, stce_10400, stce_10352);
    }
    if (stce_9961.reset) {
      stce_10308(stce_9826);
    }
    stce_9903::stce_10228();
  }
};
template <memory_model::TYPE MEMORY_MODEL, typename stce_10367, memory_model::TYPE stce_9787>
const typename tape<MEMORY_MODEL, stce_10367, stce_9787>::stce_10372
    tape<MEMORY_MODEL, stce_10367, stce_9787>::stce_10373;
} // namespace internal
} // namespace dco
namespace dco {
template <class stce_9778, class stce_9757 = stce_9778, class stce_9758 = stce_9757,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1sm_mod {
  typedef types_config_t<stce_9778, stce_9757, stce_9758> stce_10145;

public:
  typedef ga1sm_mod mode_t;
  typedef dco::internal::stce_10147<ga1sm_mod> data_t;
  static const memory_model::TYPE TAPE_MODEL = memory_model::stce_9766;
  static const memory_model::TYPE stce_10447 = MEMORY_MODEL;
  typedef typename stce_10145::value_t value_t;
  typedef typename stce_10145::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename stce_10145::stce_9760 derivative_t;
  typedef derivative_t stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = true;
  static const bool is_tangent_type = false;
  static const bool stce_10146 = false;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef dco::internal::tape<TAPE_MODEL, stce_10145, stce_10447> tape_t;
  typedef typename internal::stce_10077<type> local_gradient_t;
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  typedef dco::helper::stce_10021<type, tape_t> userdata_object_t;
  typedef dco::helper::stce_10038<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
template <class stce_9778, class stce_9757 = stce_9778, class stce_9758 = stce_9757,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1s_mod {
  typedef types_config_t<stce_9778, stce_9757, stce_9758> stce_10145;

public:
  typedef ga1s_mod mode_t;
  static const memory_model::TYPE TAPE_MODEL = memory_model::stce_9766;
  static const memory_model::TYPE stce_10447 = MEMORY_MODEL;
  typedef dco::internal::stce_10140<ga1s_mod> data_t;
  typedef typename stce_10145::value_t value_t;
  typedef typename stce_10145::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename stce_10145::stce_9760 derivative_t;
  typedef derivative_t stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = true;
  static const bool is_tangent_type = false;
  static const bool stce_10146 = false;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef dco::internal::tape<TAPE_MODEL, stce_10145, stce_10447> tape_t;
  static DCOi_THREAD_LOCAL tape_t* global_tape;
  typedef typename internal::stce_10077<type> local_gradient_t;
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  typedef dco::helper::stce_10021<type, tape_t> userdata_object_t;
  typedef dco::helper::stce_10038<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type> jacobian_preaccumulator_t;
};
template <class stce_9778, class stce_9757, class stce_9758, memory_model::TYPE MEMORY_MODEL>
DCOi_THREAD_LOCAL typename ga1s_mod<stce_9778, stce_9757, stce_9758, MEMORY_MODEL>::tape_t*
    ga1s_mod<stce_9778, stce_9757, stce_9758, MEMORY_MODEL>::global_tape = 0;
} // namespace dco

namespace dco {
template <typename stce_9778, const size_t stce_10448 = 1, typename stce_9757 = stce_9778,
          typename stce_9758 = stce_9757, memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1v {
  typedef types_config_t<stce_9778, stce_9757, dco::helper::valvec<stce_9758, stce_10448>> stce_10145;

public:
  typedef ga1v mode_t;
  typedef dco::internal::stce_10140<ga1v> data_t;
  static const memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef typename stce_10145::value_t value_t;
  typedef typename stce_10145::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename stce_10145::stce_9760 derivative_t;
  typedef stce_9758 stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = true;
  static const bool is_tangent_type = false;
  static const bool stce_10146 = true;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, stce_10145> tape_t;
  static DCOi_THREAD_LOCAL tape_t* global_tape;
  typedef typename internal::stce_10077<type> local_gradient_t;
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  typedef dco::helper::stce_10021<type, tape_t> userdata_object_t;
  typedef dco::helper::stce_10038<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type> jacobian_preaccumulator_t;
};
template <typename stce_9778, const size_t stce_10448, typename stce_9757, typename stce_9758,
          memory_model::TYPE MEMORY_MODEL>
DCOi_THREAD_LOCAL typename ga1v<stce_9778, stce_10448, stce_9757, stce_9758, MEMORY_MODEL>::tape_t*
    ga1v<stce_9778, stce_10448, stce_9757, stce_9758, MEMORY_MODEL>::global_tape;
} // namespace dco

namespace dco {
template <typename stce_9778, const size_t stce_10448 = 1, typename stce_9757 = stce_9778,
          typename stce_9758 = stce_9757, memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1vm {
  typedef types_config_t<stce_9778, stce_9757, dco::helper::valvec<stce_9758, stce_10448>> stce_10145;

public:
  typedef ga1vm mode_t;
  typedef dco::internal::stce_10147<ga1vm> data_t;
  static const memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef typename stce_10145::value_t value_t;
  typedef typename stce_10145::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename stce_10145::stce_9760 derivative_t;
  typedef stce_9758 stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = true;
  static const bool is_tangent_type = false;
  static const bool stce_10146 = true;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, stce_10145> tape_t;
  typedef typename internal::stce_10077<type> local_gradient_t;
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  typedef dco::helper::stce_10021<type, tape_t> userdata_object_t;
  typedef dco::helper::stce_10038<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
template <typename stce_9778, const size_t stce_10448 = 1, typename stce_9757 = stce_9778,
          typename stce_9758 = stce_9757, memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1vm_mod {
  typedef types_config_t<stce_9778, stce_9757, dco::helper::valvec<stce_9758, stce_10448>> stce_10145;

public:
  typedef ga1vm_mod mode_t;
  typedef dco::internal::stce_10147<ga1vm_mod> data_t;
  static const memory_model::TYPE TAPE_MODEL = memory_model::stce_9766;
  static const memory_model::TYPE stce_10447 = MEMORY_MODEL;
  typedef typename stce_10145::value_t value_t;
  typedef typename stce_10145::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename stce_10145::stce_9760 derivative_t;
  typedef typename derivative_t::value_t stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = true;
  static const bool is_tangent_type = false;
  static const bool stce_10146 = true;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef dco::internal::tape<TAPE_MODEL, stce_10145, stce_10447> tape_t;
  typedef typename internal::stce_10077<type> local_gradient_t;
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  typedef dco::helper::stce_10021<type, tape_t> userdata_object_t;
  typedef dco::helper::stce_10038<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
template <typename stce_9778, const size_t stce_10448 = 1, typename stce_9757 = stce_9778,
          typename stce_9758 = stce_9757, memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1v_mod {
  typedef types_config_t<stce_9778, stce_9757, dco::helper::valvec<stce_9758, stce_10448>> stce_10145;

public:
  typedef ga1v_mod mode_t;
  typedef dco::internal::stce_10140<ga1v_mod> data_t;
  static const memory_model::TYPE TAPE_MODEL = memory_model::stce_9766;
  static const memory_model::TYPE stce_10447 = MEMORY_MODEL;
  typedef typename stce_10145::value_t value_t;
  typedef value_t scalar_value_t;
  typedef typename stce_10145::value_t active_value_t;
  typedef typename stce_10145::stce_9760 derivative_t;
  typedef typename derivative_t::value_t stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = true;
  static const bool is_tangent_type = false;
  static const bool stce_10146 = true;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef dco::internal::tape<TAPE_MODEL, stce_10145, stce_10447> tape_t;
  static DCOi_THREAD_LOCAL tape_t* global_tape;
  typedef typename internal::stce_10077<type> local_gradient_t;
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  typedef dco::helper::stce_10021<type, tape_t> userdata_object_t;
  typedef dco::helper::stce_10038<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type> jacobian_preaccumulator_t;
};
template <typename stce_9778, const size_t stce_10448, typename stce_9757, typename stce_9758,
          memory_model::TYPE MEMORY_MODEL>
DCOi_THREAD_LOCAL typename ga1v_mod<stce_9778, stce_10448, stce_9757, stce_9758, MEMORY_MODEL>::tape_t*
    ga1v_mod<stce_9778, stce_10448, stce_9757, stce_9758, MEMORY_MODEL>::global_tape;
} // namespace dco

namespace dco {
template <typename active_t, typename stce_10449 = void> struct gbcp;
template <typename stce_9986>
struct gbcp<stce_9986, typename dco::enable_if<(dco::mode<stce_9986>::is_dco_type &&
                                                !internal::is_gbcp_type<stce_9986>::value)>::type> {
  typedef stce_9986 binary_t;
  typedef typename dco::mode<binary_t>::value_t active_t;
  typedef active_t active_value_t;
  typedef typename dco::mode<active_value_t>::value_t value_t;
  typedef typename dco::mode<active_value_t>::scalar_value_t scalar_value_t;
  typedef typename mode<active_value_t>::passive_t passive_t;
  typedef typename mode<active_value_t>::scalar_passive_t scalar_passive_t;
  typedef internal::jacobian_preaccumulator_t<void> jacobian_preaccumulator_t;
  typedef dco::internal::stce_9911<gbcp> data_t;
  typedef dco::internal::active_type<active_value_t, data_t> type;
  typedef typename dco::mode<active_value_t>::tape_t tape_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = dco::mode<active_value_t>::is_adjoint_type;
  static const bool is_tangent_type = dco::mode<active_value_t>::is_tangent_type;
  static const bool stce_10146 = dco::mode<active_value_t>::stce_10146;
  static const int gbcp_order = 1;
  static const int order = dco::mode<binary_t>::order - 1;
  static const size_t p1f_size = 0;
};
template <typename stce_10450>
struct gbcp<stce_10450, typename dco::enable_if<(dco::mode<stce_10450>::is_dco_type &&
                                                 internal::is_gbcp_type<stce_10450>::value)>::type> {
  typedef stce_10450 binary_t;
  typedef typename dco::mode<binary_t>::active_t active_t;
  typedef typename dco::mode<binary_t>::active_value_t active_value_t;
  typedef typename dco::mode<binary_t>::value_t value_t;
  typedef typename dco::mode<binary_t>::scalar_value_t scalar_value_t;
  typedef typename dco::mode<binary_t>::passive_t passive_t;
  typedef typename dco::mode<binary_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::stce_9911<gbcp> data_t;
  typedef dco::internal::active_type<active_value_t, data_t> type;
  typedef internal::jacobian_preaccumulator_t<void> jacobian_preaccumulator_t;
  typedef typename dco::mode<active_value_t>::tape_t tape_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = dco::mode<binary_t>::is_adjoint_type;
  static const bool is_tangent_type = dco::mode<binary_t>::is_tangent_type;
  static const int gbcp_order = dco::mode<binary_t>::gbcp_order + 1;
  static const int order = dco::mode<binary_t>::order - 1;
};
template <typename stce_9979>
struct gbcp<stce_9979, typename dco::enable_if<(!dco::mode<stce_9979>::is_dco_type)>::type> {
  typedef internal::jacobian_preaccumulator_t<void> jacobian_preaccumulator_t;
  typedef stce_9979 binary_t;
  typedef binary_t active_t;
  typedef binary_t active_value_t;
  typedef binary_t value_t;
  typedef binary_t scalar_value_t;
  typedef binary_t passive_t;
  typedef typename dco::mode<binary_t>::scalar_passive_t scalar_passive_t;
  typedef binary_t type;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = false;
  static const bool is_tangent_type = false;
  static const int gbcp_order = 1;
  static const int order = 0;
  typedef typename dco::mode<active_value_t>::tape_t tape_t;
};
} // namespace dco

namespace dco {
template <typename stce_9778, size_t stce_10451 = 32> struct gp1f {
  typedef stce_9778 value_t;
  typedef stce_9778 active_value_t;
  typedef value_t scalar_value_t;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  static const size_t p1f_size = stce_10451;
  typedef internal::stce_10337<gp1f> data_t;
  typedef internal::active_type<stce_9778, data_t> type;
  typedef typename data_t::derivative_t derivative_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = false;
  static const bool is_tangent_type = false;
  static const bool is_intermediate_type = false;
  static const int order = dco::mode<stce_9778>::order + 1;
  typedef stce_9805 tape_t;
  typedef void local_gradient_t;
  typedef void external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<void> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9788> struct stce_10452 {
  typedef stce_9788 mode_t;
  index_t tape_index;
  stce_10452() : tape_index(0) {}
  void clear() { tape_index = 0; }
  typedef typename mode_t::value_t stce_9767;

private:
  template <class stce_10127>
  static void interpret(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808, bool stce_10453) {
    (void)stce_10453;
    stce_9788::global_tape->stce_10454[stce_9788::global_tape->stce_10455] = stce_9808.tape_index;
    stce_9788::global_tape->stce_10455++;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static void interpret(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
                        bool stce_10453) {
    interpret(stce_9808.stce_10133, stce_10453);
    interpret(stce_9808.stce_10135, stce_10453);
  }
  template <class stce_10137, class stce_10131>
  static void interpret(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808, bool stce_10453) {
    interpret(stce_9808.stce_10138, stce_10453);
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static void interpret(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
                        bool stce_10453) {
    interpret(stce_9808.stce_10133, stce_10453);
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static void interpret(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
                        bool stce_10453) {
    interpret(stce_9808.stce_10135, stce_10453);
  }

protected:
  template <class stce_9912, class stce_9793> static void stce_9913(const stce_9912& stce_9909, stce_9793& stce_10456) {
    const int stce_10457 = stce_9788::global_tape->stce_10455;
    interpret(stce_9909, false);
    stce_10452& data = const_cast<stce_10452&>(stce_10456);
    if (stce_10457 == stce_9788::global_tape->stce_10455) {
      data.clear();
    } else {
      stce_9788::global_tape->stce_10458++;
      data.tape_index = stce_9788::global_tape->stce_10458;
      stce_9788::global_tape->stce_10459[stce_9788::global_tape->stce_10458].stce_10460 =
          stce_9788::global_tape->stce_10455 - stce_10457;
      stce_9788::global_tape->stce_10459[stce_9788::global_tape->stce_10458].stce_10457 = stce_10457;
    }
  }
  template <class stce_9912> void stce_9913(const stce_9912& stce_9909) { stce_9913(stce_9909, *this); }
};
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
template <typename stce_9767> struct stce_10461 {
private:
  template <typename stce_9788> friend struct stce_10452;
  struct stce_10462 {
    index_t stce_10460;
    index_t stce_10457;
  };
  stce_10462* stce_10459;
  index_t stce_10458;
  int* stce_10454;
  index_t stce_10455;
  stce_10461(const stce_10461<stce_9767>&) {
    throw dco::exception::create<std::runtime_error>("dco_error: Not implemented yet! Please report, why needed!");
  }
  stce_10461(index_t stce_10460, index_t stce_10463) {
    stce_10459 = new stce_10462[stce_10463];
    stce_10458 = 0;
    stce_10454 = new int[size_t(stce_10460)];
    stce_10455 = 0;
  }
  ~stce_10461() {
    if (stce_10459)
      delete[] stce_10459;
    if (stce_10454)
      delete[] stce_10454;
  }

public:
  struct stce_10464 {
    friend struct stce_10461<stce_9767>;

  private:
    index_t stce_10465;
    index_t stce_10466;
    stce_10464(index_t stce_10467, index_t stce_10468) : stce_10465(stce_10467), stce_10466(stce_10468) {}

  public:
    stce_10464() : stce_10465(0), stce_10466(0){};
    index_t stce_10469() { return stce_10465; }
    index_t stce_10470() {
      if (stce_10466 < 0)
        return -stce_10466;
      return stce_10466;
    }
    bool stce_10453() { return stce_10466 < 0; }
  };
  struct iterator_t {
  private:
    index_t _progvarcounter;

  public:
    index_t stce_10463() const { return _progvarcounter; }
    iterator_t(const index_t stce_10471) : _progvarcounter(stce_10471) {}
  };
  iterator_t get_position() { return iterator_t(stce_10458); }
  typedef std::vector<stce_10464> sparse_jacobi;
  template <class stce_9778>
  sparse_jacobi* build_pattern(stce_9778* stce_10469, index_t stce_9832, const iterator_t& stce_10472) {
    sparse_jacobi* stce_9836 = new sparse_jacobi();
    for (index_t stce_9853 = 0; stce_9853 < stce_9832; ++stce_9853) {
      stce_10473(stce_9853 + 1, stce_10469[stce_9853].tape_index, stce_10472, stce_9836);
    }
    return stce_9836;
  }
  void create_pattern_file(sparse_jacobi* stce_10474, std::string filename) {
    std::ofstream out(filename.c_str());
    for (size_t stce_9853 = 0; stce_9853 < stce_10474->size(); ++stce_9853) {
      stce_10464& stce_10475 = (*stce_10474)[stce_9853];
      out << stce_10475.stce_10469() << " " << stce_10475.stce_10470() << " 1" << std::endl;
    }
    out.close();
  }
  void stce_10476(std::string filename) {
    std::ofstream out(filename.c_str());
    out << "digraph {" << std::endl;
    for (index_t stce_9853 = 1; stce_9853 <= stce_10458; ++stce_9853) {
      out << stce_9853 << std::endl;
    }
    for (index_t stce_9853 = 1; stce_9853 <= stce_10458; ++stce_9853) {
      int stce_10460 = stce_10459[stce_9853].stce_10460;
      int stce_10477 = stce_10459[stce_9853].stce_10457;
      for (int stce_10478 = 0; stce_10478 < stce_10460; ++stce_10478) {
        int stce_10080 = stce_10454[stce_10478 + stce_10477];
        out << stce_9853 << " -> " << stce_10080 << std::endl;
      }
    }
    out << "}" << std::endl;
    out.close();
  }
  void stce_10473(index_t stce_10467, index_t stce_9874, const iterator_t& stce_10472, sparse_jacobi* stce_10479) {
    if (stce_9874 == 0)
      return;
    if (stce_9874 <= stce_10472.stce_10463()) {
      stce_10479->push_back(stce_10464(stce_10467, stce_9874));
    } else {
      index_t stce_10460 = stce_10459[stce_9874].stce_10460;
      index_t stce_10477 = stce_10459[stce_9874].stce_10457;
      for (int stce_9853 = 0; stce_9853 < stce_10460; ++stce_9853) {
        stce_10473(stce_10467, stce_10454[stce_9853 + stce_10477], stce_10472, stce_10479);
      }
    }
  }
  static stce_10461* create(index_t size, index_t stce_10480 = 0) {
    if (stce_10480 == 0)
      stce_10480 = size / 2;
    return new stce_10461(size, stce_10480);
  }
  static void remove(stce_10461*& tape) {
    delete tape;
    tape = 0;
  }
  template <class stce_10127> void register_variable(dco::internal::active_type<stce_9767, stce_10127>& stce_10481) {
    stce_10127& data = stce_10481.data();
    stce_10458++;
    data.tape_index = stce_10458;
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename stce_9778 = double> struct gp1t {
  typedef stce_9778 value_t;
  typedef value_t scalar_value_t;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef typename internal::stce_10461<stce_9778> tape_t;
  static DCOi_THREAD_LOCAL tape_t* global_tape;
  typedef internal::stce_10452<gp1t> data_t;
  typedef internal::active_type<stce_9778, data_t> type;
  static const bool is_dco_type = true;
  static const bool is_intermediate_type = false;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
};
template <class stce_9778> DCOi_THREAD_LOCAL typename gp1t<stce_9778>::tape_t* gp1t<stce_9778>::global_tape = 0;
} // namespace dco

namespace dco {
namespace internal {
inline bool all(bool stce_10482) { return stce_10482; }
template <std::size_t stce_9832> inline bool all(std::bitset<stce_9832> const& stce_10482) { return stce_10482.all(); }
template <typename, typename, typename enable_if = void> struct stce_10483 {
  template <typename stce_9881, typename stce_10397>
  static typename std::common_type<typename dco::mode<stce_9881>::derivative_t, stce_10397>::type
  get(stce_9881&& stce_9808, stce_10397 const& pval) {
    return (HAS_GT1S_ACTIVITY_CHECK && all(stce_9808.stce_10484 == 0.0)) ? stce_9808.stce_10484
                                                                         : stce_9808.stce_10484 * pval;
  }
};
template <typename stce_10485, typename stce_9788>
struct stce_10483<
    stce_10485, stce_9788,
    typename std::enable_if<std::is_base_of<typename stce_10485::data_t,
                                            internal::stce_10337<typename stce_10485::data_t::mode_t>>::value>::type> {
  template <typename stce_9881, typename stce_10397>
  static typename stce_9788::derivative_t get(stce_9881&& stce_9808, stce_10397&& pval) {
    return (stce_9808.stce_10484 == 0) ? static_cast<typename stce_9788::derivative_t>(0.0)
                                       : stce_9808.stce_10484 * (pval == 0 ? pval + 1 : pval);
  }
};
template <typename stce_9788> struct stce_10486 {
  typedef stce_9788 mode_t;
  typedef stce_10088 stce_10142;
  typedef typename mode_t::derivative_t derivative_t;
  mutable derivative_t stce_10484;
  stce_10486() : stce_10484(0.0) {}
  DCO_STRONG_INLINE stce_10486(const stce_10486& stce_10085) : stce_10484(stce_10085.stce_10484) {}
  stce_10486& operator=(const stce_10486& stce_10085) {
    stce_10484 = stce_10085.stce_10484;
    return *this;
  }
  void stce_10086(const derivative_t& stce_9846) { stce_10484 = stce_9846; }
  void stce_9964(derivative_t& stce_9846) const { stce_9846 = stce_10484; }
  void clear() { stce_10484 = 0.0; }
  derivative_t& stce_9971() const {
    stce_1000002();
    return stce_10484;
  }
  derivative_t& stce_9977() const { return stce_9971(); }
  template <class stce_9912> void stce_9913(const stce_9912& stce_10143) {
    stce_10484 = stce_10487(stce_10143, static_cast<derivative_t>(1.0));
  }
  template <class stce_9767, class stce_10127>
  static derivative_t stce_10487(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808,
                                 const derivative_t& pval) {
    return stce_10483<dco::mode<typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::value_t>,
                      stce_9788>::get(stce_9808, pval);
  }
  template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
  static derivative_t
  stce_10487(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
             const derivative_t& pval) {
    return stce_10487(stce_9808.stce_10133, stce_9808.stce_10134() * pval) +
           stce_10487(stce_9808.stce_10135, stce_9808.stce_10136() * pval);
  }
  template <class stce_9767, class stce_10137, class stce_10131>
  static derivative_t stce_10487(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808,
                                 const derivative_t& pval) {
    return stce_10487(stce_9808.stce_10138, stce_9808.pval() * pval);
  }
  template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
  static derivative_t
  stce_10487(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
             const derivative_t& pval) {
    return stce_10487(stce_9808.stce_10133, stce_9808.stce_10134() * pval);
  }
  template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
  static derivative_t
  stce_10487(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
             const derivative_t& pval) {
    return stce_10487(stce_9808.stce_10135, stce_9808.stce_10136() * pval);
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <class stce_9778, typename stce_10488 = stce_9778> class gt1s {
public:
  typedef gt1s mode_t;
  typedef dco::internal::stce_10486<gt1s> data_t;
  typedef stce_9778 value_t;
  typedef stce_9778 active_value_t;
  typedef stce_9778 scalar_value_t;
  typedef stce_10488 derivative_t;
  typedef stce_10488 stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<stce_9778, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = false;
  static const bool is_tangent_type = true;
  static const bool stce_10146 = false;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef stce_9805 tape_t;
  typedef void local_gradient_t;
  typedef void external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<void> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9788> struct stce_10489 {
  typedef stce_9788 mode_t;
  typedef stce_10088 stce_10142;
  typedef typename mode_t::derivative_t derivative_t;
  typedef typename derivative_t::value_t stce_9987;

protected:
  typedef typename mode_t::value_t stce_9767;

public:
  static const int vecsize = derivative_t::stce_9849;
  mutable bool stce_10490;
  mutable derivative_t tlms;
  stce_10489() : stce_10490(false) {
    for (int stce_9853 = 0; stce_9853 < vecsize; ++stce_9853)
      tlms[stce_9853] = 0;
  }
  void stce_10086(const stce_9987& stce_9846, const int stce_10491) {
    if (!stce_10490) {
      stce_10490 = true;
    }
    tlms[stce_10491] = stce_9846;
  }
  derivative_t& stce_9971() const {
    stce_1000002();
    stce_10490 = true;
    return tlms;
  }
  derivative_t& stce_9977() const { return stce_9971(); }
  void stce_9964(stce_9987& stce_9846, const int stce_10491) const {
    stce_1000002();
    if (stce_10490) {
      stce_9846 = tlms[stce_10491];
    } else {
      stce_9846 = 0;
    }
  }
  void clear() {
    for (int stce_9853 = 0; stce_9853 < vecsize; ++stce_9853) {
      tlms[stce_9853] = 0.0;
    }
  }
  template <class stce_9912> DCO_ALWAYS_INLINE void stce_9913(const stce_9912& stce_10143) {
    bool stce_10492 = this->stce_10493(stce_10143);
    if (stce_10492) {
      derivative_t stce_10494{};
      stce_10487(stce_10494, stce_10143, 1.0);
      tlms = stce_10494;
      stce_10490 = true;
    } else {
      stce_10490 = false;
    }
  }
  template <class stce_10127>
  static DCO_ALWAYS_INLINE void stce_10487(derivative_t& tlms,
                                           const dco::internal::active_type<stce_9767, stce_10127>& stce_9808,
                                           const stce_9987& pval) {
    if (stce_9808.stce_10490) {
      tlms += stce_9808.tlms * pval;
    }
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static DCO_ALWAYS_INLINE void
  stce_10487(derivative_t& tlms,
             const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
             const stce_9987& pval) {
    stce_10487(tlms, stce_9808.stce_10133, stce_9808.stce_10134() * pval);
    stce_10487(tlms, stce_9808.stce_10135, stce_9808.stce_10136() * pval);
  }
  template <class stce_10137, class stce_10131>
  static DCO_ALWAYS_INLINE void stce_10487(derivative_t& tlms,
                                           const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808,
                                           const stce_9987& pval) {
    stce_10487(tlms, stce_9808.stce_10138, stce_9808.pval() * pval);
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static DCO_ALWAYS_INLINE void
  stce_10487(derivative_t& tlms,
             const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
             const stce_9987& pval) {
    stce_10487(tlms, stce_9808.stce_10133, stce_9808.stce_10134() * pval);
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static DCO_ALWAYS_INLINE void
  stce_10487(derivative_t& tlms,
             const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808,
             const stce_9987& pval) {
    stce_10487(tlms, stce_9808.stce_10135, stce_9808.stce_10136() * pval);
  }
  template <class stce_10127>
  static bool stce_10493(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
    return stce_9808.stce_10490;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static bool stce_10493(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    return stce_10493(stce_9808.stce_10133) || stce_10493(stce_9808.stce_10135);
  }
  template <class stce_10137, class stce_10131>
  static bool stce_10493(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
    return stce_10493(stce_9808.stce_10138);
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static bool stce_10493(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    return stce_10493(stce_9808.stce_10133);
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  static bool stce_10493(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    return stce_10493(stce_9808.stce_10135);
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <class stce_9778, size_t stce_10495 = 1, typename stce_10488 = stce_9778> class gt1v {
public:
  typedef gt1v mode_t;
  typedef dco::internal::stce_10489<gt1v> data_t;
  typedef stce_9778 value_t;
  typedef stce_9778 active_value_t;
  typedef value_t scalar_value_t;
  typedef dco::helper::valvec<stce_10488, stce_10495> derivative_t;
  typedef stce_10488 stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<stce_9778, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = false;
  static const bool is_tangent_type = true;
  static const bool stce_10146 = true;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef stce_9805 tape_t;
  typedef void local_gradient_t;
  typedef void external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<void> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9788> class stce_10496 : public stce_10486<stce_9788>, public stce_10140<stce_9788> {
  using stce_10497 = stce_10486<stce_9788>;
  using stce_10498 = stce_10140<stce_9788>;

public:
  typedef stce_9788 mode_t;
  typedef stce_10088 stce_10142;
  typedef typename stce_9788::tape_t tape_t;
  typedef typename tape_t::stce_9760 derivative_t;

public:
  stce_10496() : stce_10497(), stce_10498() {}
  DCO_STRONG_INLINE stce_10496(const stce_10496& stce_10085) : stce_10497(stce_10085), stce_10498(stce_10085) {}
  DCO_STRONG_INLINE stce_10496& operator=(const stce_10496& stce_9808) {
    stce_10497::operator=(static_cast<const stce_10497&>(stce_9808));
    stce_10498::operator=(static_cast<const stce_10498&>(stce_9808));
    return *this;
  }
  inline void clear() {
    stce_10497::clear();
    stce_10498::clear();
  }
  inline index_t& _tape_index() const { return stce_10498::_tape_index(); }
  static typename stce_9788::tape_t* tape() { return stce_10498::tape(); }
  template <typename stce_10087>
  static DCO_STRONG_INLINE void register_variable(stce_10087& stce_9808, index_t index, tape_t* tape) {
    stce_10498::register_variable(stce_9808, index, tape);
  }
  template <class stce_9912> DCO_ALWAYS_INLINE void stce_9913(const stce_9912& stce_10143) {
    stce_10497::stce_9913(stce_10143);
    stce_10498::stce_9913(stce_10143);
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename stce_9778, typename stce_9757 = stce_9778, typename stce_9758 = stce_9757,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class gtas {
  typedef types_config_t<stce_9778, stce_9757, stce_9758> stce_10145;

public:
  static const memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef gtas mode_t;
  typedef dco::internal::stce_10496<gtas> data_t;
  typedef typename stce_10145::value_t value_t;
  typedef value_t scalar_value_t;
  typedef typename stce_10145::value_t active_value_t;
  typedef typename stce_10145::stce_9760 derivative_t;
  typedef derivative_t stce_9987;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static const bool is_dco_type = true;
  static const bool is_adjoint_type = true;
  static const bool is_tangent_type = true;
  static const bool stce_10146 = false;
  static const int order = dco::mode<stce_9778>::order + 1;
  static const size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, stce_10145> tape_t;
  static DCOi_THREAD_LOCAL tape_t* global_tape;
  typedef typename internal::stce_10077<type> local_gradient_t;
  typedef dco::helper::stce_10015<tape_t> callback_object_t;
  typedef dco::helper::stce_10021<type, tape_t> userdata_object_t;
  typedef dco::helper::stce_10038<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type> jacobian_preaccumulator_t;
};
template <class stce_9778, class stce_9757, class stce_9758, memory_model::TYPE MEMORY_MODEL>
DCOi_THREAD_LOCAL typename gtas<stce_9778, stce_9757, stce_9758, MEMORY_MODEL>::tape_t*
    gtas<stce_9778, stce_9757, stce_9758, MEMORY_MODEL>::global_tape = 0;
} // namespace dco

namespace dco {
namespace internal {
template <typename stce_9778, typename stce_9789> struct smart_tape_ptr_t {
  static_assert(sizeof(stce_9778) == 0, "'dco::smart_tape_ptr_t' got instantiated with a non-adjoint type/mode.");
};
template <typename mode_t>
struct smart_tape_ptr_t<mode_t, typename std::enable_if<stce_10166<typename mode_t::type>>::type> {
  typename mode_t::tape_t* stce_9990 = nullptr;
  smart_tape_ptr_t(tape_options stce_9946 = tape_options()) {
    if (mode_t::global_tape) {
      throw dco::exception::create<std::runtime_error>("global_tape already allocated.");
    }
    mode_t::global_tape = stce_9990 = mode_t::tape_t::create(stce_9946);
  }
  ~smart_tape_ptr_t() {
    if (stce_9990) {
      mode_t::global_tape = nullptr;
      mode_t::tape_t::remove(stce_9990);
    }
  }
  smart_tape_ptr_t(smart_tape_ptr_t const&) = delete;
  smart_tape_ptr_t& operator=(smart_tape_ptr_t const&) = delete;
  smart_tape_ptr_t(smart_tape_ptr_t&& stce_9938) noexcept : stce_9990(stce_9938.stce_9990) {
    stce_9938.stce_9990 = nullptr;
  }
  smart_tape_ptr_t& operator=(smart_tape_ptr_t&& stce_9938) noexcept {
    if (this == &stce_9938)
      return *this;
    stce_9990 = stce_9938.stce_9990;
    stce_9938.stce_9990 = nullptr;
    return *this;
  }
  typename mode_t::tape_t*& data() { return stce_9990; }
  typename mode_t::tape_t* const& data() const { return stce_9990; }
  typename mode_t::tape_t* operator->() { return stce_9990; }
  typename mode_t::tape_t const* operator->() const { return stce_9990; }
  typename mode_t::tape_t& operator*() { return *stce_9990; }
  typename mode_t::tape_t const& operator*() const { return *stce_9990; }
  operator typename mode_t::tape_t *() { return stce_9990; }
  operator typename mode_t::tape_t const*() const { return stce_9990; }
};
template <typename mode_t>
struct smart_tape_ptr_t<mode_t,
                        typename std::enable_if<mode_t::is_adjoint_type && !stce_10166<typename mode_t::type>>::type> {
  typename mode_t::tape_t* stce_9990 = nullptr;
  smart_tape_ptr_t(tape_options stce_9946 = tape_options()) : stce_9990(mode_t::tape_t::create(stce_9946)) {}
  ~smart_tape_ptr_t() {
    mode_t::tape_t::remove(stce_9990);
    stce_9990 = nullptr;
  }
  smart_tape_ptr_t(smart_tape_ptr_t const&) = delete;
  smart_tape_ptr_t& operator=(smart_tape_ptr_t const&) = delete;
  smart_tape_ptr_t(smart_tape_ptr_t&& stce_9938) noexcept : stce_9990(stce_9938.stce_9990) {
    stce_9938.stce_9990 = nullptr;
  }
  smart_tape_ptr_t& operator=(smart_tape_ptr_t&& stce_9938) noexcept {
    if (this == &stce_9938)
      return *this;
    mode_t::tape_t::remove(stce_9990);
    stce_9990 = stce_9938.stce_9990;
    stce_9938.stce_9990 = nullptr;
    return *this;
  }
  typename mode_t::tape_t*& data() { return stce_9990; }
  typename mode_t::tape_t* const& data() const { return stce_9990; }
  typename mode_t::tape_t* operator->() { return stce_9990; }
  typename mode_t::tape_t const* operator->() const { return stce_9990; }
  typename mode_t::tape_t& operator*() { return *stce_9990; }
  typename mode_t::tape_t const& operator*() const { return *stce_9990; }
};
template <typename stce_9778, typename stce_10163>
struct smart_tape_ptr_t<internal::active_type<stce_9778, stce_10163>>
    : public smart_tape_ptr_t<typename stce_10163::mode_t> {};
} // namespace internal
template <typename stce_9788> using smart_tape_ptr_t = internal::smart_tape_ptr_t<stce_9788>;
} // namespace dco

namespace dco {
template <size_t stce_10499> struct subrange_t {
  static const size_t stce_10500 = stce_10499;
  subrange_t(size_t stce_9832) : stce_10033(stce_9832) {}
  size_t stce_10033;
};
template <size_t stce_10499> struct range_t {
  subrange_t<stce_10499> const& stce_10501;
  size_t global_index, stce_10208;
  range_t(subrange_t<stce_10499> const& stce_10410) : stce_10501(stce_10410), global_index(0), stce_10208(0) {}
  range_t& operator++() {
    global_index += stce_10501.stce_10500;
    ++stce_10208;
    return *this;
  }
  bool operator!=(range_t const& stce_10006) const {
    if (stce_10006.stce_10208 != stce_10208)
      return true;
    return false;
  }
  range_t& operator*() { return *this; }
  range_t const& operator*() const { return *this; }
  void stce_10238() {
    global_index = stce_10501.stce_10033;
    stce_10208 = static_cast<size_t>(std::ceil(static_cast<double>(stce_10501.stce_10033) / stce_10499));
  }
  bool is_last() const { return global_index + stce_10499 >= stce_10501.stce_10033; }
};
template <size_t stce_10499> struct inner_range_t {
  range_t<stce_10499> const& stce_10502;
  size_t global_index, sub_index;
  inner_range_t(range_t<stce_10499> const& stce_9856)
      : stce_10502(stce_9856), global_index(stce_9856.global_index), sub_index(0) {}
  inner_range_t& operator++() {
    ++sub_index;
    ++global_index;
    return *this;
  }
  void stce_10238() {
    if ((stce_10502.stce_10208 + 1) * stce_10502.stce_10501.stce_10500 > stce_10502.stce_10501.stce_10033) {
      sub_index = stce_10502.stce_10501.stce_10033 % stce_10502.stce_10501.stce_10500;
    } else {
      sub_index = stce_10502.stce_10501.stce_10500;
    }
  }
  bool operator!=(inner_range_t const& stce_10006) const {
    if (stce_10006.sub_index != sub_index)
      return true;
    return false;
  }
  inner_range_t& operator*() { return *this; }
  inner_range_t const& operator*() const { return *this; }
};
template <size_t stce_10499> static inner_range_t<stce_10499> begin(range_t<stce_10499> const& stce_9856) {
  return inner_range_t<stce_10499>(stce_9856);
}
template <size_t stce_10499> static range_t<stce_10499> begin(subrange_t<stce_10499> const& stce_10410) {
  return range_t<stce_10499>(stce_10410);
}
template <size_t stce_10499> static inner_range_t<stce_10499> end(range_t<stce_10499> const& stce_9856) {
  inner_range_t<stce_10499> stce_10503(stce_9856);
  stce_10503.stce_10238();
  return stce_10503;
}
template <size_t stce_10499> static range_t<stce_10499> end(subrange_t<stce_10499> const& stce_10410) {
  range_t<stce_10499> stce_10503(stce_10410);
  stce_10503.stce_10238();
  return stce_10503;
}
template <size_t stce_10499> static subrange_t<stce_10499> subranges(size_t stce_9832) {
  return subrange_t<stce_10499>(stce_9832);
}
} // namespace dco
namespace dco {
namespace stce_10504 {
template <class stce_9767> struct stce_10505 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return static_cast<stce_9767>(stce_10185 + stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0));
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0));
  }
};
template <class stce_9767> struct stce_10507 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return static_cast<stce_9767>(stce_10185 - stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0));
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(-1.0));
  }
};
template <class stce_9767> struct stce_10508 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return static_cast<stce_9767>(stce_10185 * stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(stce_10185);
  }
};
template <class stce_9767> struct stce_10509 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return static_cast<stce_9767>(stce_10185 / stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0) / stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(-_value / stce_10186);
  }
};
template <class stce_9767> struct stce_10510 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return stce_10185 + stce_10186;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0));
  }
};
template <class stce_9767> struct stce_10511 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return stce_10185 + stce_10186;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0));
  }
};
template <class stce_9767> struct stce_10512 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return stce_10185 - stce_10186;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0));
  }
};
template <class stce_9767> struct stce_10513 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return stce_10185 - stce_10186;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(-1.0));
  }
};
template <class stce_9767> struct stce_10514 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return stce_10185 * stce_10186;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(stce_10186);
  }
};
template <class stce_9767> struct stce_10515 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return stce_10185 * stce_10186;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(stce_10185);
  }
};
template <class stce_9767> struct stce_10516 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return stce_10185 / stce_10186;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0) / stce_10186);
  }
};
template <class stce_9767> struct stce_10517 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    return stce_10185 / stce_10186;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(const stce_9767& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return static_cast<stce_9767>(-(stce_10185 / stce_10186) / stce_10186);
  }
};
template <class stce_9767> struct stce_10518 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::sin;
    return sin(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::cos;
    (void)_value;
    return static_cast<stce_9767>(cos(arg));
  }
  static std::string stce_10519(std::string v) { return std::string("sin") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(std::string("cos(arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10521 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::cos;
    return cos(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::sin;
    (void)_value;
    return static_cast<stce_9767>(-sin(arg));
  }
  static std::string stce_10519(std::string v) { return std::string("cos") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(std::string("-sin(arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10522 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::tan;
    return tan(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::tan;
    (void)_value;
    return static_cast<stce_9767>((static_cast<stce_9767>(1.0) + (tan(arg) * tan(arg))));
  }
  static std::string stce_10519(std::string v) { return std::string("tan") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 =
        helper::stce_9833(std::string("(static_cast<DCO_TAPE_REAL>(1.0) + (tan(arg)*tan(arg)))"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10523 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::cosh;
    return cosh(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::sinh;
    (void)_value;
    return static_cast<stce_9767>(sinh(arg));
  }
  static std::string stce_10519(std::string v) { return std::string("cosh") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(std::string("sinh(arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10524 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::sinh;
    return sinh(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::cosh;
    (void)_value;
    return static_cast<stce_9767>(cosh(arg));
  }
  static std::string stce_10519(std::string v) { return std::string("sinh") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(std::string("cosh(arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10525 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::tanh;
    return tanh(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::tanh;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0) - tanh(arg) * tanh(arg));
  }
  static std::string stce_10519(std::string v) { return std::string("tanh") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 =
        helper::stce_9833(std::string("static_cast<DCO_TAPE_REAL>(1.0) - tanh(arg)*tanh(arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10526 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::asin;
    return asin(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::sqrt;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0) / sqrt(static_cast<stce_9767>(1.0) - arg * arg));
  }
  static std::string stce_10519(std::string v) { return std::string("asin") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / sqrt(static_cast<DCO_TAPE_REAL>(1.0) - arg*arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10527 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::acos;
    return acos(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::sqrt;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(-1.0) / sqrt(static_cast<stce_9767>(1.0) - arg * arg));
  }
  static std::string stce_10519(std::string v) { return std::string("acos") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(-1.0) / sqrt(static_cast<DCO_TAPE_REAL>(1.0) - arg*arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10528 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::atan;
    return atan(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::atan;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0) / (static_cast<stce_9767>(1.0) + arg * arg));
  }
  static std::string stce_10519(std::string v) { return std::string("atan") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / (static_cast<DCO_TAPE_REAL>(1.0) + arg*arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10529 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::exp;
    return exp(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::exp;
    (void)_value;
    return static_cast<stce_9767>(exp(arg));
  }
  static std::string stce_10519(std::string v) { return std::string("exp") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(std::string("exp(arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10530 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::sqrt;
    return sqrt(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::sqrt;
    (void)_value;
    return static_cast<stce_9767>(
        static_cast<stce_9767>(1.0) /
        (static_cast<stce_9767>(2.0) * sqrt(arg + ((dco::HAS_SQRT_AVOID_DIVZERO && arg == static_cast<stce_9767>(0.0))
                                                       ? static_cast<stce_9767>(DCO_SQRT_EPS)
                                                       : static_cast<stce_9767>(0.0)))));
  }
  static std::string stce_10519(std::string v) { return std::string("sqrt") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 =
        helper::stce_9833(std::string("static_cast<DCO_TAPE_REAL>(1.0) / (static_cast<DCO_TAPE_REAL>(2.0) * sqrt(arg + "
                                      "((dco::HAS_SQRT_AVOID_DIVZERO && arg==static_cast<DCO_TAPE_REAL>(0.0)) ? "
                                      "static_cast<DCO_TAPE_REAL>(DCO_SQRT_EPS) : static_cast<DCO_TAPE_REAL>(0.0))))"),
                          "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10531 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using std::log;
    return log(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using std::log;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0) / arg);
  }
  static std::string stce_10519(std::string v) { return std::string("log") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(std::string("static_cast<DCO_TAPE_REAL>(1.0) / arg"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10532 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using ::erf;
    return erf(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using ::exp;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(2.0) /
                                  sqrt(static_cast<stce_9767>(3.14159265358979323846264338327950288)) *
                                  exp(-arg * arg));
  }
  static std::string stce_10519(std::string v) { return std::string("erf") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(2.0) / "
                    "sqrt(static_cast<DCO_TAPE_REAL>(3.14159265358979323846264338327950288)) * exp(-arg * arg)"),
        "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10533 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using ::erfc;
    return erfc(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using ::exp;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(-2.0) /
                                  sqrt(static_cast<stce_9767>(3.14159265358979323846264338327950288)) *
                                  exp(-arg * arg));
  }
  static std::string stce_10519(std::string v) { return std::string("erfc") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(-2.0) / "
                    "sqrt(static_cast<DCO_TAPE_REAL>(3.14159265358979323846264338327950288)) * exp(-arg * arg)"),
        "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10534 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using ::asinh;
    return asinh(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using ::sqrt;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.) / sqrt(static_cast<stce_9767>(1.) + (arg * arg)));
  }
  static std::string stce_10519(std::string v) { return std::string("asinh") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(1.) / sqrt(static_cast<DCO_TAPE_REAL>(1.) + (arg*arg))"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10535 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using ::acosh;
    return acosh(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using ::sqrt;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.) / sqrt((arg * arg) - static_cast<stce_9767>(1.)));
  }
  static std::string stce_10519(std::string v) { return std::string("acosh") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(1.) / sqrt((arg*arg) - static_cast<DCO_TAPE_REAL>(1.))"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10536 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using ::atanh;
    return atanh(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using ::atanh;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.) / (static_cast<stce_9767>(1.) - (arg * arg)));
  }
  static std::string stce_10519(std::string v) { return std::string("atanh") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(1.) / (static_cast<DCO_TAPE_REAL>(1.) - (arg*arg))"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10537 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using ::expm1;
    return expm1(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using ::exp;
    (void)_value;
    return static_cast<stce_9767>(exp(arg));
  }
  static std::string stce_10519(std::string v) { return std::string("expm1") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(std::string("exp(arg)"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10538 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using ::log1p;
    return log1p(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using ::log1p;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0) / (arg + static_cast<stce_9767>(1.0)));
  }
  static std::string stce_10519(std::string v) { return std::string("log1p") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / (arg + static_cast<DCO_TAPE_REAL>(1.0))"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10539 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& arg) {
    using ::log10;
    return log10(arg);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& arg) {
    using ::log10;
    (void)_value;
    return static_cast<stce_9767>(static_cast<stce_9767>(1.0) / (arg * static_cast<stce_9767>(log(10))));
  }
  static std::string stce_10519(std::string v) { return std::string("log10") + "(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    std::string stce_9836 = helper::stce_9833(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / (arg*static_cast<DCO_TAPE_REAL>(log(10)))"), "arg", v);
    stce_9836 = helper::stce_9833(stce_9836, "DCO_TAPE_REAL", "T");
    stce_9836 = helper::stce_9833(stce_9836, "static_cast<T>", "");
    stce_9836 = helper::stce_9833(stce_9836, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    stce_9836 = helper::stce_9833(stce_9836, "DCO_SQRT_EPS", "0.0");
    return stce_9836;
  }
};
template <class stce_9767> struct stce_10540 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& stce_10185) {
    return -stce_10185;
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767&, const stce_9778&) {
    return static_cast<stce_9767>(-1.0);
  }
  static std::string stce_10519(std::string v) { return "-" + v; }
  template <typename stce_9778> static std::string stce_10520(std::string, stce_9778 const&) { return "-1.0"; }
};
template <class stce_9767> struct stce_10541 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& stce_10185) {
    return stce_10185;
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767&, const stce_9778&) {
    return static_cast<stce_9767>(1.0);
  }
  static std::string stce_10519(std::string v) { return "+" + v; }
  template <typename stce_9778> static std::string stce_10520(std::string, stce_9778 const&) { return "1.0"; }
};
using ::fabs;
template <class stce_9767> struct stce_10542 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& stce_10185) {
    return fabs(stce_10185);
  }
  template <class stce_9778> static inline const stce_9767 stce_10184(const stce_9767&, const stce_9778& stce_10185) {
    if (stce_10185 < 0)
      return static_cast<stce_9767>(-1.0);
    else
      return static_cast<stce_9767>(1.0);
  }
  static std::string stce_10519(std::string v) { return "std::abs(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    return "(" + v + " < 0 ? -1.0 : 1.0)";
  }
};
using std::abs;
template <class stce_9767> struct stce_10543 {
  template <class stce_9778> static inline const stce_9767 stce_10183(const stce_9778& stce_10185) {
    return abs(stce_10185);
  }
  template <class stce_9778>
  static inline const stce_9767 stce_10184(const stce_9767& _value, const stce_9778& stce_10185) {
    (void)_value;
    if (stce_10185 < 0)
      return static_cast<stce_9767>(-1.0);
    else
      return static_cast<stce_9767>(1.0);
  }
  static std::string stce_10519(std::string v) { return "std::abs(" + v + ")"; }
  template <typename stce_9778> static std::string stce_10520(std::string v, stce_9778 const&) {
    return "(" + v + " < 0 ? -1.0 : 1.0)";
  }
};
using std::atan2;
template <class stce_9767> struct stce_10544 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    (void)stce_10185;
    (void)stce_10186;
    return atan2(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return stce_10186 / (stce_10186 * stce_10186 + stce_10185 * stce_10185);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return -stce_10185 / (stce_10186 * stce_10186 + stce_10185 * stce_10185);
  }
};
template <class stce_9767> struct stce_10545 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    (void)stce_10185;
    (void)stce_10186;
    return atan2(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return stce_10186 / (stce_10186 * stce_10186 + stce_10185 * stce_10185);
  }
};
template <class stce_9767> struct stce_10546 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    (void)stce_10185;
    (void)stce_10186;
    return atan2(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return -stce_10185 / (stce_10186 * stce_10186 + stce_10185 * stce_10185);
  }
};
template <class stce_9767> struct stce_10547 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::pow;
    return pow(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    using std::pow;
    (void)_value;
    return stce_10186 * pow(stce_10185, stce_10186 - static_cast<stce_9767>(1.0));
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const& _value, const stce_10506& stce_10185, const stce_10157&) {
    using std::log;
    using std::pow;
    return log(stce_10185) * _value;
  }
};
template <class stce_9767> struct stce_10548 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::pow;
    return pow(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    using std::pow;
    (void)_value;
    return stce_10186 * pow(stce_10185, stce_10186 - static_cast<stce_10157>(1.0));
  }
};
template <class stce_9767> struct stce_10549 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::pow;
    return pow(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const& _value, const stce_10506& stce_10185, const stce_10157&) {
    using std::log;
    return log(stce_10185) * _value;
  }
};
template <class stce_9767> struct stce_10550 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::ldexp;
    return ldexp(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const&, const stce_10506&, const stce_10157& stce_10186) {
    using std::pow;
    return pow(static_cast<stce_9767>(2.0), stce_10186);
  }
};
template <class stce_9767> struct stce_10551 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::frexp;
    return frexp(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const&, const stce_10506& stce_10185, const stce_10157&) {
    using std::pow;
    int stce_10031;
    frexp(stce_10185, &stce_10031);
    return pow(static_cast<stce_9767>(2.0), -stce_10031);
  }
};
template <typename stce_9806, size_t stce_9807, typename stce_10552> struct stce_10553 {
  template <class stce_9778>
  static inline const vector_ns::vector_t<stce_9806, stce_9807>
  stce_10184(const vector_ns::vector_t<stce_9806, stce_9807>& _value, const stce_9778& stce_9808) {
    vector_ns::vector_t<stce_9806, stce_9807> stce_9836;
    for (size_t stce_9853 = 0; stce_9853 < stce_9807; ++stce_9853) {
      stce_9836[stce_9853] = stce_10552::stce_10184(_value[stce_9853], stce_9808[stce_9853]);
    }
    return stce_9836;
  }
};
template <typename stce_9806, size_t stce_9807>
struct stce_10543<vector_ns::vector_t<stce_9806, stce_9807>>
    : public stce_10553<stce_9806, stce_9807, stce_10543<stce_9806>> {
  template <class stce_9778>
  static inline const vector_ns::vector_t<stce_9806, stce_9807> stce_10183(const stce_9778& stce_10185) {
    return abs(stce_10185);
  }
};
template <typename stce_9806, size_t stce_9807>
struct stce_10542<vector_ns::vector_t<stce_9806, stce_9807>>
    : public stce_10553<stce_9806, stce_9807, stce_10542<stce_9806>> {
  template <class stce_9778>
  static inline const vector_ns::vector_t<stce_9806, stce_9807> stce_10183(const stce_9778& stce_10185) {
    return fabs(stce_10185);
  }
};
template <typename stce_9806, size_t stce_9807>
struct stce_10530<vector_ns::vector_t<stce_9806, stce_9807>>
    : public stce_10553<stce_9806, stce_9807, stce_10530<stce_9806>> {
  template <class stce_9778>
  static inline const vector_ns::vector_t<stce_9806, stce_9807> stce_10183(const stce_9778& arg) {
    return sqrt(arg);
  }
};
using ::hypot;
template <class stce_9767> struct stce_10554 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    (void)stce_10185;
    (void)stce_10186;
    return hypot(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return stce_10185 / _value;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return stce_10186 / _value;
  }
};
template <class stce_9767> struct stce_10555 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    (void)stce_10185;
    (void)stce_10186;
    return hypot(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return stce_10185 / _value;
  }
};
template <class stce_9767> struct stce_10556 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    (void)stce_10185;
    (void)stce_10186;
    return hypot(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const& _value, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    (void)_value;
    (void)stce_10185;
    (void)stce_10186;
    return stce_10186 / _value;
  }
};
template <class stce_9767> struct stce_10557 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::max;
    return max(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const&, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    return dco::passive_value(stce_10185) > dco::passive_value(stce_10186) ? 1.0 : 0.0;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const&, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    return dco::passive_value(stce_10185) > dco::passive_value(stce_10186) ? 0.0 : 1.0;
  }
};
template <class stce_9767> struct stce_10558 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::max;
    return max(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const&, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    return dco::passive_value(stce_10185) > dco::passive_value(stce_10186) ? 1.0 : 0.0;
  }
};
template <class stce_9767> struct stce_10559 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::max;
    return max(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const&, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    return dco::passive_value(stce_10185) > dco::passive_value(stce_10186) ? 0.0 : 1.0;
  }
};
template <class stce_9767> struct stce_10560 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::min;
    return min(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const&, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    return dco::passive_value(stce_10185) < dco::passive_value(stce_10186) ? 1.0 : 0.0;
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const&, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    return dco::passive_value(stce_10185) < dco::passive_value(stce_10186) ? 0.0 : 1.0;
  }
};
template <class stce_9767> struct stce_10561 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::min;
    return min(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10187(stce_9767 const&, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    return dco::passive_value(stce_10185) < dco::passive_value(stce_10186) ? 1.0 : 0.0;
  }
};
template <class stce_9767> struct stce_10562 {
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10183(const stce_10506& stce_10185, const stce_10157& stce_10186) {
    using std::min;
    return min(stce_10185, stce_10186);
  }
  template <class stce_10506, class stce_10157>
  static inline const stce_9767 stce_10188(stce_9767 const&, const stce_10506& stce_10185,
                                           const stce_10157& stce_10186) {
    return dco::passive_value(stce_10185) < dco::passive_value(stce_10186) ? 0.0 : 1.0;
  }
};
} // namespace stce_10504
} // namespace dco
namespace dco {
namespace internal {
template <typename stce_9778>
typename std::enable_if<dco::mode<stce_9778>::is_dco_type, bool>::type operator!(stce_9778 const& stce_9808) {
  return !dco::passive_value(stce_9808);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator-(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10540<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10540<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10540<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10540<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator-(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10540<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator+(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10541<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10541<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10541<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10541<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator+(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10541<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
sin(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10518<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
sin(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10518<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
sin(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10518<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
sin(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10518<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
sin(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10518<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
cos(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10521<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
cos(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10521<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
cos(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10521<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
cos(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10521<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
cos(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10521<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
tan(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10522<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
tan(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10522<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
tan(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10522<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
tan(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10522<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
tan(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10522<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
cosh(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10523<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
cosh(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10523<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
cosh(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10523<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
cosh(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10523<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
cosh(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10523<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
sinh(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10524<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
sinh(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10524<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
sinh(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10524<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
sinh(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10524<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
sinh(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10524<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
asin(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10526<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
asin(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10526<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
asin(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10526<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
asin(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10526<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
asin(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10526<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
acos(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10527<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
acos(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10527<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
acos(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10527<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
acos(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10527<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
acos(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10527<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
exp(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10529<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
exp(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10529<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
exp(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10529<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
exp(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10529<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
exp(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10529<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
atan(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10528<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10528<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10528<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10528<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
atan(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10528<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
tanh(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10525<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
tanh(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10525<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
tanh(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10525<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
tanh(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10525<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
tanh(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10525<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
sqrt(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10530<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
sqrt(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10530<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
sqrt(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10530<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
sqrt(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10530<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
sqrt(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10530<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
log(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10531<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
log(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10531<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
log(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10531<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
log(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10531<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
log(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10531<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
erf(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10532<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
erf(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10532<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
erf(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10532<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
erf(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10532<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
erf(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10532<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
erfc(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10533<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
erfc(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10533<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
erfc(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10533<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
erfc(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10533<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
erfc(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10533<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
expm1(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10537<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
expm1(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10537<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
expm1(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10537<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
expm1(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10537<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
expm1(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10537<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
asinh(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10534<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
asinh(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10534<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
asinh(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10534<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
asinh(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10534<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
asinh(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10534<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
acosh(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10535<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
acosh(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10535<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
acosh(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10535<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
acosh(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10535<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
acosh(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10535<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
atanh(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10536<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atanh(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10536<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atanh(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10536<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atanh(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10536<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
atanh(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10536<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
log1p(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10538<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
log1p(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10538<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
log1p(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10538<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
log1p(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10538<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
log1p(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10538<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
log10(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10539<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
log10(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10539<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
log10(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10539<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
log10(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10539<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
log10(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10539<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
fabs(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10542<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
fabs(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10542<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
fabs(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10542<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
fabs(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10542<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
fabs(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10542<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
abs(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10543<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
abs(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10543<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
abs(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10543<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
abs(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::stce_10504::stce_10543<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
abs(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092) {
  return dco::internal::stce_9772<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::stce_10504::stce_10543<stce_9767>>(stce_10092);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator+(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator+(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator+(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator+(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator+(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator+(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator+(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator+(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator+(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator+(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10505<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator+(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
operator+(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
                                  dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator+(const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10511<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
operator+(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
      dco::internal::active_type<stce_9767, stce_10127>, dco::stce_10504::stce_10511<stce_9767>>(stce_10092,
                                                                                                 stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator+(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                                  dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
operator+(
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
      typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator+(const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10511<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
operator+(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10511<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator+(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10511<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator+(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10511<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator+(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10511<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator+(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10511<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator+(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10510<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator+(
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10511<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator+(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10511<stce_9767>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t, typename dco::mode<stce_9881>::active_t,
                             stce_9881,
                             dco::stce_10504::stce_10505<typename dco::mode<stce_9881>::active_value_t>>>::type
operator+(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t,
                                  typename dco::mode<stce_9881>::active_t, stce_9881,
                                  dco::stce_10504::stce_10505<typename dco::mode<stce_9881>::active_value_t>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                             typename dco::mode<stce_9778>::active_t,
                             dco::stce_10504::stce_10505<typename dco::mode<stce_9778>::active_value_t>>>::type
operator+(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                                  typename dco::mode<stce_9778>::active_t,
                                  dco::stce_10504::stce_10505<typename dco::mode<stce_9778>::active_value_t>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator-(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator-(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator-(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator-(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator-(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator-(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator-(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator-(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator-(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator-(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10507<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator-(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
operator-(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
                                  dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator-(const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10513<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
operator-(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
      dco::internal::active_type<stce_9767, stce_10127>, dco::stce_10504::stce_10513<stce_9767>>(stce_10092,
                                                                                                 stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator-(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                                  dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
operator-(
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
      typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator-(const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10513<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
operator-(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10513<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator-(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10513<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator-(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10513<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator-(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10513<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator-(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10513<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator-(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10512<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator-(
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10513<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator-(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10513<stce_9767>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t, typename dco::mode<stce_9881>::active_t,
                             stce_9881,
                             dco::stce_10504::stce_10507<typename dco::mode<stce_9881>::active_value_t>>>::type
operator-(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t,
                                  typename dco::mode<stce_9881>::active_t, stce_9881,
                                  dco::stce_10504::stce_10507<typename dco::mode<stce_9881>::active_value_t>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                             typename dco::mode<stce_9778>::active_t,
                             dco::stce_10504::stce_10507<typename dco::mode<stce_9778>::active_value_t>>>::type
operator-(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                                  typename dco::mode<stce_9778>::active_t,
                                  dco::stce_10504::stce_10507<typename dco::mode<stce_9778>::active_value_t>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator*(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator*(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator*(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator*(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator*(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator*(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator*(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator*(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator*(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator*(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10508<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator*(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
operator*(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
                                  dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator*(const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10515<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
operator*(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
      dco::internal::active_type<stce_9767, stce_10127>, dco::stce_10504::stce_10515<stce_9767>>(stce_10092,
                                                                                                 stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator*(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                                  dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
operator*(
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
      typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator*(const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10515<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
operator*(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10515<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator*(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10515<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator*(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10515<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator*(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10515<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator*(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10515<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator*(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10514<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator*(
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10515<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator*(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10515<stce_9767>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t, typename dco::mode<stce_9881>::active_t,
                             stce_9881,
                             dco::stce_10504::stce_10508<typename dco::mode<stce_9881>::active_value_t>>>::type
operator*(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t,
                                  typename dco::mode<stce_9881>::active_t, stce_9881,
                                  dco::stce_10504::stce_10508<typename dco::mode<stce_9881>::active_value_t>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                             typename dco::mode<stce_9778>::active_t,
                             dco::stce_10504::stce_10508<typename dco::mode<stce_9778>::active_value_t>>>::type
operator*(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                                  typename dco::mode<stce_9778>::active_t,
                                  dco::stce_10504::stce_10508<typename dco::mode<stce_9778>::active_value_t>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator/(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator/(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator/(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator/(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator/(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator/(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator/(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator/(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator/(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator/(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10509<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator/(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
operator/(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
                                  dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
operator/(const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10517<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
operator/(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
      dco::internal::active_type<stce_9767, stce_10127>, dco::stce_10504::stce_10517<stce_9767>>(stce_10092,
                                                                                                 stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator/(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                                  dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
operator/(
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
      typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
operator/(const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10517<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
operator/(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10517<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator/(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10517<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator/(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10517<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator/(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10517<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator/(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10517<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator/(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10516<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
operator/(
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10517<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
operator/(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10517<stce_9767>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t, typename dco::mode<stce_9881>::active_t,
                             stce_9881,
                             dco::stce_10504::stce_10509<typename dco::mode<stce_9881>::active_value_t>>>::type
operator/(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t,
                                  typename dco::mode<stce_9881>::active_t, stce_9881,
                                  dco::stce_10504::stce_10509<typename dco::mode<stce_9881>::active_value_t>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                             typename dco::mode<stce_9778>::active_t,
                             dco::stce_10504::stce_10509<typename dco::mode<stce_9778>::active_value_t>>>::type
operator/(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                                  typename dco::mode<stce_9778>::active_t,
                                  dco::stce_10504::stce_10509<typename dco::mode<stce_9778>::active_value_t>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
atan2(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
atan2(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
atan2(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
atan2(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
atan2(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
atan2(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
atan2(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
atan2(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
atan2(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
atan2(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10544<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
atan2(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
atan2(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
                                  dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
atan2(const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10546<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
atan2(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
      dco::internal::active_type<stce_9767, stce_10127>, dco::stce_10504::stce_10546<stce_9767>>(stce_10092,
                                                                                                 stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
atan2(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                                  dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
atan2(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
      typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
atan2(const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10546<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
atan2(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10546<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
atan2(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10546<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
atan2(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10546<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
atan2(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10546<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
atan2(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10546<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
atan2(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10545<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
atan2(const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10546<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
atan2(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10546<stce_9767>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t, typename dco::mode<stce_9881>::active_t,
                             stce_9881,
                             dco::stce_10504::stce_10544<typename dco::mode<stce_9881>::active_value_t>>>::type
atan2(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t,
                                  typename dco::mode<stce_9881>::active_t, stce_9881,
                                  dco::stce_10504::stce_10544<typename dco::mode<stce_9881>::active_value_t>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                             typename dco::mode<stce_9778>::active_t,
                             dco::stce_10504::stce_10544<typename dco::mode<stce_9778>::active_value_t>>>::type
atan2(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                                  typename dco::mode<stce_9778>::active_t,
                                  dco::stce_10504::stce_10544<typename dco::mode<stce_9778>::active_value_t>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
pow(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
pow(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
pow(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
pow(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
pow(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
pow(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
pow(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
pow(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
pow(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
pow(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10547<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
pow(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
pow(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
                                  dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
pow(const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10549<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
pow(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
      dco::internal::active_type<stce_9767, stce_10127>, dco::stce_10504::stce_10549<stce_9767>>(stce_10092,
                                                                                                 stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
pow(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                                  dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
pow(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
      typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
pow(const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10549<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
pow(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10549<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
pow(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10549<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
pow(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10549<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
pow(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10549<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
pow(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10549<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
pow(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10548<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
pow(const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10549<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
pow(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10549<stce_9767>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t, typename dco::mode<stce_9881>::active_t,
                             stce_9881,
                             dco::stce_10504::stce_10547<typename dco::mode<stce_9881>::active_value_t>>>::type
pow(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t,
                                  typename dco::mode<stce_9881>::active_t, stce_9881,
                                  dco::stce_10504::stce_10547<typename dco::mode<stce_9881>::active_value_t>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                             typename dco::mode<stce_9778>::active_t,
                             dco::stce_10504::stce_10547<typename dco::mode<stce_9778>::active_value_t>>>::type
pow(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                                  typename dco::mode<stce_9778>::active_t,
                                  dco::stce_10504::stce_10547<typename dco::mode<stce_9778>::active_value_t>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
hypot(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
hypot(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
hypot(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
hypot(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
hypot(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
hypot(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
hypot(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
hypot(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
hypot(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
hypot(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10554<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
hypot(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
hypot(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
      const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
                                  dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
hypot(const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10556<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
hypot(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
      const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
      dco::internal::active_type<stce_9767, stce_10127>, dco::stce_10504::stce_10556<stce_9767>>(stce_10092,
                                                                                                 stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
hypot(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                                  dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
hypot(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
      const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
      typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
hypot(const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10556<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
hypot(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
      const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10556<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
hypot(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10556<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
hypot(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10092,
      const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10556<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
hypot(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10556<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
hypot(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10092,
      const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10556<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
hypot(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
      const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10555<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
hypot(const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10556<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
hypot(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
          stce_10092,
      const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10556<stce_9767>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t, typename dco::mode<stce_9881>::active_t,
                             stce_9881,
                             dco::stce_10504::stce_10554<typename dco::mode<stce_9881>::active_value_t>>>::type
hypot(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t,
                                  typename dco::mode<stce_9881>::active_t, stce_9881,
                                  dco::stce_10504::stce_10554<typename dco::mode<stce_9881>::active_value_t>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                             typename dco::mode<stce_9778>::active_t,
                             dco::stce_10504::stce_10554<typename dco::mode<stce_9778>::active_value_t>>>::type
hypot(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                                  typename dco::mode<stce_9778>::active_t,
                                  dco::stce_10504::stce_10554<typename dco::mode<stce_9778>::active_value_t>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
ldexp(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092, int stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>, int,
                                  dco::stce_10504::stce_10550<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
ldexp(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092, int stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, int,
                                  dco::stce_10504::stce_10550<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
ldexp(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092, int stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  int, dco::stce_10504::stce_10550<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
ldexp(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092, int stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  int, dco::stce_10504::stce_10550<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
ldexp(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092, int stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  int, dco::stce_10504::stce_10550<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
frexp(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092, int* stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>, int*,
                                  dco::stce_10504::stce_10551<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
frexp(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092, int* stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, int*,
                                  dco::stce_10504::stce_10551<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
frexp(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092, int* stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  int*, dco::stce_10504::stce_10551<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
frexp(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092, int* stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  int*, dco::stce_10504::stce_10551<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
frexp(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092, int* stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  int*, dco::stce_10504::stce_10551<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto operator==(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
static inline auto operator==(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator==(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator==(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator==(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10091(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
static inline auto operator==(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator==(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator==(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator==(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator==(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10091(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator==(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator==(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator==(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator==(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator==(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator==(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator==(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator==(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator==(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator==(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator==(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator==(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator==(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator==(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator==(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10091(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator==(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
           const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10094(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10094(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator==(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
           const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10095(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10095(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator==(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10094(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10094(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator==(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
           const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10095(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10095(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator==(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10094(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10094(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator==(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10095(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10095(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator==(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10094(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10094(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator==(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10095(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10095(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator==(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10094(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10094(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator==(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10095(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10095(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10094(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const stce_9778& stce_10092, const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10095(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10094(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const stce_9778& stce_10092, const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10095(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10094(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const stce_9778& stce_10092,
           const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10095(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10094(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const stce_9778& stce_10092,
           const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10095(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10094(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator==(const stce_9778& stce_10092,
           const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10095(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    bool>::type
operator==(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9881>::active_t::data_t::stce_10142::stce_10091(stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    bool>::type
operator==(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9778>::active_t::data_t::stce_10142::stce_10091(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto operator!=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
static inline auto operator!=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator!=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator!=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator!=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10096(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
static inline auto operator!=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator!=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator!=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator!=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator!=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10096(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator!=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator!=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator!=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator!=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator!=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator!=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator!=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator!=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator!=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator!=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator!=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator!=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator!=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator!=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator!=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10096(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator!=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
           const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10097(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10097(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator!=(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
           const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10098(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10098(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator!=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10097(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10097(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator!=(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
           const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10098(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10098(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator!=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10097(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10097(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator!=(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10098(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10098(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator!=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10097(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10097(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator!=(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10098(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10098(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator!=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10097(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10097(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator!=(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10098(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10098(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10097(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const stce_9778& stce_10092, const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10098(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10097(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const stce_9778& stce_10092, const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10098(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10097(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const stce_9778& stce_10092,
           const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10098(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10097(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const stce_9778& stce_10092,
           const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10098(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10097(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator!=(const stce_9778& stce_10092,
           const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10098(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    bool>::type
operator!=(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9881>::active_t::data_t::stce_10142::stce_10096(stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    bool>::type
operator!=(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9778>::active_t::data_t::stce_10142::stce_10096(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto operator<(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
static inline auto operator<(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10099(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
static inline auto operator<(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator<(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10099(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator<(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator<(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator<(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator<(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator<(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator<(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10099(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator<(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10100(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10100(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator<(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10101(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10101(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator<(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10100(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10100(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator<(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10101(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10101(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10100(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10100(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10101(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10101(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10100(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10100(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10101(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10101(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10100(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10100(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10101(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10101(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10100(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const stce_9778& stce_10092, const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10101(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10100(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const stce_9778& stce_10092, const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10101(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const stce_9778& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10100(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const stce_9778& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10101(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const stce_9778& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10100(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const stce_9778& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10101(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const stce_9778& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10100(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<(const stce_9778& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10101(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    bool>::type
operator<(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9881>::active_t::data_t::stce_10142::stce_10099(stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    bool>::type
operator<(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9778>::active_t::data_t::stce_10142::stce_10099(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto operator<=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
static inline auto operator<=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10102(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
static inline auto operator<=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator<=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator<=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10102(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator<=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator<=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator<=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator<=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator<=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator<=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator<=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10102(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator<=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
           const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10103(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10103(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator<=(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
           const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10104(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10104(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator<=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10103(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10103(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator<=(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
           const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10104(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10104(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10103(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10103(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<=(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10104(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10104(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10103(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10103(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<=(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10104(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10104(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10103(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10103(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator<=(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10104(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10104(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10103(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const stce_9778& stce_10092, const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10104(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10103(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const stce_9778& stce_10092, const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10104(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10103(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const stce_9778& stce_10092,
           const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10104(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10103(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const stce_9778& stce_10092,
           const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10104(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10103(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator<=(const stce_9778& stce_10092,
           const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10104(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    bool>::type
operator<=(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9881>::active_t::data_t::stce_10142::stce_10102(stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    bool>::type
operator<=(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9778>::active_t::data_t::stce_10142::stce_10102(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto operator>(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
static inline auto operator>(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10105(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
static inline auto operator>(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator>(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10105(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator>(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator>(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator>(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator>(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator>(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator>(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                             const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10105(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator>(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
          const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10106(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10106(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator>(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
          const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10107(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10107(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator>(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10106(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10106(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator>(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
          const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10107(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10107(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10106(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10106(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10107(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10107(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10106(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10106(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10107(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10107(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10106(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10106(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
              stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10107(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10107(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10106(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const stce_9778& stce_10092, const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10107(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10106(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const stce_9778& stce_10092, const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10107(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const stce_9778& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10106(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const stce_9778& stce_10092,
          const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10107(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const stce_9778& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10106(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const stce_9778& stce_10092,
          const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10107(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
          const stce_9778& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10106(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>(const stce_9778& stce_10092,
          const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10107(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    bool>::type
operator>(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9881>::active_t::data_t::stce_10142::stce_10105(stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    bool>::type
operator>(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9778>::active_t::data_t::stce_10142::stce_10105(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto operator>=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
static inline auto operator>=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10108(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
static inline auto operator>=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator>=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
static inline auto operator>=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10108(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator>=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator>=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator>=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator>=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
static inline auto operator>=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::active_type<stce_9767, stce_10567>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
static inline auto operator>=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
static inline auto operator>=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
                              const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10108(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator>=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
           const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10109(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10109(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline auto
operator>=(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
           const dco::internal::active_type<stce_9767, stce_10127>& stce_10093)
    -> decltype(dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10110(stce_10092,
                                                                                                  stce_10093)) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10110(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator>=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10109(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10109(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline auto
operator>=(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
           const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10110(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10110(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10109(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10109(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>=(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10110(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10110(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10109(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10109(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>=(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10110(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10110(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10109(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10109(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline auto
operator>=(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
               stce_10092,
           const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093)
    -> decltype(dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10110(
        stce_10092, stce_10093)) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10110(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10109(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const stce_9778& stce_10092, const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::active_type<stce_9767, stce_10127>::data_t::stce_10142::stce_10110(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092, const stce_9778& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10109(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const stce_9778& stce_10092, const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t::stce_10142::stce_10110(stce_10092,
                                                                                                     stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10109(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const stce_9778& stce_10092,
           const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10110(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10109(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const stce_9778& stce_10092,
           const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10110(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
           const stce_9778& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10109(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, typename stce_9778>
static inline typename dco::dco_type_constructable_from<stce_9778, bool>::type
operator>=(const stce_9778& stce_10092,
           const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t::stce_10142::stce_10110(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    bool>::type
operator>=(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9881>::active_t::data_t::stce_10142::stce_10108(stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
static inline typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    bool>::type
operator>=(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::mode<stce_9778>::active_t::data_t::stce_10142::stce_10108(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
static inline void stce_10568(dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  double stce_10031 = 0;
  get(stce_9808, stce_10031);
  stce_9808 = stce_10031;
}
template <class stce_9767, class stce_10127>
static inline std::istream& operator>>(std::istream& in, dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  stce_9767& stce_10031 = stce_9808._value();
  in >> stce_10031;
  return in;
}
using std::ceil;
using std::floor;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::lround;
using std::round;
template <class stce_9767, class stce_10127>
static inline bool isnan(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  return isnan(stce_9808._value());
}
template <class stce_9767, class stce_10127>
static inline bool isnormal(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  return isnormal(stce_9808._value());
}
template <class stce_9767, class stce_10127>
static inline bool isinf(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  return isinf(stce_9808._value());
}
template <class stce_9767, class stce_10127>
static inline double ceil(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  return ceil(stce_9808._value());
}
template <class stce_9767, class stce_10127>
static inline double floor(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  return floor(stce_9808._value());
}
template <class stce_9767, class stce_10127>
static inline bool isfinite(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  return isfinite(stce_9808._value());
}
template <class stce_9767, class stce_10127>
static inline typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t
round(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  return round(dco::passive_value(stce_9808));
}
template <class stce_9767, class stce_10127>
static inline long int lround(const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  return lround(dco::passive_value(stce_9808));
}
using std::ceil;
using std::floor;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::lround;
using std::round;
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isnan(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isnan(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isnormal(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isnormal(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isinf(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isinf(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline double ceil(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return ceil(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline double floor(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return floor(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isfinite(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isfinite(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t
round(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return round(dco::passive_value(stce_9808));
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline long int
lround(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return lround(dco::passive_value(stce_9808));
}
using std::ceil;
using std::floor;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::lround;
using std::round;
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isnan(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isnan(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isnormal(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isnormal(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isinf(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isinf(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline double ceil(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return ceil(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline double floor(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return floor(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isfinite(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isfinite(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t
round(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return round(dco::passive_value(stce_9808));
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline long int
lround(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return lround(dco::passive_value(stce_9808));
}
using std::ceil;
using std::floor;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::lround;
using std::round;
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isnan(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isnan(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isnormal(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isnormal(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isinf(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isinf(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline double ceil(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return ceil(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline double floor(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return floor(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline bool isfinite(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return isfinite(stce_9808._value());
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t
round(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return round(dco::passive_value(stce_9808));
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline long int
lround(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  return lround(dco::passive_value(stce_9808));
}
using std::ceil;
using std::floor;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::lround;
using std::round;
template <class stce_9767, class stce_10137, class stce_10131>
static inline bool isnan(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
  return isnan(stce_9808._value());
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline bool isnormal(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
  return isnormal(stce_9808._value());
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline bool isinf(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
  return isinf(stce_9808._value());
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline double ceil(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
  return ceil(stce_9808._value());
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline double floor(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
  return floor(stce_9808._value());
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline bool isfinite(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
  return isfinite(stce_9808._value());
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t
round(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
  return round(dco::passive_value(stce_9808));
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline long int lround(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
  return lround(dco::passive_value(stce_9808));
}
template <class stce_9767, class stce_10127>
static inline std::ostream& operator<<(std::ostream& out,
                                       const dco::internal::active_type<stce_9767, stce_10127>& stce_9808) {
  out << stce_9808._value();
  return out;
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline std::ostream&
operator<<(std::ostream& out,
           const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  out << stce_9808._value();
  return out;
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline std::ostream&
operator<<(std::ostream& out,
           const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  out << stce_9808._value();
  return out;
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
static inline std::ostream&
operator<<(std::ostream& out,
           const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
  out << stce_9808._value();
  return out;
}
template <class stce_9767, class stce_10137, class stce_10131>
static inline std::ostream& operator<<(std::ostream& out,
                                       const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
  out << stce_9808._value();
  return out;
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
max(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
max(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
max(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
max(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
max(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
max(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
max(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
max(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
max(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
max(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10557<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
max(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
max(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
                                  dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
max(const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10559<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
max(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
      dco::internal::active_type<stce_9767, stce_10127>, dco::stce_10504::stce_10559<stce_9767>>(stce_10092,
                                                                                                 stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
max(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                                  dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
max(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
      typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
max(const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10559<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
max(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10559<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
max(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10559<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
max(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10559<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
max(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10559<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
max(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10559<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
max(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10558<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
max(const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10559<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
max(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10559<stce_9767>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t, typename dco::mode<stce_9881>::active_t,
                             stce_9881,
                             dco::stce_10504::stce_10557<typename dco::mode<stce_9881>::active_value_t>>>::type
max(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t,
                                  typename dco::mode<stce_9881>::active_t, stce_9881,
                                  dco::stce_10504::stce_10557<typename dco::mode<stce_9881>::active_value_t>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                             typename dco::mode<stce_9778>::active_t,
                             dco::stce_10504::stce_10557<typename dco::mode<stce_9778>::active_value_t>>>::type
max(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                                  typename dco::mode<stce_9778>::active_t,
                                  dco::stce_10504::stce_10557<typename dco::mode<stce_9778>::active_value_t>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
min(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
min(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
min(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
min(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
min(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
min(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
min(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
min(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
min(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131, class stce_10565, class stce_10566, class stce_10564>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
min(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10567>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10567>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::active_type<stce_9767, stce_10567>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10563, class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9772<stce_9767, stce_10563, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9775<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9776<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131, class stce_10565, class stce_10566,
          class stce_10564>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>& stce_10093) {
  return dco::internal::stce_9775<stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
                                  dco::internal::stce_9777<stce_9767, stce_10565, stce_10566, stce_10564>,
                                  dco::stce_10504::stce_10560<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
min(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
min(const dco::internal::active_type<stce_9767, stce_10127>& stce_10092,
    const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::active_type<stce_9767, stce_10127>,
                                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
                                  dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>
min(const typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                                  dco::internal::active_type<stce_9767, stce_10127>,
                                  dco::stce_10504::stce_10562<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10127>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::active_type<stce_9767, stce_10127>::VALUE_TYPE,
                  typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t>::value,
    dco::internal::active_type<stce_9767, typename dco::internal::active_type<stce_9767, stce_10127>::data_t>>::type
min(const typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t& stce_10092,
    const dco::internal::active_type<stce_9767, stce_10127>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::active_type<stce_9767, stce_10127>>::passive_t,
      dco::internal::active_type<stce_9767, stce_10127>, dco::stce_10504::stce_10562<stce_9767>>(stce_10092,
                                                                                                 stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
min(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
                                  typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                                  dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
min(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>,
      typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
dco::internal::active_type<stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>
min(const typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10562<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10137, class stce_10131>
typename dco::enable_if<
    !dco::is_same<typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::VALUE_TYPE,
                  typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t>::value,
    dco::internal::active_type<stce_9767,
                               typename dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>::data_t>>::type
min(const typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t& stce_10092,
    const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::passive_t,
      dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>, dco::stce_10504::stce_10562<stce_9767>>(stce_10092,
                                                                                                           stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
min(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10562<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
min(const typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10092,
    const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10562<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
min(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10562<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
min(const typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10092,
    const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10562<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
min(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10092,
    const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10093) {
  return dco::internal::stce_9776<
      stce_9767, dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>,
      typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::stce_10504::stce_10561<stce_9767>>(stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
dco::internal::active_type<stce_9767,
                           typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>
min(const typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE& stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10562<stce_9767>>(
      stce_10092, stce_10093);
}
template <class stce_9767, class stce_10129, class stce_10130, class stce_10131>
typename dco::enable_if<
    !dco::is_same<
        typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::VALUE_TYPE,
        typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t>::value,
    dco::internal::active_type<
        stce_9767, typename dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>::data_t>>::type
min(const typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t&
        stce_10092,
    const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_10093) {
  return dco::internal::stce_9777<
      stce_9767, typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::passive_t,
      dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>, dco::stce_10504::stce_10562<stce_9767>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9881>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9778>::value ||
      (dco::mode<stce_9778>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9778::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9778>::active_t, typename dco::mode<stce_9881>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t, typename dco::mode<stce_9881>::active_t,
                             stce_9881,
                             dco::stce_10504::stce_10560<typename dco::mode<stce_9881>::active_value_t>>>::type
min(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9881>::active_value_t,
                                  typename dco::mode<stce_9881>::active_t, stce_9881,
                                  dco::stce_10504::stce_10560<typename dco::mode<stce_9881>::active_value_t>>(
      stce_10092, stce_10093);
}
template <typename stce_9778, typename stce_9881>
typename enable_if<
    (dco::mode<stce_9778>::order > 0 &&
     (dco::internal::is_gbcp_type<stce_9881>::value ||
      (dco::mode<stce_9881>::is_intermediate_type && dco::internal::is_gbcp_type<typename stce_9881::data_t>::value)) &&
     dco::is_same<typename dco::mode<stce_9881>::active_t, typename dco::mode<stce_9778>::active_t>::value),
    dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                             typename dco::mode<stce_9778>::active_t,
                             dco::stce_10504::stce_10560<typename dco::mode<stce_9778>::active_value_t>>>::type
min(const stce_9778& stce_10092, const stce_9881& stce_10093) {
  return dco::internal::stce_9775<typename dco::mode<stce_9778>::active_value_t, stce_9778,
                                  typename dco::mode<stce_9778>::active_t,
                                  dco::stce_10504::stce_10560<typename dco::mode<stce_9778>::active_value_t>>(
      stce_10092, stce_10093);
}
} // namespace internal
} // namespace dco

namespace dco {
namespace helper {
template <typename stce_9778> class complex_t {
private:
  stce_9778 stce_10569;
  stce_9778 stce_10570;

public:
  DCO_STRONG_INLINE complex_t(stce_9778 const& real = 0.0, stce_9778 const& imag = 0.0)
      : stce_10569(real), stce_10570(imag) {}
  template <typename stce_9881> complex_t(std::complex<stce_9881> const& stce_10571) {
    stce_10569 = stce_10571.real();
    stce_10570 = stce_10571.imag();
  }
  template <typename stce_9881> complex_t& operator=(stce_9881 const& stce_9909) {
    stce_10569 = stce_9909;
    stce_10570 = stce_9778();
    return *this;
  }
  template <typename stce_9881> complex_t& operator=(std::complex<stce_9881> const& stce_9909) {
    stce_10569 = stce_9909.real();
    stce_10570 = stce_9909.imag();
    return *this;
  }
  DCO_STRONG_INLINE stce_9778 real() const { return stce_10569; }
  DCO_STRONG_INLINE stce_9778 imag() const { return stce_10570; }
  DCO_STRONG_INLINE stce_9778& real() { return stce_10569; }
  DCO_STRONG_INLINE stce_9778& imag() { return stce_10570; }
  DCO_STRONG_INLINE void real(stce_9778 const& real) { stce_10569 = real; }
  DCO_STRONG_INLINE void imag(stce_9778 const& imag) { stce_10570 = imag; }
};
} // namespace helper
} // namespace dco
namespace std {
template <class stce_9767, typename stce_10572>
class complex<dco::internal::active_type<stce_9767, stce_10572>>
    : public dco::helper::complex_t<dco::internal::active_type<stce_9767, stce_10572>> {
public:
  typedef dco::internal::active_type<stce_9767, stce_10572> active_t;
  typedef dco::helper::complex_t<active_t> stce_10573;
  complex(active_t const& real = active_t(), active_t const& imag = active_t()) : stce_10573(real, imag) {}
  template <typename TYPE>
  complex(TYPE const& real, typename dco::dco_type_constructable_from<TYPE>::type* = 0) : stce_10573(real, TYPE()) {}
  template <typename TYPE>
  complex(TYPE const& real,
          typename dco::enable_if<(dco::mode<TYPE>::is_dco_type &&
                                   dco::stce_9886<dco::mode<TYPE>, dco::mode<active_t>>::value) ||
                                      dco::is_same<TYPE, typename dco::mode<active_t>::passive_t>::value,
                                  void*>::type = NULL)
      : stce_10573(real, TYPE()) {}
  template <typename stce_9881> complex(complex<stce_9881> const& stce_10571) : stce_10573(stce_10571) {}
  complex& operator=(active_t const& stce_9909) {
    static_cast<stce_10573&>(*this) = stce_9909;
    return *this;
  }
  template <typename stce_9881> complex& operator=(complex<stce_9881> const& stce_9909) {
    static_cast<stce_10573&>(*this) = stce_9909;
    return *this;
  }
  template <typename TYPE>
  typename dco::dco_type_constructable_from<TYPE, complex>::type& operator=(const TYPE& stce_9909) {
    static_cast<stce_10573&>(*this) = stce_9909;
    return *this;
  }
  complex& operator=(typename dco::mode<active_t>::passive_t const& stce_9909) {
    static_cast<stce_10573&>(*this) = stce_9909;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE complex(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808)
      : stce_10573(
            stce_9808,
            typename dco::mode<dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>>::active_t()) {}
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE complex&
  operator=(const dco::internal::stce_9775<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    static_cast<stce_10573&>(*this) = stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE complex(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808)
      : stce_10573(
            stce_9808,
            typename dco::mode<dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>>::active_t()) {}
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE complex&
  operator=(const dco::internal::stce_9776<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    static_cast<stce_10573&>(*this) = stce_9808;
    return *this;
  }
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE complex(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808)
      : stce_10573(
            stce_9808,
            typename dco::mode<dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>>::active_t()) {}
  template <class stce_10129, class stce_10130, class stce_10131>
  DCO_ALWAYS_INLINE complex&
  operator=(const dco::internal::stce_9777<stce_9767, stce_10129, stce_10130, stce_10131>& stce_9808) {
    static_cast<stce_10573&>(*this) = stce_9808;
    return *this;
  }
  template <class stce_10137, class stce_10131>
  DCO_ALWAYS_INLINE complex(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808)
      : stce_10573(stce_9808,
                   typename dco::mode<dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>>::active_t()) {}
  template <class stce_10137, class stce_10131>
  DCO_ALWAYS_INLINE complex& operator=(const dco::internal::stce_9772<stce_9767, stce_10137, stce_10131>& stce_9808) {
    static_cast<stce_10573&>(*this) = stce_9808;
    return *this;
  }
  DCO_STRONG_INLINE complex operator-() const { return complex(-this->real(), -this->imag()); }
};
template <typename stce_10506, typename stce_10157, bool stce_10574 = true> struct stce_10575 {
  typedef typename dco::stce_9880<
      dco::mode<stce_10506>::is_dco_type && !dco::mode<stce_10506>::is_intermediate_type, stce_10506,
      typename dco::stce_9880<dco::mode<stce_10157>::is_dco_type && !dco::mode<stce_10157>::is_intermediate_type,
                              stce_10157, void>::type>::type stce_10576;
  typedef typename dco::stce_9880<dco::is_same<stce_10576, stce_10506>::value, stce_10157, stce_10506>::type stce_10577;
  static const bool stce_10578 =
      (stce_10574 || dco::is_same<stce_10576, stce_10506>::value) && !dco::is_same<stce_10576, void>::value &&
      (dco::is_same<stce_10576, typename dco::mode<stce_10577>::active_t>::value ||
       (dco::mode<stce_10577>::is_dco_type && dco::stce_9886<dco::mode<stce_10577>, dco::mode<stce_10576>>::value) ||
       dco::is_same<stce_10577, typename dco::mode<stce_10576>::passive_t>::value);
};
template <typename stce_10506, typename stce_10157, bool stce_10449 = false> struct stce_10579 {};
template <typename stce_10506, typename stce_10157> struct stce_10579<stce_10506, stce_10157, true> {
  typedef typename stce_10575<stce_10506, stce_10157>::stce_10576 type;
  typedef complex<type> stce_10580;
};
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
cos(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
cosh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
exp(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
log(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
log10(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
sin(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
sinh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
sqrt(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
tan(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
tanh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
asin(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
asinh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
acos(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
acosh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
atan(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
atanh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
proj(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE dco::internal::active_type<stce_9767, stce_10572>
abs(complex<dco::internal::active_type<stce_9767, stce_10572>> const&);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE dco::internal::active_type<stce_9767, stce_10572>
arg(complex<dco::internal::active_type<stce_9767, stce_10572>> const&);
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
polar(dco::internal::active_type<stce_9767, stce_10572> const&,
      const dco::internal::active_type<stce_9767, stce_10572>& = 0);
template <typename stce_9778>
complex<stce_9778> stce_10581(complex<stce_9778> const& stce_10092, complex<stce_9778> const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = stce_10584 + stce_10585;
    stce_10582.real(stce_10092.real() + stce_10093.real());
    stce_10582.imag(stce_10092.imag() + stce_10093.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10092.real() + stce_10093.real());
    stce_10582.imag(stce_10092.imag() + stce_10093.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10581(complex<stce_9778> const& stce_10092, stce_9778 const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    passive_t stce_10585(dco::passive_value(stce_10093));
    stce_10583 = stce_10584 + stce_10585;
    stce_10582.real(stce_10092.real() + stce_10093);
    stce_10582.imag(stce_10092.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10092.real() + stce_10093);
    stce_10582.imag(stce_10092.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10581(stce_9778 const& stce_10092, complex<stce_9778> const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    passive_t stce_10584(dco::passive_value(stce_10092));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = stce_10584 + stce_10585;
    stce_10582.real(stce_10092 + stce_10093.real());
    stce_10582.imag(stce_10093.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10092 + stce_10093.real());
    stce_10582.imag(stce_10093.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10586(complex<stce_9778> const& stce_10092, complex<stce_9778> const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = stce_10584 - stce_10585;
    stce_10582.real(stce_10092.real() - stce_10093.real());
    stce_10582.imag(stce_10092.imag() - stce_10093.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10092.real() - stce_10093.real());
    stce_10582.imag(stce_10092.imag() - stce_10093.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10586(complex<stce_9778> const& stce_10092, stce_9778 const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    passive_t stce_10585(dco::passive_value(stce_10093));
    stce_10583 = stce_10584 - stce_10585;
    stce_10582.real(stce_10092.real() - stce_10093);
    stce_10582.imag(stce_10092.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10092.real() - stce_10093);
    stce_10582.imag(stce_10092.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10586(stce_9778 const& stce_10092, complex<stce_9778> const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    passive_t stce_10584(dco::passive_value(stce_10092));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = stce_10584 - stce_10585;
    stce_10582.real(stce_10092 - stce_10093.real());
    stce_10582.imag(-stce_10093.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10092 - stce_10093.real());
    stce_10582.imag(-stce_10093.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10587(complex<stce_9778> const& stce_10092, complex<stce_9778> const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = stce_10584 * stce_10585;
    stce_10582.real(stce_10092.real() * stce_10093.real() - stce_10092.imag() * stce_10093.imag());
    stce_10582.imag(stce_10092.real() * stce_10093.imag() + stce_10092.imag() * stce_10093.real());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10092.real() * stce_10093.real() - stce_10092.imag() * stce_10093.imag());
    stce_10582.imag(stce_10092.real() * stce_10093.imag() + stce_10092.imag() * stce_10093.real());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10587(complex<stce_9778> const& stce_10092, stce_9778 const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    passive_t stce_10585(dco::passive_value(stce_10093));
    stce_10583 = stce_10584 * stce_10585;
    stce_10582.real(stce_10092.real() * stce_10093);
    stce_10582.imag(stce_10092.imag() * stce_10093);
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10092.real() * stce_10093);
    stce_10582.imag(stce_10092.imag() * stce_10093);
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10587(stce_9778 const& stce_10092, complex<stce_9778> const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    passive_t stce_10584(dco::passive_value(stce_10092));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = stce_10584 * stce_10585;
    stce_10582.real(stce_10092 * stce_10093.real());
    stce_10582.imag(stce_10092 * stce_10093.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10092 * stce_10093.real());
    stce_10582.imag(stce_10092 * stce_10093.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10588(complex<stce_9778> const& stce_10092, complex<stce_9778> const& stce_10093) {
  complex<stce_9778> stce_10047 = stce_10092 * complex<stce_9778>(stce_10093.real(), -stce_10093.imag());
  stce_9778 stce_10085 = stce_10093.real() * stce_10093.real() + stce_10093.imag() * stce_10093.imag();
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = stce_10584 / stce_10585;
    stce_10582.real(stce_10047.real() / stce_10085);
    stce_10582.imag(stce_10047.imag() / stce_10085);
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10047.real() / stce_10085);
    stce_10582.imag(stce_10047.imag() / stce_10085);
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10588(complex<stce_9778> const& stce_10092, stce_9778 const& stce_10093) {
  complex<stce_9778> stce_10047 = stce_10092 * stce_10093;
  stce_9778 stce_10085 = stce_10093 * stce_10093;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    passive_t stce_10585(dco::passive_value(stce_10093));
    stce_10583 = stce_10584 / stce_10585;
    stce_10582.real(stce_10047.real() / stce_10085);
    stce_10582.imag(stce_10047.imag() / stce_10085);
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10047.real() / stce_10085);
    stce_10582.imag(stce_10047.imag() / stce_10085);
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10588(stce_9778 const& stce_10092, complex<stce_9778> const& stce_10093) {
  complex<stce_9778> stce_10047 = stce_10092 * complex<stce_9778>(stce_10093.real(), -stce_10093.imag());
  stce_9778 stce_10085 = stce_10093.real() * stce_10093.real() + stce_10093.imag() * stce_10093.imag();
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    passive_t stce_10584(dco::passive_value(stce_10092));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = stce_10584 / stce_10585;
    stce_10582.real(stce_10047.real() / stce_10085);
    stce_10582.imag(stce_10047.imag() / stce_10085);
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10047.real() / stce_10085);
    stce_10582.imag(stce_10047.imag() / stce_10085);
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10589(complex<stce_9778> const& stce_10092, complex<stce_9778> const& stce_10093) {
  complex<stce_9778> stce_10031;
  if (stce_10092 == stce_9778()) {
    stce_10031 = complex<stce_9778>();
  } else {
    stce_10031 = exp(stce_10093 * log(stce_10092));
  }
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = pow(stce_10584, stce_10585);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10589(complex<stce_9778> const& stce_10092, stce_9778 const& stce_10093) {
  complex<stce_9778> stce_10031;
  if (stce_10092.imag() == typename dco::mode<stce_9778>::active_t() &&
      stce_10092.real() > typename dco::mode<stce_9778>::active_t()) {
    stce_10031 = pow(stce_10092.real(), stce_10093);
  } else {
    complex<stce_9778> stce_10017 = log(stce_10092);
    stce_10031 = polar(static_cast<stce_9778>(exp(stce_10093 * stce_10017.real())),
                       static_cast<stce_9778>(stce_10093 * stce_10017.imag()));
  }
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    passive_t stce_10585(dco::passive_value(stce_10093));
    stce_10583 = pow(stce_10584, stce_10585);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778> stce_10589(stce_9778 const& stce_10092, complex<stce_9778> const& stce_10093) {
  complex<stce_9778> stce_10031;
  if (stce_10092 > stce_9778()) {
    stce_10031 = polar(static_cast<stce_9778>(pow(stce_10092, stce_10093.real())),
                       static_cast<stce_9778>(stce_10093.imag() * log(stce_10092)));
  } else {
    stce_10031 = pow(complex<stce_9778>(stce_10092), stce_10093);
  }
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    passive_t stce_10584(dco::passive_value(stce_10092));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10583 = pow(stce_10584, stce_10585);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778>
complex<stce_9778>& stce_10590(complex<stce_9778>& stce_10092, complex<stce_9778> const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10584 += stce_10585;
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() + stce_10093.real());
    stce_10031.imag(stce_10092.imag() + stce_10093.imag());
    stce_10092 = stce_10031;
    dco::passive_value(stce_10092.real()) = stce_10584.real();
    dco::passive_value(stce_10092.imag()) = stce_10584.imag();
    return stce_10092;
  } else {
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() + stce_10093.real());
    stce_10031.imag(stce_10092.imag() + stce_10093.imag());
    stce_10092 = stce_10031;
    return stce_10092;
  }
}
template <typename stce_9778>
complex<stce_9778>& stce_10590(complex<stce_9778>& stce_10092, stce_9778 const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    passive_t stce_10585(dco::passive_value(stce_10093));
    stce_10584 += stce_10585;
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() + stce_10093);
    stce_10031.imag(stce_10092.imag());
    stce_10092 = stce_10031;
    dco::passive_value(stce_10092.real()) = stce_10584.real();
    dco::passive_value(stce_10092.imag()) = stce_10584.imag();
    return stce_10092;
  } else {
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() + stce_10093);
    stce_10031.imag(stce_10092.imag());
    stce_10092 = stce_10031;
    return stce_10092;
  }
}
template <typename stce_9778>
complex<stce_9778>& stce_10591(complex<stce_9778>& stce_10092, complex<stce_9778> const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10584 -= stce_10585;
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() - stce_10093.real());
    stce_10031.imag(stce_10092.imag() - stce_10093.imag());
    stce_10092 = stce_10031;
    dco::passive_value(stce_10092.real()) = stce_10584.real();
    dco::passive_value(stce_10092.imag()) = stce_10584.imag();
    return stce_10092;
  } else {
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() - stce_10093.real());
    stce_10031.imag(stce_10092.imag() - stce_10093.imag());
    stce_10092 = stce_10031;
    return stce_10092;
  }
}
template <typename stce_9778>
complex<stce_9778>& stce_10591(complex<stce_9778>& stce_10092, stce_9778 const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    passive_t stce_10585(dco::passive_value(stce_10093));
    stce_10584 -= stce_10585;
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() - stce_10093);
    stce_10031.imag(stce_10092.imag());
    stce_10092 = stce_10031;
    dco::passive_value(stce_10092.real()) = stce_10584.real();
    dco::passive_value(stce_10092.imag()) = stce_10584.imag();
    return stce_10092;
  } else {
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() - stce_10093);
    stce_10031.imag(stce_10092.imag());
    stce_10092 = stce_10031;
    return stce_10092;
  }
}
template <typename stce_9778>
complex<stce_9778>& stce_10592(complex<stce_9778>& stce_10092, complex<stce_9778> const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10584 *= stce_10585;
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() * stce_10093.real() - stce_10092.imag() * stce_10093.imag());
    stce_10031.imag(stce_10092.real() * stce_10093.imag() + stce_10092.imag() * stce_10093.real());
    stce_10092 = stce_10031;
    dco::passive_value(stce_10092.real()) = stce_10584.real();
    dco::passive_value(stce_10092.imag()) = stce_10584.imag();
    return stce_10092;
  } else {
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() * stce_10093.real() - stce_10092.imag() * stce_10093.imag());
    stce_10031.imag(stce_10092.real() * stce_10093.imag() + stce_10092.imag() * stce_10093.real());
    stce_10092 = stce_10031;
    return stce_10092;
  }
}
template <typename stce_9778>
complex<stce_9778>& stce_10592(complex<stce_9778>& stce_10092, stce_9778 const& stce_10093) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    passive_t stce_10585(dco::passive_value(stce_10093));
    stce_10584 *= stce_10585;
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() * stce_10093);
    stce_10031.imag(stce_10092.imag() * stce_10093);
    stce_10092 = stce_10031;
    dco::passive_value(stce_10092.real()) = stce_10584.real();
    dco::passive_value(stce_10092.imag()) = stce_10584.imag();
    return stce_10092;
  } else {
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10092.real() * stce_10093);
    stce_10031.imag(stce_10092.imag() * stce_10093);
    stce_10092 = stce_10031;
    return stce_10092;
  }
}
template <typename stce_9778>
complex<stce_9778>& stce_10593(complex<stce_9778>& stce_10092, complex<stce_9778> const& stce_10093) {
  complex<stce_9778> stce_10047 = stce_10092 * complex<stce_9778>(stce_10093.real(), -stce_10093.imag());
  stce_9778 stce_10085 = stce_10093.real() * stce_10093.real() + stce_10093.imag() * stce_10093.imag();
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    complex<passive_t> stce_10585(dco::passive_value(stce_10093.real()), dco::passive_value(stce_10093.imag()));
    stce_10584 /= stce_10585;
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10047.real() / stce_10085);
    stce_10031.imag(stce_10047.imag() / stce_10085);
    stce_10092 = stce_10031;
    dco::passive_value(stce_10092.real()) = stce_10584.real();
    dco::passive_value(stce_10092.imag()) = stce_10584.imag();
    return stce_10092;
  } else {
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10047.real() / stce_10085);
    stce_10031.imag(stce_10047.imag() / stce_10085);
    stce_10092 = stce_10031;
    return stce_10092;
  }
}
template <typename stce_9778>
complex<stce_9778>& stce_10593(complex<stce_9778>& stce_10092, stce_9778 const& stce_10093) {
  complex<stce_9778> stce_10047 = stce_10092 * stce_10093;
  stce_9778 stce_10085 = stce_10093 * stce_10093;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    passive_t stce_10585(dco::passive_value(stce_10093));
    stce_10584 /= stce_10585;
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10047.real() / stce_10085);
    stce_10031.imag(stce_10047.imag() / stce_10085);
    stce_10092 = stce_10031;
    dco::passive_value(stce_10092.real()) = stce_10584.real();
    dco::passive_value(stce_10092.imag()) = stce_10584.imag();
    return stce_10092;
  } else {
    complex<stce_9778> stce_10031;
    stce_10031.real(stce_10047.real() / stce_10085);
    stce_10031.imag(stce_10047.imag() / stce_10085);
    stce_10092 = stce_10031;
    return stce_10092;
  }
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator+(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
          complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10581(stce_10092, stce_10093);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator+(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
          dco::internal::active_type<stce_9767, stce_10572> const& stce_10093) {
  return stce_10581(static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10092),
                    static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator+(dco::internal::active_type<stce_9767, stce_10572> const& stce_10092,
          complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10581(static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10092),
                    static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator+(complex<stce_10506> const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10581(stce_10092, stce_10093);
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator+(complex<stce_10506> const& stce_10092, stce_10157 const& stce_10093) {
  return stce_10581(
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10092),
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator+(stce_10506 const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10581(
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10092),
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator-(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
          complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10586(stce_10092, stce_10093);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator-(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
          dco::internal::active_type<stce_9767, stce_10572> const& stce_10093) {
  return stce_10586(static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10092),
                    static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator-(dco::internal::active_type<stce_9767, stce_10572> const& stce_10092,
          complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10586(static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10092),
                    static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator-(complex<stce_10506> const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10586(stce_10092, stce_10093);
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator-(complex<stce_10506> const& stce_10092, stce_10157 const& stce_10093) {
  return stce_10586(
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10092),
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator-(stce_10506 const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10586(
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10092),
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator*(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
          complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10587(stce_10092, stce_10093);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator*(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
          dco::internal::active_type<stce_9767, stce_10572> const& stce_10093) {
  return stce_10587(static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10092),
                    static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator*(dco::internal::active_type<stce_9767, stce_10572> const& stce_10092,
          complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10587(static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10092),
                    static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator*(complex<stce_10506> const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10587(stce_10092, stce_10093);
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator*(complex<stce_10506> const& stce_10092, stce_10157 const& stce_10093) {
  return stce_10587(
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10092),
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator*(stce_10506 const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10587(
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10092),
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator/(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
          complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10588(stce_10092, stce_10093);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator/(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
          dco::internal::active_type<stce_9767, stce_10572> const& stce_10093) {
  return stce_10588(static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10092),
                    static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
operator/(dco::internal::active_type<stce_9767, stce_10572> const& stce_10092,
          complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10588(static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10092),
                    static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator/(complex<stce_10506> const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10588(stce_10092, stce_10093);
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator/(complex<stce_10506> const& stce_10092, stce_10157 const& stce_10093) {
  return stce_10588(
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10092),
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    operator/(stce_10506 const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10588(
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10092),
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
pow(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
    complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10589(stce_10092, stce_10093);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
pow(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10092,
    dco::internal::active_type<stce_9767, stce_10572> const& stce_10093) {
  return stce_10589(static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10092),
                    static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
pow(dco::internal::active_type<stce_9767, stce_10572> const& stce_10092,
    complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10589(static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10092),
                    static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>>(stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    pow(complex<stce_10506> const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10589(stce_10092, stce_10093);
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    pow(complex<stce_10506> const& stce_10092, stce_10157 const& stce_10093) {
  return stce_10589(
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10092),
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::stce_10580
    pow(stce_10506 const& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10589(
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10092),
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>>(
          stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>&
operator+=(complex<dco::internal::active_type<stce_9767, stce_10572>>& stce_10092,
           complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10590(stce_10092, stce_10093);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>&
operator+=(complex<dco::internal::active_type<stce_9767, stce_10572>>& stce_10092,
           dco::internal::active_type<stce_9767, stce_10572> const& stce_10093) {
  return stce_10590(static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>&>(stce_10092),
                    static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157, false>::stce_10578>::stce_10580&
    operator+=(complex<stce_10506>& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10590(stce_10092, stce_10093);
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157, false>::stce_10578>::stce_10580&
    operator+=(complex<stce_10506>& stce_10092, stce_10157 const& stce_10093) {
  return stce_10590(
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>&>(
          stce_10092),
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>&
operator-=(complex<dco::internal::active_type<stce_9767, stce_10572>>& stce_10092,
           complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10591(stce_10092, stce_10093);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>&
operator-=(complex<dco::internal::active_type<stce_9767, stce_10572>>& stce_10092,
           dco::internal::active_type<stce_9767, stce_10572> const& stce_10093) {
  return stce_10591(static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>&>(stce_10092),
                    static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157, false>::stce_10578>::stce_10580&
    operator-=(complex<stce_10506>& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10591(stce_10092, stce_10093);
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157, false>::stce_10578>::stce_10580&
    operator-=(complex<stce_10506>& stce_10092, stce_10157 const& stce_10093) {
  return stce_10591(
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>&>(
          stce_10092),
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>&
operator*=(complex<dco::internal::active_type<stce_9767, stce_10572>>& stce_10092,
           complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10592(stce_10092, stce_10093);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>&
operator*=(complex<dco::internal::active_type<stce_9767, stce_10572>>& stce_10092,
           dco::internal::active_type<stce_9767, stce_10572> const& stce_10093) {
  return stce_10592(static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>&>(stce_10092),
                    static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157, false>::stce_10578>::stce_10580&
    operator*=(complex<stce_10506>& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10592(stce_10092, stce_10093);
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157, false>::stce_10578>::stce_10580&
    operator*=(complex<stce_10506>& stce_10092, stce_10157 const& stce_10093) {
  return stce_10592(
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>&>(
          stce_10092),
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10093));
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>&
operator/=(complex<dco::internal::active_type<stce_9767, stce_10572>>& stce_10092,
           complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_10093) {
  return stce_10593(stce_10092, stce_10093);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>&
operator/=(complex<dco::internal::active_type<stce_9767, stce_10572>>& stce_10092,
           dco::internal::active_type<stce_9767, stce_10572> const& stce_10093) {
  return stce_10593(static_cast<complex<dco::internal::active_type<stce_9767, stce_10572>>&>(stce_10092),
                    static_cast<dco::internal::active_type<stce_9767, stce_10572>>(stce_10093));
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157, false>::stce_10578>::stce_10580&
    operator/=(complex<stce_10506>& stce_10092, complex<stce_10157> const& stce_10093) {
  return stce_10593(stce_10092, stce_10093);
}
template <typename stce_10506, typename stce_10157>
DCO_STRONG_INLINE
    typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157, false>::stce_10578>::stce_10580&
    operator/=(complex<stce_10506>& stce_10092, stce_10157 const& stce_10093) {
  return stce_10593(
      static_cast<
          complex<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>&>(
          stce_10092),
      static_cast<typename stce_10579<stce_10506, stce_10157, stce_10575<stce_10506, stce_10157>::stce_10578>::type>(
          stce_10093));
}
template <typename stce_9778> complex<stce_9778> stce_10594(complex<stce_9778> const& stce_10092) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = sin(stce_10584);
    stce_10582.real(sin(stce_10092.real()) * cosh(stce_10092.imag()));
    stce_10582.imag(cos(stce_10092.real()) * sinh(stce_10092.imag()));
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(sin(stce_10092.real()) * cosh(stce_10092.imag()));
    stce_10582.imag(cos(stce_10092.real()) * sinh(stce_10092.imag()));
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10595(complex<stce_9778> const& stce_10092) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = sinh(stce_10584);
    stce_10582.real(sinh(stce_10092.real()) * cos(stce_10092.imag()));
    stce_10582.imag(cosh(stce_10092.real()) * sin(stce_10092.imag()));
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(sinh(stce_10092.real()) * cos(stce_10092.imag()));
    stce_10582.imag(cosh(stce_10092.real()) * sin(stce_10092.imag()));
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10596(complex<stce_9778> const& stce_10092) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = cos(stce_10584);
    stce_10582.real(cos(stce_10092.real()) * cosh(stce_10092.imag()));
    stce_10582.imag(-sin(stce_10092.real()) * sinh(stce_10092.imag()));
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(cos(stce_10092.real()) * cosh(stce_10092.imag()));
    stce_10582.imag(-sin(stce_10092.real()) * sinh(stce_10092.imag()));
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10597(complex<stce_9778> const& stce_10092) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = cosh(stce_10584);
    stce_10582.real(cosh(stce_10092.real()) * cos(stce_10092.imag()));
    stce_10582.imag(sinh(stce_10092.real()) * sin(stce_10092.imag()));
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(cosh(stce_10092.real()) * cos(stce_10092.imag()));
    stce_10582.imag(sinh(stce_10092.real()) * sin(stce_10092.imag()));
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10598(complex<stce_9778> const& stce_10092) {
  complex<stce_9778> stce_10031 = sin(stce_10092) / cos(stce_10092);
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = tan(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10599(complex<stce_9778> const& stce_10092) {
  complex<stce_9778> stce_10031 = sinh(stce_10092) / cosh(stce_10092);
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = tanh(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10600(complex<stce_9778> const& stce_10092) {
  complex<stce_9778> stce_10031 = polar(static_cast<stce_9778>(exp(stce_10092.real())), stce_10092.imag());
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = exp(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10601(complex<stce_9778> const& stce_10092) {
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = log(stce_10584);
    stce_10582.real(log(abs(stce_10092)));
    stce_10582.imag(arg(stce_10092));
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(log(abs(stce_10092)));
    stce_10582.imag(arg(stce_10092));
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10602(complex<stce_9778> const& stce_10092) {
  complex<stce_9778> stce_10031 = log(stce_10092) / log(typename dco::mode<stce_9778>::active_t(10.0));
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = log10(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10603(complex<stce_9778> const& stce_10092) {
  complex<stce_9778> stce_10031;
  if (stce_10092.real() == typename dco::mode<stce_9778>::active_t()) {
    stce_9778 stce_10604 = sqrt(abs(stce_10092.imag()) / 2);
    stce_10031 = complex<stce_9778>(stce_10604, stce_10092.imag() < 0.0 ? stce_9778(-stce_10604) : stce_10604);
  } else {
    stce_9778 stce_10604 = sqrt(2 * (abs(stce_10092) + abs(stce_10092.real())));
    stce_9778 stce_10605 = stce_10604 / 2;
    stce_10031 = stce_10092.real() > typename dco::mode<stce_9778>::active_t()
                     ? complex<stce_9778>(stce_10605, stce_9778(stce_10092.imag() / stce_10604))
                     : complex<stce_9778>(abs(stce_10092.imag()) / stce_10604,
                                          stce_10092.imag() < stce_9778() ? stce_9778(-stce_10605) : stce_10605);
  }
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = sqrt(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10606(complex<stce_9778> const& stce_10092) {
  complex<stce_9778> stce_10031(-stce_10092.imag(), stce_10092.real());
  stce_10031 = asinh(stce_10031);
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = asin(stce_10584);
    stce_10582.real(stce_10031.imag());
    stce_10582.imag(-stce_10031.real());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.imag());
    stce_10582.imag(-stce_10031.real());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10607(complex<stce_9778> const& stce_10092) {
  complex<stce_9778> stce_10031((stce_10092.real() - stce_10092.imag()) * (stce_10092.real() + stce_10092.imag()) +
                                    stce_9778(1.0),
                                stce_9778(2.0) * stce_10092.real() * stce_10092.imag());
  stce_10031 = sqrt(stce_10031);
  stce_10031 = log(stce_10031 + stce_10092);
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = asinh(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10608(complex<stce_9778> const& stce_10092) {
  complex<stce_9778> stce_10031 = asin(stce_10092);
  const stce_9778 stce_10609 = 1.5707963267948966192313216916397514L;
  stce_10031 = complex<stce_9778>(stce_10609 - stce_10031.real(), -stce_10031.imag());
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = acos(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10610(complex<stce_9778> const& stce_10092) {
  complex<stce_9778> stce_10031 = stce_9778(2.0) * log(sqrt(stce_9778(0.5) * (stce_10092 + stce_9778(1.0))) +
                                                       sqrt(stce_9778(0.5) * (stce_10092 - stce_9778(1.0))));
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = acosh(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10611(complex<stce_9778> const& stce_10092) {
  const stce_9778 stce_10612 = stce_10092.real() * stce_10092.real();
  const stce_9778 stce_10571 = stce_9778(1.0) - stce_10612 - stce_10092.imag() * stce_10092.imag();
  stce_9778 stce_10613 = stce_10092.imag() + stce_9778(1.0);
  stce_9778 stce_10614 = stce_10092.imag() - stce_9778(1.0);
  stce_10613 = stce_10612 + stce_10613 * stce_10613;
  stce_10614 = stce_10612 + stce_10614 * stce_10614;
  complex<stce_9778> stce_10031 =
      complex<stce_9778>(stce_9778(0.5) * atan2(stce_9778(2.0) * stce_10092.real(), stce_10571),
                         stce_9778(0.25) * log(stce_10613 / stce_10614));
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = atan(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10615(complex<stce_9778> const& stce_10092) {
  const stce_9778 stce_10616 = stce_10092.imag() * stce_10092.imag();
  const stce_9778 stce_10571 = stce_9778(1.0) - stce_10616 - stce_10092.real() * stce_10092.real();
  stce_9778 stce_10613 = stce_9778(1.0) + stce_10092.real();
  stce_9778 stce_10614 = stce_9778(1.0) - stce_10092.real();
  stce_10613 = stce_10616 + stce_10613 * stce_10613;
  stce_10614 = stce_10616 + stce_10614 * stce_10614;
  complex<stce_9778> stce_10031 =
      complex<stce_9778>(stce_9778(0.25) * (log(stce_10613) - log(stce_10614)),
                         stce_9778(0.5) * atan2(stce_9778(2.0) * stce_10092.imag(), stce_10571));
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    complex<stce_9778> stce_10582;
    typedef typename dco::mode<stce_9778>::passive_t passive_t;
    complex<passive_t> stce_10583;
    complex<passive_t> stce_10584(dco::passive_value(stce_10092.real()), dco::passive_value(stce_10092.imag()));
    stce_10583 = atanh(stce_10584);
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
    return stce_10582;
  } else {
    complex<stce_9778> stce_10582;
    stce_10582.real(stce_10031.real());
    stce_10582.imag(stce_10031.imag());
    return stce_10582;
  }
}
template <typename stce_9778> complex<stce_9778> stce_10617(complex<stce_9778> const& stce_10092) {
  if (dco::IS_DEBUG && (isinf(stce_10092.real()) || isinf(stce_10092.imag()))) {
    throw dco::exception::create<std::runtime_error>(
        "std::proj(std::complex<T>): One value is inf; derivatives undefined. Please contact NAG (support@nag.co.uk).");
  }
  return stce_10092;
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
cos(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10596(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
cosh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10597(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
exp(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10600(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
log(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10601(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
log10(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10602(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
sin(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10594(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
sinh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10595(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
sqrt(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10603(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
tan(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10598(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
tanh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10599(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
asin(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10606(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
asinh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10607(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
acos(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10608(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
acosh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10610(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
atan(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10611(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
atanh(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10615(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<stce_9767, stce_10572>>
proj(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  return stce_10617(stce_9808);
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE dco::internal::active_type<stce_9767, stce_10572>
abs(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  dco::internal::active_type<stce_9767, stce_10572> stce_10582 = hypot(stce_9808.real(), stce_9808.imag());
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<dco::internal::active_type<stce_9767, stce_10572>>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_9808.real()), dco::passive_value(stce_9808.imag()));
    passive_t stce_10583 = abs(stce_10584);
    dco::passive_value(stce_10582) = stce_10583;
  }
  return stce_10582;
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE dco::internal::active_type<stce_9767, stce_10572>
arg(complex<dco::internal::active_type<stce_9767, stce_10572>> const& stce_9808) {
  dco::internal::active_type<stce_9767, stce_10572> stce_10582 = atan2(stce_9808.imag(), stce_9808.real());
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<dco::internal::active_type<stce_9767, stce_10572>>::passive_t passive_t;
    complex<passive_t> stce_10584(dco::passive_value(stce_9808.real()), dco::passive_value(stce_9808.imag()));
    passive_t stce_10583 = arg(stce_10584);
    dco::passive_value(stce_10582) = stce_10583;
  }
  return stce_10582;
}
template <class stce_9767, typename stce_10572>
DCO_STRONG_INLINE complex<dco::internal::active_type<stce_9767, stce_10572>>
polar(dco::internal::active_type<stce_9767, stce_10572> const& stce_10618,
      dco::internal::active_type<stce_9767, stce_10572> const& stce_10619) {
  complex<dco::internal::active_type<stce_9767, stce_10572>> stce_10582 =
      complex<dco::internal::active_type<stce_9767, stce_10572>>(stce_10618 * cos(stce_10619),
                                                                 stce_10618 * sin(stce_10619));
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<dco::internal::active_type<stce_9767, stce_10572>>::passive_t passive_t;
    passive_t stce_10584 = dco::passive_value(stce_10618);
    passive_t stce_10585 = dco::passive_value(stce_10619);
    std::complex<passive_t> stce_10583 = polar(stce_10584, stce_10585);
    dco::passive_value(stce_10582.real()) = stce_10583.real();
    dco::passive_value(stce_10582.imag()) = stce_10583.imag();
  }
  return stce_10582;
}
} // namespace std
